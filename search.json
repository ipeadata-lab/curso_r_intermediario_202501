[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R intermediário e pesquisa reprodutível",
    "section": "",
    "text": "Introdução\nEste site apresenta o material de apoio para o curso “R intermediário e pesquisa reprodutível”, oferecido em 2025 para servidores do Instituto de Pesquisa Econômica Aplicada (Ipea).\nO curso será realizado de forma remota híbrida, com aulas ao vivo e atividades práticas.\nAlém deste site, o material do curso também é composto por:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Página inicial</span>"
    ]
  },
  {
    "objectID": "index.html#introdução",
    "href": "index.html#introdução",
    "title": "R intermediário e pesquisa reprodutível",
    "section": "",
    "text": "Scripts em R que foram utilizados nas aulas\nGravação das aulas, em um link disponibilizado para as pessoas matriculadas no curso.\n\n\n\n\n\n\n\nNota\n\n\n\nRecomendamos que todas as pessoas participantes que verifiquem a página Instruções de instalação antes do início do curso.\nCaso tenha alguma dificuldade, entre em contato com a equipe do curso o quanto antes.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Página inicial</span>"
    ]
  },
  {
    "objectID": "index.html#pré-requisitos",
    "href": "index.html#pré-requisitos",
    "title": "R intermediário e pesquisa reprodutível",
    "section": "Pré-requisitos",
    "text": "Pré-requisitos\nEste curso é uma continuação do Introdução à análise de dados no R, e recomendamos que você tenha familiaridade com os conceitos abordados nele para aproveitar ao máximo os conteúdos aqui apresentados.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Página inicial</span>"
    ]
  },
  {
    "objectID": "index.html#equipe-do-curso",
    "href": "index.html#equipe-do-curso",
    "title": "R intermediário e pesquisa reprodutível",
    "section": "Equipe do curso",
    "text": "Equipe do curso\nBeatriz Milz  Pesquisadora Colaboradora | Estágio pós-doutoral  Laboratório de Planejamento Territorial (LaPlan) - Universidade Federal do ABC (UFABC)  Email | GitHub | LinkedIn | ResearchGate | Currículo Lattes | Orcid\nPedro Cavalcanti Gonçalves Ferreira  Coordenação de Ciência de Dados - COCD  Instituto de Pesquisa Econômica Aplicada (Ipea)  GitHub | LinkedIn | Currículo Lattes | Orcid\nRafael H. M. Pereira  Coordenador de Ciência de Dados  Instituto de Pesquisa Econômica Aplicada (Ipea)  Website | Google Scholar | Linkedin |",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Página inicial</span>"
    ]
  },
  {
    "objectID": "index.html#sobre-este-material",
    "href": "index.html#sobre-este-material",
    "title": "R intermediário e pesquisa reprodutível",
    "section": "Sobre este material",
    "text": "Sobre este material\n\n\n\nLicença\nEsse material está disponível sob a licença CC BY-SA 4.0.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Página inicial</span>"
    ]
  },
  {
    "objectID": "calendario.html",
    "href": "calendario.html",
    "title": "2  Calendário do curso",
    "section": "",
    "text": "A maioria das aulas acontecerão às segundas e quartas-feiras, exceto a aula do dia 30/01/2025, que acontecerá numa quinta-feira.\nAs aulas acontecerão das 09h às 12h, com intervalo de 15 minutos.\nSegue o calendário do curso:\n\n\n\nSemana\nData\nHorário\nDia da semana\nConteúdo previsto\n\n\n\n\n1\n20/01/2025\n09h-12h\nSegunda-feira\nApresentação do curso, Reprodutibilidade e estruturação de projeto\n\n\n1\n22/01/2025\n09h-12h\nQuarta-feira\nProdução de relatórios com Quarto\n\n\n2\n29/01/2025\n09h-12h\nQuarta-feira\nProdução de relatórios com Quarto (continuação)\n\n\n2\n30/01/2025\n09h-12h\nQuinta-feira (*)\nProdução de relatórios com Quarto (continuação) e Introdução ao controle de versão com Git e GitHub\n\n\n3\n03/02/2025\n09h-12h\nSegunda-feira\nIntrodução ao controle de versão com Git e GitHub (continuação)\n\n\n4\n10/02/2025\n09h-12h\nSegunda-feira\nManipulação de textos e datas\n\n\n4\n12/02/2025\n09h-12h\nQuarta-feira\nProgramação funcional e paralelização\n\n\n5\n17/02/2025\n09h-12h\nSegunda-feira\nProgramação funcional e paralelização (continuação) e Dados espaciais\n\n\n5\n19/02/2025\n09h-12h\nQuarta-feira\nDados espaciais (continuação)\n\n\n6\n24/02/2025\n09h-12h\nSegunda-feira\nIntrodução à Big Data\n\n\n7\n26/02/2025\n09h-11h (*)\nQuarta-feira\nDúvidas e encerramento\n\n\n\n\n(*): Atenção para as datas e horários diferentes.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Calendário do curso</span>"
    ]
  },
  {
    "objectID": "instalacao.html",
    "href": "instalacao.html",
    "title": "3  Instalações e outros preparativos",
    "section": "",
    "text": "3.1 Instalação de pacotes necessários\nPara instalar os pacotes necessários para o curso, execute o seguinte código:\ninstall.packages(c(\"tidyverse\", \"usethis\", \"renv\",\n                   \"here\", \"fuzzyjoin\", \"furrr\",\n                   \"dbplyr\", \"arrow\", \"vroom\",\n                   \"duckdb\", \"sf\", \"geobr\", \"quarto\"))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Instalações e outros preparativos</span>"
    ]
  },
  {
    "objectID": "instalacao.html#instalação-do-tinytex",
    "href": "instalacao.html#instalação-do-tinytex",
    "title": "3  Instalações e outros preparativos",
    "section": "3.2 Instalação do TinyTeX",
    "text": "3.2 Instalação do TinyTeX\nPara a aula de “Produção de relatórios com Quarto”, para exportar o relatório em PDF será necessário ter algum sistema de LaTeX instalado. O TinyTeX é uma versão mínima do LaTeX que é suficiente para o uso no curso.\nPrimeiramente, precisamos instalar o pacote tinytex:\n\ninstall.packages('tinytex')\n\nE então instalar o TinyTeX:\n\ntinytex::install_tinytex()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Instalações e outros preparativos</span>"
    ]
  },
  {
    "objectID": "instalacao.html#instalar-git",
    "href": "instalacao.html#instalar-git",
    "title": "3  Instalações e outros preparativos",
    "section": "3.3 Instalação do Git",
    "text": "3.3 Instalação do Git\nPara a aula de “Introdução controle de versão com Git e GitHub”, é necessário ter o Git instalado.\nO Git não é um pacote, e sim um software que deve ser instalado no seu computador.\nPara instalar o Git, acesse a página oficial do Git e siga as instruções de instalação para o seu sistema operacional.\n\n\n\n\n\n\n3.3.1 O RStudio encontrou a instalação do Git?\nPara verificar se o Git foi instalado corretamente, execute o seguinte comando no painel “Terminal” do RStudio:\n\ngit --version\n\ngit version 2.48.1\n\n\nEm alguns casos, o RStudio não encontra a instalação do Git automaticamente, e retorna uma mensagem de erro como a seguinte:\n&gt; 'git' não é reconhecido como um comando interno ou externo,\num programa operável ou um arquivo em lotes.\nNeste caso, é necessário informar ao RStudio onde o Git foi instalado. Para isso, abra o menu de configurações do RStudio (Tools -&gt; Global Options), selecione a aba Git/SVN e informe o caminho para o executável do Git em Git executable.\n\n\n\n\n\n\nDica\n\n\n\nAtenção! O caminho para o executável depende do sistema operacional, e de onde o Git foi instalado. Você precisará procurar isso no seu computador!\nAbaixo estão alguns exemplos de caminhos para o executável do Git, quando instalado nos locais padrão:\n\nWindows: C:/Program Files/Git/bin/git.exe\nmacOS e Linux: /usr/bin/git\nPara as pessoas utilizando o servidor do IPEA (substitua r000000 pelo seu usuário): C:/Users/r000000/AppData/Local/Programs/Git/bin/git.exe\n\n\n\n\n\n\nConfigurações do RStudio para o Git",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Instalações e outros preparativos</span>"
    ]
  },
  {
    "objectID": "instalacao.html#conta-github",
    "href": "instalacao.html#conta-github",
    "title": "3  Instalações e outros preparativos",
    "section": "3.4 Conta no GitHub",
    "text": "3.4 Conta no GitHub\nPara a aula de “Introdução controle de versão com Git e GitHub”, é necessário ter uma conta no GitHub.\nCaso ainda não tenha uma conta, acesse a página oficial do GitHub, clique em “Sign up” e crie uma conta gratuitamente.\n\n\n\nPágina inicial do GitHub\n\n\n\n\n\nPágina para criar a conta gratuitamente",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Instalações e outros preparativos</span>"
    ]
  },
  {
    "objectID": "instalacao.html#instalar-o-github-desktop",
    "href": "instalacao.html#instalar-o-github-desktop",
    "title": "3  Instalações e outros preparativos",
    "section": "3.5 Instalar o GitHub Desktop",
    "text": "3.5 Instalar o GitHub Desktop\nPara a aula de “Introdução controle de versão com Git e GitHub”, é recomendado instalar o GitHub Desktop, que é uma interface gráfica para o Git.\nPara instalar o GitHub Desktop, acesse a página oficial do GitHub Desktop e siga as instruções de instalação para o seu sistema operacional.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Instalações e outros preparativos</span>"
    ]
  },
  {
    "objectID": "reprodutibilidade.html",
    "href": "reprodutibilidade.html",
    "title": "4  Reprodutibilidade e estruturação de projeto",
    "section": "",
    "text": "4.1 Introdução à Reprodutibilidade\nNesta aula, o objetivo é apresentar o conceito de reprodutibilidade, e apresentar abordagens e ferramentas para estruturar projetos em ciência de dados, buscando garantir a reprodutibilidade dos resultados.\nA reprodutibilidade é um conceito central na ciência, embora não tenha uma definição única e comum (Gundersen 2021). Ao fazer um levantamento sobre o conceito de reprodutibilidade, Gundersen (2021) elaborou a seguinte definição:\nTradução livre:\nA definição prática de reprodutibilidade é frequentemente associada à capacidade de reproduzir os resultados de uma pesquisa a partir dos dados brutos e do código utilizado.\nDe acordo com Baker (2016), a partir de um questionário realizado pela revista Nature sobre reprodutibilidade com mais de 1500 pesquisadores, vários fatores contribuem para pesquisas não reprodutíveis, como a não disponibilização de códigos, métodos e dados brutos. A figura abaixo apresenta os fatores mais citados pelos respondentes:",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reprodutibilidade e estruturação de projeto</span>"
    ]
  },
  {
    "objectID": "reprodutibilidade.html#introdução-à-reprodutibilidade",
    "href": "reprodutibilidade.html#introdução-à-reprodutibilidade",
    "title": "4  Reprodutibilidade e estruturação de projeto",
    "section": "",
    "text": "“Reprodutibilidade é como escovar os dentes. Isso é bom para você, mas leva tempo e esforço. Depois de aprender, torna-se um hábito”. - Irakli Loladze, em pesquisa conduzida por Baker (2016).\n\n\n\n“Reproducibility is the ability of independent investigators to draw the same conclusions from an experiment by following the documentation shared by the original investigators.”\n\n\n\n“Reprodutibilidade é a capacidade de pesquisadores independentes chegarem às mesmas conclusões de um experimento ao seguir a documentação compartilhada pelos pesquisadores originais.”\n\n\n\n\n\n\nFatores que contribuem para pesquisas não reprodutíveis. Fonte: Baker (2016).\n\n\n\n4.1.1 Exercício\n\nReflita sobre a seguinte pergunta: Como você acha que a reprodutibilidade está relacionada ao seu trabalho? Se possível, discuta em grupo e posteriormente compartilhe com a turma suas ideias.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reprodutibilidade e estruturação de projeto</span>"
    ]
  },
  {
    "objectID": "reprodutibilidade.html#boas-práticas-em-projetos-de-análise-de-dados",
    "href": "reprodutibilidade.html#boas-práticas-em-projetos-de-análise-de-dados",
    "title": "4  Reprodutibilidade e estruturação de projeto",
    "section": "4.2 Boas práticas em projetos de análise de dados",
    "text": "4.2 Boas práticas em projetos de análise de dados\nPara aumentar a chance de desenvolver um projeto de análise de dados que seja reprodutível, algumas boas práticas podem ser adotadas, como:\n\nnão utilizar caminhos absolutos1\nevitar o uso de caracteres especiais em caminhos, variáveis e nomes de colunas2. Além disso, utilize nomes descritivos (ex: evite utilizar apenas x ou df).\narmazenar os arquivos de maneira consistente\nregistrar quais são as dependências (versões do R e dos pacotes utilizados)\ndocumentar as análises realizadas\ncontrolar as versões dos arquivos por meio de ferramentas como o Git e GitHub.\ncompartilhamento de dados brutos, códigos e documentação\n\nUma prática que pode ajudar a checar a reprodutibilidade de uma análise de dados é solicitar que outra pessoa que trabalha com você tente reproduzir os resultados a partir dos códigos, dados brutos e documentação (Markowetz 2015).\n\n4.2.1 Exercício\n\nVocê já teve alguma experiência em que a falta de reprodutibilidade foi um problema? Se sim, o que você aprendeu com essa experiência?\nConsiderando a seguir e a discussão feita em sala, o que você mudaria no código a seguir?\n\n\nlibrary(tidyverse)\ndata &lt;- read_rds(\"C:/Users/usuario/Downloads/sidra_4092_arrumado.rds\")\ndados &lt;- dados |&gt;\n  filter(ano == max(ano))\ndados |&gt;\n  group_by(uf) |&gt;\n  mutate(diferenca = perc_desocupacao - last(perc_desocupacao)) |&gt;\n  ungroup() |&gt;\n  mutate(uf = fct_reorder(uf, diferenca)) |&gt;\n  ggplot(aes(x = perc_desocupacao, y = uf)) +\n  geom_point(aes(color = trimestre_codigo)) +\n  theme_light()",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reprodutibilidade e estruturação de projeto</span>"
    ]
  },
  {
    "objectID": "reprodutibilidade.html#estrutura-de-projetos",
    "href": "reprodutibilidade.html#estrutura-de-projetos",
    "title": "4  Reprodutibilidade e estruturação de projeto",
    "section": "4.3 Estrutura de projetos",
    "text": "4.3 Estrutura de projetos\nProjetos estruturados são importantes para a reprodutibilidade na ciência de dados. Ferramentas como projetos do RStudio, pacotes em R, controle de versão com Git e GitHub3, relatórios reprodutíveis com Quarto4, {renv} e {targets} ajudam a organizar o trabalho, gerenciar dependências e automatizar processos, aumentando as chances que outras pessoas posam reproduzir os resultados a partir dos códigos e dados brutos. Ao adotar essas práticas, é possível reduzir erros, aumentar a confiabilidade e promover uma ciência mais transparente e colaborativa.\nA seguir, vamos apresentar algumas dessas ferramentas e práticas!",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reprodutibilidade e estruturação de projeto</span>"
    ]
  },
  {
    "objectID": "reprodutibilidade.html#projetos-no-rstudio",
    "href": "reprodutibilidade.html#projetos-no-rstudio",
    "title": "4  Reprodutibilidade e estruturação de projeto",
    "section": "4.4 Projetos no RStudio",
    "text": "4.4 Projetos no RStudio\n\n\n\n\n\n\n\nNota\n\n\n\nO conteúdo sobre projetos no RStudio foi abordado no curso “Introdução à análise de dados no R”.\n\n\nO RStudio oferece uma funcionalidade chamada projetos, que facilita a organização e a reprodutibilidade do trabalho em ciência de dados. Ao criar um projeto no RStudio, uma nova pasta é gerada no computador, e o RStudio automaticamente define essa pasta como o diretório de trabalho. Além disso, o RStudio também cria um arquivo com a extensão .Rproj dentro dessa pasta, que contém informações sobre o projeto.\nTrabalhar com projetos no RStudio é altamente recomendado, pois ajuda a manter os arquivos organizados e facilita a reprodução do código. Sempre que iniciar uma nova análise de dados, crie um projeto correspondente. Isso garante que todos os arquivos relacionados ao projeto estejam em um único local e evita problemas comuns, como dependência de caminhos absolutos.\nÉ recomendado que sempre trabalhemos em projetos no RStudio, pois isso facilita a organização dos arquivos e a reprodução do código. Portanto, ao começar a trabalhar em uma novo projeto de análise de dados, lembre-se de criar um .Rproj correspondente.\nPara manter a organização, salve os arquivos relacionados ao projeto (como scripts, bases de dados e resultados) dentro da pasta principal do projeto. No entanto, é uma boa prática estruturar o projeto em subpastas para separar diferentes tipos de arquivos, como dados, scripts e relatórios.\nUm exemplo de estrutura básica de projeto pode incluir as seguintes subpastas:\n\ndados/: Para armazenar bases de dados.\nscripts/: Para salvar scripts R utilizados na análise.\nrelatorios/: Para guardar relatórios gerados.\n\n\n4.4.1 Exercício: preparando o projeto do curso\n\nNo RStudio, crie um novo projeto para ser utilizado ao longo do curso. Lembre-se de criar o projeto em uma pasta que você possa acessar facilmente.\nDentro do projeto, crie as seguintes pastas para organizar os arquivos:\n\ndados/\ndados_output/\nscripts/\nrelatorios/\n\n\nVocê pode criar as pastas manualmente ou utilizar a função dir.create() para criar as pastas:\n\ndir.create(\"dados\")\ndir.create(\"dados_output\") \ndir.create(\"scripts\")\ndir.create(\"relatorios\")\n\n\nVamos também fazer download do arquivo sidrar_4092_bruto_2.csv, para usar em exemplos de aulas posteriores:\n\n\n# Arquivo .csv (texto separado por ponto e vírgula)\ndownload.file(\n  url = \"https://github.com/ipeadata-lab/curso_r_intro_202409/raw/refs/heads/main/dados/sidrar_4092_bruto_2.csv\",\n  destfile = \"dados/sidrar_4092_bruto_2.csv\",\n  mode = \"wb\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reprodutibilidade e estruturação de projeto</span>"
    ]
  },
  {
    "objectID": "reprodutibilidade.html#renv-gerenciando-dependências",
    "href": "reprodutibilidade.html#renv-gerenciando-dependências",
    "title": "4  Reprodutibilidade e estruturação de projeto",
    "section": "4.5 {renv}: gerenciando dependências",
    "text": "4.5 {renv}: gerenciando dependências\n\nO R e seus pacotes estão em constante evolução, com novas versões sendo lançadas regularmente para corrigir erros, adicionar funcionalidades e melhorar a eficiência. No entanto, essas atualizações podem introduzir mudanças que “quebram” análises anteriores, especialmente se as versões dos pacotes usados em um projeto não forem registradas. Para evitar esses problemas e garantir que as análises sejam reprodutíveis ao longo do tempo, podemos utilizar ferramentas que ajudem a gerenciar as dependências do projeto.\nO pacote {renv} é uma ferramenta que permite gerenciar as dependências de pacotes em projetos R. Ele registra quais foram os pacotes utilizados, quais é a versão de cada um deles, e a fonte de instalação (se foram instalados do CRAN, GitHub, R Universe, Bioconductor, etc). Isso possibilita que o ambiente seja reproduzido em qualquer máquina ou momento, mesmo se o R ou os pacotes forem atualizados.\nO {renv} é especialmente útil em projetos colaborativos, em que diferentes pessoas podem estar trabalhando no mesmo projeto, ou em projetos que serão retomados após um longo período de tempo.\nUm conceito importante do {renv} é o isolamento de ambiente. Isso significa que o {renv} possibilita armazenar as bibliotecas de pacotes do projeto em uma pasta específica, separada das bibliotecas globais do R. Isso evita conflitos entre versões de pacotes e garante que o ambiente de pacotes do projeto seja consistente e reprodutível.\nApesar de poderoso, o {renv} pode não ser necessário para projetos muito simples ou temporários.\n\n4.5.1 Arquivo renv.lock\nO {renv} registra as dependências do projeto no arquivo renv.lock, que é um arquivo que contém informações sobre as versões dos pacotes instalados. Com esse arquivo, é possível recriar o ambiente de pacotes exatamente como ele estava quando o arquivo foi gerado. Isso é útil para garantir a reprodutibilidade do projeto e evitar problemas com pacotes desatualizados.\nAtenção: o arquivo renv.lock não deve ser alterado manualmente.\n\n\n\n\n\n\nExpanda para ver um exemplo de conteúdo do renv.lock\n\n\n\n\n\nNo exemplo abaixo, temos um exemplo do conteúdo do renv.lock. Observe que está registrado que estamos usando o R versão 4.4.1 e o pacote readr (deixamos apenas um pacote para servir de exemplo, mas o arquivo contém informações sobre todos os pacotes utilizados no projeto):\n\n{\n1  \"R\": {\n    \"Version\": \"4.4.1\",\n    \"Repositories\": [\n      {\n        \"Name\": \"CRAN\",\n        \"URL\": \"https://cloud.r-project.org\"\n      }\n    ]\n  },\n2  \"Packages\": {\n3    \"readr\": {\n      \"Package\": \"readr\",\n      \"Version\": \"2.1.5\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n4      \"Requirements\": [\n        \"R\",\n        \"R6\",\n        \"cli\",\n        \"clipr\",\n        \"cpp11\",\n        \"crayon\",\n        \"hms\",\n        \"lifecycle\",\n        \"methods\",\n        \"rlang\",\n        \"tibble\",\n        \"tzdb\",\n        \"utils\",\n        \"vroom\"\n      ],\n      \"Hash\": \"9de96463d2117f6ac49980577939dfb3\"\n    }\n  }\n}\n\n\n1\n\nVersão do R utilizada, e de qual repositório ele foi instalado.\n\n2\n\nLista de pacotes utilizados (essa lista foi cortada para aparecer apenas um pacote, como exemplo).\n\n3\n\nInformações sobre o pacote instalado: nome, versão, repositório de origem, dependências e hash.\n\n4\n\nDependências do pacote instalado: quais pacotes são necessários para que o pacote readr funcione corretamente?\n\n\n\n\n\n\n\n\n\n4.5.2 Principais funções do {renv}\nPara começar a utilizar o {renv} em um projeto, podemos utilizar a função renv::init(). Isso criará uma pasta renv/ e um arquivo renv.lock, que registrará as dependências do projeto. Além disso, o {renv} armazenará as bibliotecas de pacotes do projeto na pasta renv/library (chamamos isso de isolamento).\n\nrenv::init()\n\nPara verificar o status do ambiente e quais pacotes estão instalados, podemos usar a função renv::status():\n\nrenv::status()\n\nA função renv::snapshot() é utilizada para registrar/atualizar as dependências do projeto no arquivo renv.lock. Isso é útil quando novos pacotes são instalados ou atualizados, e queremos registrar essas mudanças.\n\nrenv::snapshot()\n\nPara restaurar o ambiente de pacotes de um projeto a partir do arquivo renv.lock, podemos utilizar a função renv::restore():\n\nrenv::restore()\n\n\n\n\n\n\n\nNota\n\n\n\n\n\nTambém é possível utilizar a função renv::snapshot() com um projeto que não foi iniciado com {renv} (iniciado com o renv::init()).\nNeste caso, ele registrará o estado atual das dependências nos caminhos das bibliotecas atuais. Isso torna possível restaurar os pacotes atuais, fornecendo portabilidade e reprodutibilidade leves sem o isolamento de ambiente.\n\n\n\n\n\n4.5.3 Exercício 1\nNeste exercício, vamos praticar a utilização do {renv} em um projeto, utilizando o isolamento de ambiente.\n\nAbra o projeto criado no exercício anterior (ou crie um novo projeto, se preferir).\nInicie o {renv} no projeto utilizando a função renv::init().\n\n\n\n\n\n\n\nExemplo de output da função renv::init()\n\n\n\n\n\n\nrenv::init()\n\nrenv: Project Environments for R\n\nWelcome to renv! It looks like this is your first time using renv.\nThis is a one-time message, briefly describing some of renv's functionality.\n\nrenv will write to files within the active project folder, including:\n\n  - A folder 'renv' in the project directory, and\n  - A lockfile called 'renv.lock' in the project directory.\n\nIn particular, projects using renv will normally use a private, per-project\nR library, in which new packages will be installed. This project library is\nisolated from other R libraries on your system.\n\nIn addition, renv will update files within your project directory, including:\n\n  - .gitignore\n  - .Rbuildignore\n  - .Rprofile\n\nFinally, renv maintains a local cache of data on the filesystem, located at:\n\n  - \"/cloud/home/r217847/.cache/R/renv\"\n\nThis path can be customized: please see the documentation in `?renv::paths`.\n\nPlease read the introduction vignette with `vignette(\"renv\")` for more information.\nYou can browse the package documentation online at https://rstudio.github.io/renv/.\n\nDo you want to proceed? [y/N]: \n\ny\n\n- \"/cloud/home/r217847/.cache/R/renv\" has been created.\nThe following package(s) will be updated in the lockfile:\n\n# RSPM -----------------------------------------------------------------------\n- renv   [* -&gt; 1.0.11]\n\nThe version of R recorded in the lockfile will be updated:\n- R      [* -&gt; 4.4.2]\n\n- Lockfile written to \"/cloud/project/renv.lock\".\n\nRestarting R session...\n\n- Project '/cloud/project' loaded. [renv 1.0.11]\n\n\n\n\nObserve no seu projeto se o arquivo renv.lock foi criado e a pasta renv/ foi gerada. Abra o arquivo renv.lock para verificar as informações registradas.\nUtilize a função renv::status() para verificar o status do ambiente e quais pacotes estão instalados.\n\n\n\n\n\n\n\nExemplo de output da função renv::status()\n\n\n\n\n\n\nrenv::status()\n#&gt; No issues found -- the project is in a consistent state.\n\n\n\n\n\nInstale o pacote palmerpenguins utilizando a função install.packages(\"palmerpenguins\") no console.\nCrie um RScript, escreva library(palmerpenguins) e salve-o (dentro do projeto).\nUtilize novamente a função renv::status() para verificar o status do ambiente e quais pacotes estão instalados.\n\n\n\n\n\n\n\nExemplo de output da função renv::status()\n\n\n\n\n\n\nrenv::status()\n\nThe following package(s) are in an inconsistent state:\n\n package        installed recorded used\n palmerpenguins y         n        y   \n\nSee `?renv::status` for advice on resolving these issues.\n\n\n\n\nUtilize a função renv::snapshot() para registrar as dependências do projeto no arquivo renv.lock.\n\n\n\n\n\n\n\nExemplo de output da função renv::snapshot()\n\n\n\n\n\n\nrenv::snapshot()\n\nThe following package(s) will be updated in the lockfile:\n\n# CRAN -----------------------------------------------------------------------\n- palmerpenguins   [* -&gt; 0.1.1]\nDo you want to proceed? [Y/n]:\n\ny\n\n- Lockfile written to \"/cloud/project/renv.lock\".\n\n\n\n\nObserve no arquivo renv.lock se as informações sobre o pacote palmerpenguins foram registradas.\n\n\n\n4.5.4 Exercício 2\nNeste exercício, o objetivo é praticar a restauração do ambiente de pacotes de um projeto a partir do arquivo renv.lock.\n\nCrie um novo projeto no RStudio, para que possamos trabalhar neste exercício com o {renv} (não utilize o mesmo do exercício 1).\nFaça o download deste arquivo renv.lock que utilizaremos de exemplo, e salve na pasta do projeto. Você pode fazer o download manualmente, ou utilizar o código abaixo para baixar o arquivo diretamente no R:\n\n\ndownload.file(\n  url = \"https://raw.githubusercontent.com/ipeadata-lab/curso_r_intermediario_202501/refs/heads/main/exercicios/renv-2/renv.lock\",\n  destfile = \"renv.lock\",\n  mode = \"wb\")\n\n\nAbra o arquivo renv.lock para verificar as informações registradas.\nUtilize a função renv::restore() para restaurar o ambiente de pacotes do projeto a partir do arquivo renv.lock. Quando solicitado, escolha a opção para não isolar o ambiente de pacotes (2: Do not activate the project and use the current library paths.).\n\n\n\n\n\n\n\nExemplo de output da função renv::restore()\n\n\n\n\n\n\nrenv::restore()\n\n\nrenv: Project Environments for R\n\nWelcome to renv! It looks like this is your first time using renv.\nThis is a one-time message, briefly describing some of renv's functionality.\n\nrenv will write to files within the active project folder, including:\n\n  - A folder 'renv' in the project directory, and\n  - A lockfile called 'renv.lock' in the project directory.\n\nIn particular, projects using renv will normally use a private, per-project\nR library, in which new packages will be installed. This project library is\nisolated from other R libraries on your system.\n\nIn addition, renv will update files within your project directory, including:\n\n  - .gitignore\n  - .Rbuildignore\n  - .Rprofile\n\nFinally, renv maintains a local cache of data on the filesystem, located at:\n\n  - \"/cloud/home/r217847/.cache/R/renv\"\n\nThis path can be customized: please see the documentation in `?renv::paths`.\n\nPlease read the introduction vignette with `vignette(\"renv\")` for more information.\nYou can browse the package documentation online at https://rstudio.github.io/renv/.\nDo you want to proceed? [y/N]: \n\ny\n\n- \"/cloud/home/r217847/.cache/R/renv\" has been created.\nIt looks like you've called renv::restore() in a project that hasn't been activated yet.\nHow would you like to proceed? \n\n1: Activate the project and use the project library.\n2: Do not activate the project and use the current library paths.\n3: Cancel and resolve the situation another way.\n\nAtenção neste ponto!\n\nA opção 1 (Activate the project and use the project library) é a opção que irá ativar o ambiente de pacotes do projeto, isolando as bibliotecas de pacotes do projeto das bibliotecas globais do R.\nA opção 2 (Do not activate the project and use the current library paths) é a opção que não irá ativar o ambiente de pacotes do projeto, e os pacotes serão instalados nas bibliotecas globais do R.\n\n\n2\n\nSelection: 2\nThe following package(s) will be updated:\n\n# CRAN -----------------------------------------------------------------------\n- parzer   [* -&gt; 0.4.1]\n- Rcpp     [* -&gt; 1.0.13-1]\n- withr    [* -&gt; 3.0.2]\n\nDo you want to proceed? [Y/n]: y\n\ny\n\n# Downloading packages -------------------------------------------------------\n- Querying repositories for available source packages ... Done!\n- Downloading Rcpp from CRAN ...                OK [3.3 Mb]\n- Downloading parzer from CRAN ...              OK [433.6 Kb]\n- Downloading withr from CRAN ...               OK [100.8 Kb]\nSuccessfully downloaded 3 packages in 2.1 seconds.\n\n# Installing packages --------------------------------------------------------\n- Installing Rcpp ...                           OK [built from source and cached in 26s]\n- Installing withr ...                          OK [built from source and cached in 3.3s]\n- Installing parzer ...                         OK [built from source and cached in 26s]\nSession restored from your saved work on 2025-Jan-20 10:58:30 UTC (18 minutes ago)\n\n\n\n\nVerifique no seu projeto se o pacote parzer está disponível para uso.\n\n\nlibrary(parzer)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reprodutibilidade e estruturação de projeto</span>"
    ]
  },
  {
    "objectID": "reprodutibilidade.html#introdução-ao-targets",
    "href": "reprodutibilidade.html#introdução-ao-targets",
    "title": "4  Reprodutibilidade e estruturação de projeto",
    "section": "4.6 Introdução ao {targets}",
    "text": "4.6 Introdução ao {targets}\n\nO pacote {targets} é uma ferramenta para gerenciamento de pipelines reprodutíveis e escaláveis em R. Ele foi projetado para ajudar a organizar e automatizar análises de dados complexas, garantindo que todos os passos da análise sejam executados na ordem correta e de forma eficiente.\nO {targets} utiliza o conceito de pipelines: cada etapa da análise é definida como um “alvo” (ou target), e as dependências entre essas etapas são gerenciadas automaticamente. Isso significa que, quando algo é alterado em uma etapa inicial, o {targets} identifica quais etapas subsequentes precisam ser reexecutadas e atualiza apenas essas partes, economizando tempo e esforço.\n\n\n\n\n\n\n\nExemplo de gráfico de pipeline com targets, por Will Landau\n\n\nO {targets} é especialmente útil em análises que incluem múltiplas etapas interdependentes, como pré-processamento, modelagem e visualização. Ele também é indicado para situações em que se trabalha com grandes volumes de dados ou análises que demandam muito tempo de execução.\nEmbora seja uma ferramenta poderosa, o {targets} pode ser excessivo para análises simples que consistem em poucas etapas. Ele é mais indicado para fluxos de trabalho complexos.\n\n4.6.1 Materiais de referência sobre targets\n\nDocumentação do pacote\nLivro sobre {targets}\nApresentação “Reproducible computation at scale in R” por Will Landau.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reprodutibilidade e estruturação de projeto</span>"
    ]
  },
  {
    "objectID": "reprodutibilidade.html#outros-pacotes-citados-em-aula",
    "href": "reprodutibilidade.html#outros-pacotes-citados-em-aula",
    "title": "4  Reprodutibilidade e estruturação de projeto",
    "section": "4.7 Outros pacotes citados em aula",
    "text": "4.7 Outros pacotes citados em aula\n\n{reprex} - este pacote nos auxilia a criar exemplos reprodutíveis. Ele é útil para compartilhar dúvidas em fóruns, reportar bugs e criar tutoriais.\n{conflicted} - este pacote nos ajuda a gerenciar conflitos de funções. Ele é útil quando dois pacotes possuem funções com o mesmo nome, e precisamos escolher qual função utilizar.\n{groundhog} - este pacote nos ajuda a utilizar versões específicas de pacotes.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reprodutibilidade e estruturação de projeto</span>"
    ]
  },
  {
    "objectID": "reprodutibilidade.html#materiais",
    "href": "reprodutibilidade.html#materiais",
    "title": "4  Reprodutibilidade e estruturação de projeto",
    "section": "4.8 Materiais",
    "text": "4.8 Materiais\nO material do curso “Relatórios reprodutíveis com R”, ministrado por Beatriz Milz no programa de Verão do IME-USP, foi utilizado como base para a elaboração de parte do material desta aula.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reprodutibilidade e estruturação de projeto</span>"
    ]
  },
  {
    "objectID": "reprodutibilidade.html#material-complementar",
    "href": "reprodutibilidade.html#material-complementar",
    "title": "4  Reprodutibilidade e estruturação de projeto",
    "section": "4.9 Material complementar",
    "text": "4.9 Material complementar\n\nCapítulos do livro “R para Ciência de Dados” (2 ed) por Hadley Wickham, Mine Çetinkaya-Rundel, e Garrett Grolemund:\n\nScripts e projetos",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reprodutibilidade e estruturação de projeto</span>"
    ]
  },
  {
    "objectID": "reprodutibilidade.html#referências-citadas",
    "href": "reprodutibilidade.html#referências-citadas",
    "title": "4  Reprodutibilidade e estruturação de projeto",
    "section": "4.10 Referências citadas",
    "text": "4.10 Referências citadas\n\n\n\n\nBaker, Monya. 2016. «1, 500 scientists lift the lid on reproducibility». Nature 533 (7604): 452–54. https://doi.org/10.1038/533452a.\n\n\nGundersen, Odd Erik. 2021. «The fundamental principles of reproducibility». Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences 379 (2197): 20200210. https://doi.org/10.1098/rsta.2020.0210.\n\n\nMarkowetz, Florian. 2015. «Five selfish reasons to work reproducibly». Genome Biology 16 (1). https://doi.org/10.1186/s13059-015-0850-7.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reprodutibilidade e estruturação de projeto</span>"
    ]
  },
  {
    "objectID": "reprodutibilidade.html#footnotes",
    "href": "reprodutibilidade.html#footnotes",
    "title": "4  Reprodutibilidade e estruturação de projeto",
    "section": "",
    "text": "Os conceitos diretório de trabalho, caminhos absolutos e caminhos relativos foram abordados na aula sobre diretórios de trabalho e projetos do curso “Introdução à análise de dados no R”.↩︎\nCaso queira revisar este tópico, recomendamos a leitura da seção sobre boas práticas para nomear objetos no R do curso “Introdução à análise de dados no R”.↩︎\nSerá abordado na aula sobre introdução ao controle de versão com Git e GitHub.↩︎\nSerá abordado na aula sobre produção de relatórios com Quarto.↩︎",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reprodutibilidade e estruturação de projeto</span>"
    ]
  },
  {
    "objectID": "relatorios.html",
    "href": "relatorios.html",
    "title": "5  Produção de relatórios com Quarto",
    "section": "",
    "text": "5.1 Introdução\nNo curso Introdução à análise de dados no R, utilizamos arquivos .R para escrever os códigos em R. Em scripts .R, todo o conteúdo é interpretado como código em R, exceto o que estava precedido de # (utilizado para comentários).\nPor exemplo:\n# Aula sobre ggplot2 -----\n\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\n# Código que gera o gráfico\npenguins |&gt;\n  ggplot() +\n  aes(x = flipper_length_mm, y = body_mass_g) +\n  geom_point(aes(color = species, shape = species)) +\n  scale_color_manual(values = c(\"darkorange\", \"darkorchid\", \"cyan4\")) +\n  theme_minimal()\n\n# ....\nEssa forma de trabalhar é ótima para criar scripts de análise de dados, mas não é a melhor forma de criar relatórios que combinam texto, código e resultados.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Produção de relatórios com Quarto</span>"
    ]
  },
  {
    "objectID": "relatorios.html#literate-programming",
    "href": "relatorios.html#literate-programming",
    "title": "5  Produção de relatórios com Quarto",
    "section": "5.2 Literate programming",
    "text": "5.2 Literate programming\n\nO conceito de literate programming, ou programação letrada1, foi criado por Donald Knuth na década de 80. Esse conceito propõe a escrita de códigos intercalados com texto explicativo, de forma que o fluxo de raciocínio fique claro para leitores e colaboradores. A ideia central é que o código seja parte da comunicação, tornando o relatório um documento legível tanto para computadores quanto para humanos.\nCom base nesse conceito, surgiram ferramentas que tornam possível criar relatórios reprodutíveis que combinam texto, código e resultados, como o R Markdown e, mais recentemente, o Quarto.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Produção de relatórios com Quarto</span>"
    ]
  },
  {
    "objectID": "relatorios.html#r-markdown",
    "href": "relatorios.html#r-markdown",
    "title": "5  Produção de relatórios com Quarto",
    "section": "5.3 R Markdown",
    "text": "5.3 R Markdown\n\nO R Markdown é um pacote em R que possibilita criar arquivos com códigos em R, resultados dos códigos, e textos explicativos. Esses arquivos tem extensão .Rmd.\nLançado em 20152, ele rapidamente se tornou uma das ferramentas mais populares para a criação de relatórios dinâmicos e reprodutíveis na comunidade R.\n\n\n\nExemplo de um arquivo .Rmd\n\n\nO R Markdown possibilita exportar os arquivos em diversos formatos, como HTML, PDF, Word, apresentações, entre outros.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Produção de relatórios com Quarto</span>"
    ]
  },
  {
    "objectID": "relatorios.html#quarto",
    "href": "relatorios.html#quarto",
    "title": "5  Produção de relatórios com Quarto",
    "section": "5.4 Quarto",
    "text": "5.4 Quarto\n\nComo citado anteriormente, o R Markdown é uma ferramenta muito boa para escrita técnica e científica reprodutível, mas, por ser um pacote em R, o seu uso acaba ficando limitado às pessoas que usam R.\nEm 2022, a Posit (anteriormente chamada de RStudio) (mesma empresa responsável pelo RMarkdown) lançou o Quarto, uma nova ferramenta que permite a criação de documentos dinâmicos e reprodutíveis.\nO Quarto é um sistema de escrita técnica e científica, de código aberto. Ele é uma evolução do R Markdown, mas não depende do R para funcionar. Isso significa que você pode usar o Quarto para escrever documentos com códigos em Python, R, Julia, Observable, entre outras linguagens, e exportar para diversos formatos, como PDF, HTML, Word, entre outros. Por exemplo: Você pode usar o VSCode como IDE, escrever um documento com código em Python e gerar o documento final. Tudo isso sem precisar ter o R e/ou RStudio instalados.\n\n\n\n\n\n\n\nArte por Allison Horst.\n\n\n\n\n\n\n\n\nNota\n\n\n\nO Quarto foi lançado em 2022, e apresenta melhorias em relação ao R Markdown.\nNesta aula, vamos focar no Quarto, mas caso queira utilizar o RMarkdown, os principais conceitos são os mesmos.\n\n\n\n5.4.1 Instalação do Quarto\nComo dito anteriormente, o Quarto não é um pacote em R como o RMarkdown, e sim um software que podemos instalar em nosso computador.\nQuando instalamos as versões mais recentes do RStudio IDE, o Quarto já vem instalado. Caso você não tenha o RStudio instalado, você pode instalar o Quarto de forma independente.\nPara instalar ou atualizar o Quarto, acesse a página de instalação, faça o download do instalador referente ao seu sistema operacional (Windows, Mac OS, Linux) e faça a instalação.\n\n\n5.4.1.1 Exercício\n\nVerifique se o Quarto está instalado no seu computador. Para isso, abra o RStudio e verifique se o botão “New File” apresenta a opção “Quarto Document”.\n\n\n\n\n5.4.2 Criar um novo documento Quarto (.qmd)\nOs arquivos Quarto tem extensão .qmd, e podem ser criados no RStudio clicando no botão “New File” e selecionando “Quarto Document”.\n\n\n\nCriar um novo arquivo Quarto\n\n\nEm seguida, o RStudio apresentará uma janela chamada “New Quarto Document” com algumas opções para criar um novo arquivo. Essas opções são passíveis de alteração posteriormente, então não precisamos nos preocupar muito com elas agora. Em resumo:\n\nTitle: Título do documento\nAuthor: Nome de quem está criando o documento\nFormat: Formato do documento (HTML, PDF, Word). Vamos manter em HTML.\nEngine: Knitr ou Jupyter. Vamos manter em Knitr.\nEditor: Caixa para selecionar o editor visual. Por enquanto, vamos deixar desmarcado.\n\nPara criar o documento, clique em “Create”:\n\n\n\nNew Quarto Document\n\n\nO RStudio criará um arquivo .qmd com uma estrutura inicial:\n\n\n\nArquivo Quarto criado\n\n\n\n5.4.2.1 Exercício\n\nCrie um arquivo com Quarto básico, adicionando o título “Meu primeiro relatório”, e no campo de autoria adicionando o seu nome. Mantenha selecionada a opção para exportar um arquivo HTML. Salve o arquivo como \"aula-2.qmd\" na pasta do projeto do curso, em \"relatorios/\".\n\n\n\n\n5.4.3 Renderizar o arquivo\nPodemos clicar no botão Render para que o arquivo seja renderizado (ou seja, o código fonte será transformado em um arquivo final HTML/Word/PDF/etc). É necessário salvar o arquivo antes de renderizar.\nNa imagem a seguir, temos um exemplo de um arquivo em sua versão .qmd e a versão renderizada em HTML. Observe que o botão render foi destacado em vermelho, e que o arquivo renderizado foi aberto no painel Viewer do RStudio.\n\n\n\nExemplo: Arquivo .qmd e a versão renderizada em HTML\n\n\nCaso você clique em render e não aconteça nada, você pode:\n\nVerificar se o RStudio está configurado para mostrar a versão preliminar (Preview) do documento no painel Viewer, clicando na engrenagem ao lado do botão Render e selecionando a opção “Preview in Viewer Pane”:\n\n\n\n\nOpção Preview in Viewer Pane\n\n\n\nVerificar se o arquivo foi salvo na pasta do projeto.\n\nNos próximos tópicos, vamos explorar a estrutura de um arquivo Quarto e como adicionar conteúdos a ele.\n\n5.4.3.1 Exercício\n\nRenderize o arquivo \"aula-2.qmd\" que você criou anteriormente. Verifique se o arquivo foi renderizado corretamente, se você consegue visualizar o conteúdo no painel Viewer do RStudio, e se o arquivo foi salvo na pasta do projeto.\n\n\n\n\n5.4.4 Estrutura de um arquivo Quarto\nOs arquivos Quarto tem extensão .qmd, e são divididos em três partes:\n\nMetadados: Informações sobre o documento, como título, autor, formato, data, editor, entre outros. Essa parte é delimitada por --- no início e no final. É escrita em formato yaml, com a estrutura chave: valor. Nos metadados, a indentação (espaços entre o início da linha e o início do texto) é importante para o correto funcionamento do documento.\nCampos de código (code chunks): Trechos de código (em R ou outra linguagem) que podem ser executados e exibidos no documento. Os campos de código podem ser criados utilizando a marcação ```{r} no início e ``` no final, ou utilizando o botão de criar novo chunk: .\nTextos com marcação em Markdown: Textos explicativos, títulos, listas, tabelas, imagens, links, entre outros. A marcação é feita em Markdown, uma linguagem de marcação simples.\n\n\n\n\n\n\n\nO que é Markdown?\n\n\n\nMarkdown é uma linguagem de marcação simples que permite escrever textos com formatação básica, como títulos, listas, links, imagens, entre outros. A ideia é que o texto seja legível mesmo sem a formatação, e que a marcação seja simples e intuitiva.\n\n\nO arquivo abaixo é um exemplo de um arquivo Quarto:\n1---\ntitle: \"Título do documento\"\nformat: html\n---\n\n2# Título 1\n\nEste é um texto de exemplo.\n\n```{r}\n3# este é um campo de código em R\n1 + 1\n``` \n\n1\n\nMetadados\n\n2\n\nTexto com marcação em Markdown\n\n3\n\nCampo de código\n\n\n\n5.4.4.1 Exercício\n\nVamos começar a adicionar um pouco de conteúdo no arquivo \"aula-2.qmd\" criado anteriormente. Adicione:\n\n\nUm campo de código, onde o pacote tidyverse seja carregado.\nUm campo de código, com o código para criar um gráfico simples com o pacote ggplot2. Caso você não tenha um código em mente, você pode utilizar o código abaixo:\n\n\nlibrary(palmerpenguins)\npenguins |&gt;\n  ggplot() +\n  aes(x = flipper_length_mm, y = body_mass_g) +\n  geom_point(aes(color = species, shape = species)) +\n  scale_color_manual(values = c(\"darkorange\", \"darkorchid\", \"cyan4\")) +\n  theme_minimal()\n\n\nUm parágrafo simples de texto, descrevendo o que foi feito.\n\n\nSalve o arquivo e renderize-o. Verifique se o conteúdo foi renderizado corretamente.\n\n\n\n\n\n\n\nAtenção: Dicas importantes sobre os campos de código\n\n\n\n\nOs campos de código são executados na ordem em que aparecem no documento. Se você tentar executar um campo de código que depende de um objeto que ainda não foi criado, um erro será gerado.\nO documento Quarto deve ser independente dos objetos que estão carregados no painel Environment do RStudio, e dos pacotes que você carregou na sua sessão do R. Todos os pacotes e objetos que você precisa devem ser carregados no próprio documento.\nPor padrão, o conteúdo do campo de código é executado toda vez que o documento é renderizado. Se você não quer que o código seja executado, você pode adicionar a opção eval: false no campo de código (falaremos mais sobre as opções de campos de código posteriormente).\nCuidado com o que você adiciona no campo de código! Por exemplo: não adicione o comando install.packages() no campo de código, pois isso pode instalar pacotes toda vez que o documento for renderizado. Se você precisa instalar pacotes, faça isso no console do RStudio. Caso queira deixar isso registrado no campo de código, você pode: 1) adicionar como comentário (# install.packages(\"nome-do-pacote\")), ou 2) adicionar a opção eval: false no campo de código.\n\n\n\n\n\n\n5.4.5 Editor Source e Visual\nAo utilizar documentos Quarto, podemos escolher entre dois modos de edição: Source (código fonte) e Visual.\n\nEditor Source: Modo de edição de código, onde podemos ver e editar o código fonte do documento. É o modo padrão.\nEditor Visual: Modo de edição visual, onde podemos ver uma prévia do documento como um todo, com o texto formatado e uma barra de ferramentas. É importante perceber que quando alteramos o documento no editor visual, o código fonte é atualizado automaticamente. Saiba mais sobre o Editor Visual.\n\n\n\n\nBarra de ferramentas do editor visual\n\n\nA seguir, temos um exemplo de um documento Quarto no modo Source e Visual:\n\n\n\n\n\n\n\n\n\nEditor Source\n\n\n\n\n\n\n\nEditor Visual\n\n\n\n\n\nPara alterar entre os modos de edição, escolha a opção desejada nos botões no canto superior direito do documento:\n\n\n\nAlterar entre modo Source e Visual\n\n\nO editor Visual tem várias opções para facilitar a formação do texto com Markdown e inserir outros tipos de conteúdo (como por exemplo: notas de rodapé, citações, imagens, links, tabelas simples, expressões matemáticas com LaTeX, entre outros):\n\n\n\nOpções do editor Visual. Fonte: documentação do Quarto.\n\n\nCaso queira que o RStudio sempre abra o documento no editor de preferência, você pode adicionar essa informação nos metadados do documento, utilizando editor: seguido de source ou visual. Por exemplo:\n\n\n\n\n\n\n---\neditor: source\n---\n\n\n---\neditor: visual\n---\n\n\n\n\n5.4.5.1 Exercício\n\nExplore as opções do editor Visual, adicionando um pouco de formatação ao texto do arquivo \"aula-2.qmd\". Tente adicionar pelo menos um título, uma lista, e um link.\nAltere entre os modos Source e Visual. Veja a diferença entre o código fonte e a visualização do documento.\nEntre os modos Source e Visual, qual você prefere para escrever documentos? Por quê?\n\n\n\n\n5.4.6 Opções de campos de código (chunk options)\nOs campos de código, ou code chunks, são trechos de código que podem ser executados em documentos Quarto. Eles oferecem diversas opções para personalizar a execução e a exibição do código e dos resultados. Essas opções permitem configurar como o código aparece no relatório, como ele é executado e como os resultados são apresentados.\nAs opções devem ser apresentadas na linha após o início do campo de código, precedido de #|, no formato nome_opcao: valor. Por exemplo:\n```{{r}}\n#| nome_opcao: valor\n\n# código em R aqui\n1 + 1\n```\nExistem muitas opções de campos de código, e estão listadas na documentação do Quarto. Neste momento, vamos explorar algumas das principais opções!\n\n5.4.6.1 Exibir ou ocultar o código\nA opção echo: define se o código será exibido (ou não) no relatório. Por padrão, o código é exibido. Para ocultar o código, podemos adicionar echo: false no campo de código.\n\n\n5.4.6.2 Executar ou não o código\nA opção eval: define se o código será executado (ou não) no relatório. Por padrão, o código é executado. Para não executar o código, podemos adicionar eval: false no campo de código.\n\n\n5.4.6.3 Mensagens (message) e avisos (warning)\nAo executar um campo de código, mensagens e avisos podem ser gerados. Podemos controlar se essas mensagens e avisos serão exibidos no relatório com as opções message: e warning:. Por padrão, ambos são exibidos. Para ocultar as mensagens, podemos adicionar message: false no campo de código. Para ocultar os avisos, podemos adicionar warning: false.\n\n\n5.4.6.4 Nome do campo de código (label)\nPodemos adicionar um nome ao campo de código, utilizando a opção label: nome-do-campo. Atencão:\n\nÉ importante que cada campo de código nomeado tenha um nome único! Não podemos repetir os nomes.\nDeixe o nome do campo de código sem caracteres especiais, sem espaços, e sem _. Caso queira separar palavras, utilize o -.\n\nÉ interessante nomear os campos de código, pois:\n\nÉ necessário para fazer referências cruzadas (neste caso, precisamos utilizar os prefixos, como fig- para figuras, e tbl- para tabelas).\nFacilita a identificação dos campos de código, principalmente em documentos maiores (ao abrir o arquivo .qmd, existe um meno no canto inferior esquerdo do RStudio onde podemos navegar pelo documento utilizando os nomes dos campos de código e os títulos e subtítulos).\nCaso ocorram erros, é mais fácil identificar o campo de código que gerou o erro, pois a mensagem apresentada indicará o nome do campo de código.\nAs imagens geradas a partir de campos de código nomeados são salvas com o nome do campo de código. Isso facilita a identificação das imagens geradas na pasta do projeto.\n\n\n\n5.4.6.5 Alterando a configuração global dos campos de código\nPodemos alterar a configuração global dos campos de código no documento, adicionando as opções no início do documento, nos metadados. Por exemplo:\n---\nexecute: \n1  message: false\n2  warning: false\n3  echo: false\n---\n\n1\n\nA opção message: false oculta as mensagens.\n\n2\n\nA opção warning: false oculta os avisos.\n\n3\n\nA opção echo: false oculta o código.\n\n\nIsso fará com que todos os campos de código do documento tenham essas opções por padrão. Caso você queira alterar as opções de um campo de código específico, você pode adicionar as opções no campo de código específico.\n\n\n\n5.4.7 Caminhos em documentos Quarto\nQuando trabalhamos em scripts .R e utilizando projetos do RStudio, os caminhos relativos são compostos partindo da pasta raíz do projeto.\nConsiderando a estrutura de pastas preparadas na primeira aula: dados/sidrar_4092_bruto.csv significa que o arquivo sidrar_4092_bruto.csv está na pasta dados, que está na raíz do projeto.\n.\n├── dados/\n│   └── sidrar_4092_bruto.csv\n├── projeto.Rproj\n├── relatorios/\n│   └── exemplo.qmd\n\nNos documentos Quarto, os caminhos relativos são compostos partindo da pasta onde o arquivo .qmd está salvo. Por exemplo: se o arquivo .qmd está salvo na pasta relatorios, e queremos adicionar a base de dados que está na pasta dados, o caminho relativo seria ../dados/sidrar_4092_bruto.csv. Os dois pontos ../ significam “subir um nível” na estrutura de pastas.\n\n\n\n\n\n\nNota\n\n\n\n./ significa “a pasta atual” (neste caso, a pasta onde o arquivo .qmd está salvo), e ../ significa “subir um nível” na estrutura de pastas.\n\n\nUma forma mais robusta de trabalhar com os caminhos é utilizando a função here::here(), que compõe o caminho absoluto, partindo da pasta inicial do projeto. Por exemplo: here::here(\"dados/sidrar_4092_bruto.csv\") significa que o arquivo sidrar_4092_bruto.csv está na pasta dados, que está na raíz do projeto.\n\nhere::here(\"dados/sidrar_4092_bruto.csv\")\n\n[1] \"/home/runner/work/curso_r_intermediario_202501/curso_r_intermediario_202501/dados/sidrar_4092_bruto.csv\"\n\n\nEm resumo, podemos “envelopar” os caminhos relativos com a função here::here(), para garantir que o caminho seja composto corretamente, independente de onde o arquivo .qmd está salvo.\n\n\n5.4.8 Adicionando conteúdos com código\n\n\n\n\n\n\nNota\n\n\n\nExistem vários tipos de conteúdo que podem ser adicionados a um documento Quarto, como texto, código, gráficos, tabelas, imagens, links, entre outros.\nO melhor lugar para aprender sobre esses conteúdos é a documentação do Quarto, que é muito completa e bem organizada.\n\n\nVamos explorar alguns tipos de conteúdos que podem ser adicionados a um documento Quarto que sejam resultados de códigos em R.\nComo citado anteriormente, podemos adicionar código em R em campos de código, ou code chunks. Dentro de um campo de código, podemos adicionar comentários, códigos em R, e os resultados dos códigos serão exibidos logo em seguida no documento.\nPara adicionar um campo de código, utilizamos a marcação ```{r} no início e ``` no final. Por exemplo:\n\n```{r}\n# Exemplo: somando 1 + 1\n1 + 1\n```\n\n[1] 2\n\n\nA partir de agora, vamos omitir a marcação de iniciar e finalizar os campos de código, porém saiba que é necessário adicionar essas marcações para que o código seja executado. Por exemplo, o código acima seria apresentado desta forma:\n\n# Exemplo: somando 1 + 1\n1 + 1\n\n[1] 2\n\n\n\n5.4.8.1 Adicionando gráficos\nPara adicionar um gráfico, podemos criar um campo de código e adicionar o código que gera o gráfico (igual ao utilizando em scripts .R).\nOs gráficos gerados a partir de um campo de código são exibidos logo após o código.\nPor exemplo:\n\n# Carregar os pacotes\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\n# exemplo de código\npenguins |&gt;\n  ggplot() +\n  aes(x = flipper_length_mm, y = body_mass_g) +\n  geom_point(aes(color = species, shape = species)) +\n  scale_color_manual(values = c(\"darkorange\", \"darkorchid\", \"cyan4\")) +\n  labs(\n    x = \"Comprimento da nadadeira (mm)\",\n    y = \"Massa corporal (g)\",\n    color = \"Espécie\",\n    shape = \"Espécie\",\n    title = \"Relação entre comprimento da nadadeira e massa corporal\",\n    subtitle = \"Pinguins das espécies Adelie, Chinstrap e Gentoo\",\n    caption = \"Fonte: Pacote palmerpenguins.\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n5.4.8.2 Adicionando tabelas\nPara adicionar tabelas (que sejam geradas com código), não basta apenas adicionar o código que gera a tabela. Veja o que acontece se tentarmos adicionar uma tabela com o código abaixo:\n\npinguins_frequencia &lt;- penguins |&gt; \n  count(species, island, sort = TRUE)\n\npinguins_frequencia\n\n# A tibble: 5 × 3\n  species   island        n\n  &lt;fct&gt;     &lt;fct&gt;     &lt;int&gt;\n1 Gentoo    Biscoe      124\n2 Chinstrap Dream        68\n3 Adelie    Dream        56\n4 Adelie    Torgersen    52\n5 Adelie    Biscoe       44\n\n\nObserve que o resultado que apareceu no relatório é igual ao que apareceria no console do R.\nPara que a tabela seja exibida de forma mais amigável, podemos utilizar alguma função de tabela para gerar tabelas. Existem diversas funções (de diferentes pacotes em R) que possibilitam a criação de tabelas. A função knitr::kable() é muito utilizada, e permite criar tabelas simples a partir de um data frame.\nPor exemplo, podemos utilizar o knitr::kable() para exibir a tabela criada:\n\npinguins_frequencia |&gt; \n  knitr::kable()\n\n\n\n\nspecies\nisland\nn\n\n\n\n\nGentoo\nBiscoe\n124\n\n\nChinstrap\nDream\n68\n\n\nAdelie\nDream\n56\n\n\nAdelie\nTorgersen\n52\n\n\nAdelie\nBiscoe\n44\n\n\n\n\n\nPodemos explorar os argumentos da função para personalizar a tabela, como adicionar nomes de colunas, entre outros. Por exemplo:\n\npinguins_frequencia |&gt; \n  knitr::kable(col.names = c(\"Espécie\", \"Ilha\", \"Quantidade\"))\n\n\n\n\nEspécie\nIlha\nQuantidade\n\n\n\n\nGentoo\nBiscoe\n124\n\n\nChinstrap\nDream\n68\n\n\nAdelie\nDream\n56\n\n\nAdelie\nTorgersen\n52\n\n\nAdelie\nBiscoe\n44\n\n\n\n\n\n\n\n\n\n\n\nDica\n\n\n\nAlém da função knitr::kable(), existem outras funções que podem ser utilizadas para criar tabelas. Abaixo listamos alguns pacotes que possuem funções para criar tabelas, e podem ser explorados posteriormente:\n\nkableExtra: este pacote apresenta funções para personalizar tabelas criadas com knitr::kable(), porém o seu funcionamento é focado em tabelas em HTML e PDF (com LaTeX). Se o seu objetivo é gerar documentos em word, não utilize o kableExtra.\nflextable: este pacote é focado em criar tabelas para documentos em Word, e permite maior personalização. Para aprender a utilizar o flextable, consulte a documentação do pacote e o guia de usuário (flextable book).\nreactable: este pacote é focado em criar tabelas interativas em HTML, e permite adicionar filtros, ordenação, entre outros. Para aprender a utilizar o reactable, consulte a documentação do pacote.\ngt: este pacote foi criado pela equipe da RStudio/Posit, e tenta utilizar uma filosofia similar ao ggplot2 (a gramática dos gráficos), porém com tabelas (gt sendo gramática de tabelas). O gt tem funções para as diferentes partes da tabela: cabeçalho, corpo, rodapé, entre outros. Para aprender a utilizar o gt, consulte a documentação do pacote. Curiosidade: em 2023 a mesma equipe lançou a biblioteca gt para Python.\n\n\n\n\n5.4.8.2.1 Exercício\n\nNo arquivo \"aula-2.qmd\", crie um campo de código com uma tabela de frequência de pinguins por espécie e sexo, utilizando a base de dados penguins. Salve essa tabela de frequência em um objeto chamado pinguins_freq_especie_sexo.\nUtilizando o objeto criado, apresente essa tabela formatada com a função knitr::kable().\nExperimente adicionar outra tabela utilizando alguma função de tabela de outro pacote citado como extra, como flextable::flextable(), reactable::reactable(), ou gt::gt().\n\n\n\n\n5.4.8.3 Adicionar código em linha (inline code)\nAté agora, exploramos como adicionar conteúdos com código dentro de um campo de código. Mas e se quisermos adicionar um resultado de um código em um texto?\nNão é interessante adicionar manualmente conteúdos que podem ser gerados com código, pois isso pode tornar o documento menos reprodutível. Principalmente se os dados podem ser atualizados com o tempo!\nPara adicionar um resultado de um código em um texto, podemos utilizar o que chamamos de código em linha, ou inline code. Para isso, utilizamos a seguinte sintaxe:\n\nPor exemplo, o texto abaixo apresenta conteúdos feitos com campos de código:\n\nA base de dados penguins apresenta pinguins de três espécies: Adelie, Gentoo, Chinstrap. A base possui 344 observações e 8 (sendo que cada observação corresponde a um pinguim) variáveis: species, island, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, sex, year. A coleta de dados foi feita em três ilhas: Torgersen, Biscoe, Dream, entre os anos de 2007 e 2009.\n\nVocê consegue identificar onde foram utilizados os códigos em linha?\n\n\n\n\n\n\nClique para ver a resposta!\n\n\n\n\n\nOs conteúdos em destaque foram feitos com códigos em linha:\n\nA base de dados penguins apresenta pinguins de três espécies: Adelie, Gentoo, Chinstrap. A base possui 344 observações e 8 (sendo que cada observação corresponde a um pinguim) variáveis: species, island, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, sex, year. A coleta de dados foi feita em três ilhas: Torgersen, Biscoe, Dream, entre os anos de 2007 e 2009.\n\n\n\n\n\n\n\n\n\n\nClique para ver o código!\n\n\n\n\n\n\n\n\n\nDicas para adicionar conteúdos com código em linha:\n\nSe você vai escrever algo no texto que pode ser gerado com código, experimente utilizar o código em linha.\nA base de dados que você está utilizando pode ser atualizada futuramente? Se sim, busque adicionar conteúdos com códigos em linha.\nCaso algum conteúdo que você quer adicionar com código de linha dependa de um código “grande” (mais de uma linha), é interessante criar um campo de código, salvar o resultado em um objeto, e utilizar o código em linha para chamar o objeto.\n\n\n5.4.8.3.1 Exercícios\n\nAinda no arquivo \"aula-2.qmd\": utilizando a base de dados pnud_min do pacote abjData, escreva uma breve descrição da base de dados, utilizando códigos em linha. Ideias de conteúdos: número de observações, número de variáveis, variáveis presentes na base, quais são os anos presentes na base, quais são os municípios com o menor e maior indicador de IDH municipal para o ano mais recente, entre outros.\n\nCaso não conheça o pacote abjData, você pode carregar a base de dados com o código abaixo:\n\n# install.packages(\"abjData\") # executar caso não tenha o abjData instalado\nlibrary(abjData)\npnud_min\n\n# A tibble: 16,686 × 15\n   ano   muni_id muni_nm   uf_sigla regiao_nm  idhm idhm_e idhm_l idhm_r espvida\n   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;\n 1 1991  1100015 ALTA FLO… RO       Norte     0.329  0.112  0.617  0.516    62.0\n 2 1991  1100023 ARIQUEMES RO       Norte     0.432  0.199  0.684  0.593    66.0\n 3 1991  1100031 CABIXI    RO       Norte     0.309  0.108  0.636  0.43     63.2\n 4 1991  1100049 CACOAL    RO       Norte     0.407  0.171  0.667  0.593    65.0\n 5 1991  1100056 CEREJEIR… RO       Norte     0.386  0.167  0.629  0.547    62.7\n 6 1991  1100064 COLORADO… RO       Norte     0.376  0.151  0.658  0.536    64.5\n 7 1991  1100072 CORUMBIA… RO       Norte     0.203  0.039  0.572  0.373    59.3\n 8 1991  1100080 COSTA MA… RO       Norte     0.425  0.22   0.629  0.553    62.8\n 9 1991  1100098 ESPIGÃO … RO       Norte     0.388  0.159  0.653  0.561    64.2\n10 1991  1100106 GUAJARÁ-… RO       Norte     0.468  0.247  0.662  0.625    64.7\n# ℹ 16,676 more rows\n# ℹ 5 more variables: rdpc &lt;dbl&gt;, gini &lt;dbl&gt;, pop &lt;int&gt;, lat &lt;dbl&gt;, lon &lt;dbl&gt;\n\n\n\n\n\n\n5.4.9 Tipos de formatos para exportar\nO Quarto permite exportar os documentos em diversos formatos, como HTML, PDF, Word, entre outros. Para definir o formato de saída, podemos adicionar um campo format nos metadados do documento. Por exemplo:\n\nHTML:\n\n---\nformat: html\n---\n\nWord:\n\n---\nformat: docx\n---\n\nPDF (é necessário ter alguma instalação de LaTeX no computador, veja as página de instalações):\n\n---\nformat: pdf\n---\n\nPDF com Typst - Existe um novo formato chamado typst, que também possibilita gerar arquivos PDF, porém é mais rápido que a versão tradicional (que utiliza o LaTeX). A documentação do Quarto apresenta exemplos de arquivos no formato typst e como configurá-lo.\n\n---\nformat: typst\n---\n\nApresentação em HTML:\n\n---\nformat: revealjs\n---\nEssas são as opções de formatos mais utilizadas. Para ver a lista completa, consulte a documentação do Quarto.\n\n\n5.4.10 Quarto CLI\nO Quarto Command Line Interface (CLI - Interface de linha de comando). Ou seja, podemos utilizar o Quarto no terminal, utilizando comandos. Isso é útil para automatizar tarefas, ou para utilizar o Quarto em ambientes que não possuem uma interface gráfica (como o RStudio).\nPodemos acessar o terminal no RStudio acessando o painel Terminal (geralmente este painel fica no canto inferior esquerdo do RStudio, como uma aba ao lado do painel Console).\n\n\n\nTerminal no RStudio\n\n\nTambém podemos acessar o terminal diretamente no computador, utilizando o terminal do sistema operacional (como o terminal do Windows, ou o terminal do Mac OS). Porém, para isso, é necessário acessar o diretório do projeto que estamos trabalhando (utilizando o comando cd- change directory):\n\ncd Documents/IPEA-DATALAB/curso_r_intermediario_202501 \n\nUm comando útil para saber quais são as opções disponíveis é o quarto help:\n\nquarto help\n\n\nUsage:   quarto\nVersion: 1.6.40\n\nDescription:\n\n  Quarto CLI\n\nOptions:\n\n  -h, --help     - Show this help.                            \n  -V, --version  - Show the version number for this program.  \n\nCommands:\n\n  render     [input] [args...]     - Render files or projects to various document types.\n  preview    [file] [args...]      - Render and preview a document or website project.  \n  serve      [input]               - Serve a Shiny interactive document.                \n  create     [type] [commands...]  - Create a Quarto project or extension               \n  use        &lt;type&gt; [target]       - Automate document or project setup tasks.          \n  add        &lt;extension&gt;           - Add an extension to this folder or project         \n  update     [target...]           - Updates an extension or global dependency.         \n  remove     [target...]           - Removes an extension.                              \n  convert    &lt;input&gt;               - Convert documents to alternate representations.    \n  pandoc     [args...]             - Run the version of Pandoc embedded within Quarto.  \n  typst      [args...]             - Run the version of Typst embedded within Quarto.   \n  run        [script] [args...]    - Run a TypeScript, R, Python, or Lua script.        \n  install    [target...]           - Installs a global dependency (TinyTex or Chromium).\n  uninstall  [tool]                - Removes an extension.                              \n  tools                            - Display the status of Quarto installed dependencies\n  publish    [provider] [path]     - Publish a document or project to a provider.       \n  check      [target]              - Verify correct functioning of Quarto installation. \n  help       [command]             - Show this help or the help of a sub-command.       \n\n\nTambém podemos consultar a versão do Quarto com o comando quarto --version:\n\nquarto --version\n\n1.6.40\n\n\nOutro comando útil é o quarto render, que renderiza um arquivo .qmd específico:\n\nquarto render arquivo.qmd\n\n\n5.4.10.1 Pacote {quarto} no R\nExiste um pacote em R chamado {quarto} que permite utilizar o Quarto no R. Esse pacote possui funções similares às funções do Quarto CLI, e internamente faz chamadas ao Quarto CLI.\nPara instalar o pacote {quarto}, podemos utilizar o comando install.packages(\"quarto\").\nPara verificar a versão do pacote {quarto}, podemos utilizar a função quarto::quarto_version():\n\nquarto::quarto_version()\n\n[1] '1.6.40'\n\n\nPara renderizar um arquivo .qmd com o pacote {quarto}, podemos utilizar a função quarto::quarto_render(\"caminho_do_arquivo.qmd\"). Isso é similar à clicar no botão Render no RStudio.\n\n\n\n5.4.11 Projetos do Quarto\nAté então, exploramos como criar arquivos simples em Quarto. Mas e se quisermos criar um projeto com múltiplos arquivos .qmd?\nUma opção é explorar os projetos do Quarto. Ao criar um projeto no RStudio (File -&gt; New Project -&gt; New Project), podemos escolher uma das opções de projetos com Quarto:\n\n\n\n\n\nAo criar um projeto do RStudio escolhendo um Project type com Quarto (como website, blog, book, manuscript), o RStudio irá disponibilizar uma estrutura de arquivos para que possamos começar a escrever o seu projeto.\nNos projetos tipo Quarto, existe um arquivo chamado _quarto.qml que irá receber as informações básicas de metadados comuns aos arquivos .qmd do projeto.\nPara renderizar os arquivos do projeto, podemos utilizar a função quarto::quarto_render(), ou executar no terminal quarto render.\n\n\n5.4.12 Extensões\nO Quarto possui várias extensões que podem ser utilizadas para adicionar funcionalidades ao documento. Muitas dessas extensões foram desenvolvidas por pessoas da comunidade (e não necessariamente a equipe desenvolvedora do Quarto).\nPodemos consultar a lista de extensões disponíveis na página de extensões do Quarto.\n\n\n\nTipos de extensão do Quarto\n\n\nPara instalar e utilizar uma extensão, precisamos utilizar o Quarto CLI (linha de comando) (com o comando quarto install extension), ou a função quarto::quarto_add_extension().\nNa página da documentação de cada extensão, é possível encontrar informações sobre como instalar e utilizar a extensão.\n\n\n\n\n\n\nNota\n\n\n\nNo RMarkdown, era comum que a comunidade de R criasse novos pacotes para expandir as funcionalidades da ferramenta. No Quarto, as extensões funcionam de forma similar: é a forma com que a comunidade pode contribuir com novas funcionalidades.\n\n\n\n\n5.4.13 Dúvidas da aula\n\n\n\n\n\n\nIdioma do documento\n\n\n\n\nAo renderizar um documento em HTML, temos alguns elementos em inglês (como author, date, table of contents, entre outros). É possível esse conteúdo em português?\n\nPodemos usar a seguinte configuração nos metadados:\n---\nlang: pt\n---\nCaso tenha dúvidas, consulte a página de documentação.\n\n\n\n\n\n\n\n\nSumário\n\n\n\n\nÉ possível adicionar um sumário no documento Quarto?\n\nPodemos usar a seguinte configuração nos metadados:\n---\nformat:\n  html:\n1    toc: true\n---\n\n1\n\nTOC é a sigla para Table Of Contents, ou seja, sumário. Ao utilizar toc: true, o sumário será adicionado ao documento.\n\n\nExistem outras opções disponíveis para personalizar a forma como o sumário aparece. Essas opções estão listadas na página de documentação.\n\n\n\n\n\n\n\n\nArquivo autocontido\n\n\n\n\nAo gerar um arquivo HTML, o Quarto exporta um arquivo .html e junto à ele, algumas pastas com arquivos .css, .js, entre outros. É possível exportar um arquivo HTML que seja autocontido, ou seja, que não dependa de pastas adicionais?\n\nPodemos usar a seguinte configuração nos metadados:\n---\nformat:\n  html:\n1    embed-resources: true\n---\n\n1\n\nembed-resources: true faz com que o arquivo HTML seja autocontido, ou seja, que não dependa de pastas adicionais.\n\n\nAtenção: o arquivo autocontido costuma ser maior (ocupar mais espaço do computador) do que um arquivo “padrão” (que depende de arquivos em pastas adicionais).\nCaso necessário, consulte a página de documentação.\n\n\n\n\n5.4.14 Links úteis na documentação do Quarto\n\nComo instalar\nExemplos básicos de markdown\nEditor Visual\nOpções de campo de código\nComo configurar o campo de autores: nome, email, afiliação, ORCID, etc\nComo configurar o sumário\nConfigurações de metadados para gerar arquivos HTML\nÉ possivel adicionar citações com o Quarto?\nSobre a referência cruzada\nFormatos disponíveis para exportar documentos\nLista de extensões do Quarto",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Produção de relatórios com Quarto</span>"
    ]
  },
  {
    "objectID": "relatorios.html#materiais",
    "href": "relatorios.html#materiais",
    "title": "5  Produção de relatórios com Quarto",
    "section": "5.5 Materiais",
    "text": "5.5 Materiais\nO material do curso “Relatórios reprodutíveis com R”, ministrado por Beatriz Milz no programa de Verão do IME-USP, foi utilizado como base para a elaboração de parte do material desta aula.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Produção de relatórios com Quarto</span>"
    ]
  },
  {
    "objectID": "relatorios.html#material-complementar",
    "href": "relatorios.html#material-complementar",
    "title": "5  Produção de relatórios com Quarto",
    "section": "5.6 Material complementar",
    "text": "5.6 Material complementar\n\nCapítulos do livro “R para Ciência de Dados” (2 ed) por Hadley Wickham, Mine Çetinkaya-Rundel, e Garrett Grolemund:\n\nComunicar: Quarto\nComunicar: Formatos para Quarto",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Produção de relatórios com Quarto</span>"
    ]
  },
  {
    "objectID": "relatorios.html#footnotes",
    "href": "relatorios.html#footnotes",
    "title": "5  Produção de relatórios com Quarto",
    "section": "",
    "text": "https://www.ime.usp.br/~pf/CWEB/lit-prog.html↩︎\nCuriosidade: o criador do pacote R Markdown, Yihui Xie, fez uma apresentação sobre a história do R Markdown no R-Day Brasil em 2021.↩︎",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Produção de relatórios com Quarto</span>"
    ]
  },
  {
    "objectID": "git-github.html",
    "href": "git-github.html",
    "title": "6  Introdução ao controle de versão com Git e GitHub",
    "section": "",
    "text": "6.1 Introdução\nQuando estamos trabalhando em um projeto, é comum que façamos várias alterações em nossos arquivos ao longo do tempo. Você já se deparou com uma situação em que você tinha várias versões de um arquivo, como este exemplo?\n/Documentos/projeto-tcc/\n├── script.R\n├── tcc.qmd\n├── tcc_corrigido.qmd\n├── tcc_corrigido2.qmd\n├── tcc_final.qmd\n├── tcc_finalfinal.qmd\n├── tcc_final_ultimo.qmd\n├── juro_que_eh_a_ultima_versao.qmd\n└── FINAL.qmd\nProvavelmente todos nós temos ou tivemos algo assim em algum momento, porque precisamos salvar nosso trabalho, mas ainda precisamos ter acesso a versões anteriores.\nExiste uma forma mais robusta de trabalhar com as versões dos arquivos. Os sistemas de controle de versão são ferramentas que nos ajudam a gerenciar a evolução e as mudanças de um conjunto de arquivos que chamaremos de repositório.\nUma ferramenta similar ao controle de versão é o histórico de revisões do Google Docs, mas de uma forma muito mais controlada.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introdução ao controle de versão com Git e GitHub</span>"
    ]
  },
  {
    "objectID": "git-github.html#o-que-é-git",
    "href": "git-github.html#o-que-é-git",
    "title": "6  Introdução ao controle de versão com Git e GitHub",
    "section": "6.2 O que é Git?",
    "text": "6.2 O que é Git?\nGit é um sistema de controle de versão distribuído que permite a colaboração entre várias pessoas em um projeto ao mesmo tempo, sem sobrescrever o trabalho dos outros. Com o Git, cada alteração é salva em um histórico, o que permite voltar a versões anteriores se necessário. Além disso, facilita a colaboração e a integração de mudanças de diferentes colaboradores.\nPara utilizar o Git, precisamos primeiramente instalar o software no nosso computador (indicado na página de instalações).",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introdução ao controle de versão com Git e GitHub</span>"
    ]
  },
  {
    "objectID": "git-github.html#o-que-é-github",
    "href": "git-github.html#o-que-é-github",
    "title": "6  Introdução ao controle de versão com Git e GitHub",
    "section": "6.3 O que é GitHub?",
    "text": "6.3 O que é GitHub?\nGitHub é uma plataforma web que utiliza o Git para o controle de versões e a colaboração. Permite que as pessoasarmazenem seus repositórios Git na nuvem, facilitando o acesso e a colaboração de qualquer lugar. O GitHub também oferece ferramentas adicionais, como gerenciamento de projetos, e revisão de código.\nPara começar a utilizar o GitHub, precisamos primeiramente criar uma conta gratuita no site (indicado na página de instalações e outros preparativos).\n\n\n\nLogo da empresa GitHub\n\n\n\n\n\n\n\n\nAviso\n\n\n\nAtenção! Git e GitHub são coisas diferentes. O Git é o sistema de controle de versão (um softare que instalamos no computador), enquanto o GitHub é uma plataforma web que utiliza o Git.\nO GitHub não é a única plataforma que utiliza o Git. Outras plataformas populares são o GitLab e o Bitbucket. Entretanto, o GitHub é a plataforma mais popular e amplamente utilizada.\n\n\n\n6.3.1 Exercícios\n\nVerifique se o Git está instalado no seu computador. Caso não esteja, instale o Git conforme indicado na página de instalações.\n\nVocê pode verificar se o Git está instalado no seu computador executando o seguinte comando no terminal:\n\n1git --version\n\n\n1\n\nVerificar a versão do Git instalada no computador.\n\n\n\n\ngit version 2.48.1\n\n\n\nFaça login no GitHub. Caso não tenha uma conta, crie uma conta gratuita, conforme indicado na página de instalações e preparações.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introdução ao controle de versão com Git e GitHub</span>"
    ]
  },
  {
    "objectID": "git-github.html#perfil-no-github",
    "href": "git-github.html#perfil-no-github",
    "title": "6  Introdução ao controle de versão com Git e GitHub",
    "section": "6.4 Perfil no GitHub",
    "text": "6.4 Perfil no GitHub\nAo criar nossa conta no GitHub, teremos um perfil público na internet. A página do perfil conta a história do nosso trabalho através dos repositórios em que estamos interessados, das colaborações que realizamos e das conversas que tivemos.\nPodemos acessar o nosso perfil clicando na nossa foto no canto superior direito da página inicial do GitHub. Podemos adicionar no nosso perfil informações sobre nós, como nossa localização, empresa, site pessoal, ORCID, pronome que preferimos utilizar, redes sociais, etc.\n\n\n\nComo acessar nosso perfil\n\n\nPodemos atualizar nosso perfil com informações sobre nós, como nossa localização, empresa, site pessoal, ORCID, pronome que preferimos utilizar, redes sociais, etc.\n\n\n\nExemplo de perfil do GitHub\n\n\nPara atualizar o perfil, podemos clicar no botão “Edit profile” na página do perfil, na barra lateral esquerda.\n\n6.4.1 Exercício\n\nAcesse o seu perfil no GitHub e atualize informações básicas sobre você. Sugestões: adicione pelo menos uma foto e o nome.\nCompartilhe o link do seu perfil no GitHub no chat do curso.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introdução ao controle de versão com Git e GitHub</span>"
    ]
  },
  {
    "objectID": "git-github.html#repositórios",
    "href": "git-github.html#repositórios",
    "title": "6  Introdução ao controle de versão com Git e GitHub",
    "section": "6.5 Repositórios",
    "text": "6.5 Repositórios\nUm repositório é um espaço onde armazenamos nossos arquivos e pastas. Criamos um repositório para cada projeto, e podemos adicionar arquivos de código, imagens, dados, documentação, etc.\nA imagem a seguir apresenta a página inicial do repositório no GitHub do material do curso:\n\n\n\n\n\n\n\nExemplo de repositório no GitHub\n\n\n\n6.5.1 Criar um novo repositório\nPodemos criar um repositório diretamente no GitHub, clicando no botão “New” no canto superior esquerdo da página inicial:\n\n\n\nCriar um novo repositório no GitHub\n\n\nO GitHub direcionará para a página de criar novo repositório (Create a new repository). Nesta página, podemos fazer algumas configurações:\n\nAdicionar um nome para o repositório: lembrando que o nome do repositório deve ser “limpo”, ou seja, sem caracteres especiais, espaços, etc.\n\n\n\n\n\n\n\nAdicionar uma descrição: uma breve descrição do que o repositório contém. Isso pode ser alterado posteriormente, então não precisamos nos preocupar muito com isso inicialmente. A descrição é importante para que outras pessoas entendam o que o repositório contém, e consigam encontrá-lo mais facilmente nas buscas.\n\n\n\n\n\n\n\nEscolher se o repositório será público ou privado: Os repositórios podem ser públicos ou privados. Os repositórios públicos são visíveis para qualquer pessoa, enquanto os repositórios privados são visíveis apenas para as pessoas que têm permissão para acessá-los. Essa etapa é muito importante: não queremos expor informações sensíveis ou dados privados em repositórios públicos.\n\n\n\n\n\n\n\nAdicionar um arquivo README.md: O arquivo README.md é um arquivo de texto onde podemos adicionar informações sobre o repositório. Ele é exibido na página inicial do repositório no GitHub, e é uma forma de apresentar o repositório para outras pessoas. O README.md é escrito em Markdown. Recomendo selecionar essa opção sempre.\n\n\n\n\n\n\n\nAdicionar um arquivo .gitignore: O arquivo .gitignore é um arquivo de texto onde podemos listar os arquivos e pastas que não queremos que sejam versionados pelo Git. Por exemplo, arquivos temporários, arquivos de dados grandes, etc. Nesta opção, o GitHub está nos oferecendo uma lista de arquivos .gitignore pré-definidos para diferentes linguagens de programação, e podemos escolher a opção para a linguagem R.\n\n\n\n\n\n\n\nAdicionar um arquivo de licença: A licença é um documento que define as regras de uso do código. Existem várias licenças disponíveis, e a escolha da licença depende do que queremos permitir que outras pessoas façam com o nosso código. Caso não tenhamos certeza sobre a licença, podemos deixar essa opção em branco e adicionar a licença posteriormente.\n\n\n\n\n\n\nApós preencher as informações, podemos clicar no botão “Create repository” para criar o repositório.\n\n\n\nCriar um novo repositório no GitHub\n\n\n\n\n6.5.2 Exercícios\n\nVamos criar um repositório no GitHub com o nome “meu-primeiro-repositorio”. O repositório deve ser público, e escolha a opção para criar um arquivo README.md. Não é necessário adicionar um arquivo .gitignore ou uma licença.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introdução ao controle de versão com Git e GitHub</span>"
    ]
  },
  {
    "objectID": "git-github.html#interagindo-com-o-repositório-através-do-site-do-github",
    "href": "git-github.html#interagindo-com-o-repositório-através-do-site-do-github",
    "title": "6  Introdução ao controle de versão com Git e GitHub",
    "section": "6.6 Interagindo com o repositório através do site do GitHub",
    "text": "6.6 Interagindo com o repositório através do site do GitHub\nPodemos interagir com um repositório de várias formas: utilizando a linha de comando no nosso computador, utilizando alguma interface gráfica, ou através do site do GitHub. A forma mais simples de interagir com um repositório é através do site do GitHub, porém é importante saber que nem todas as funcionalidades estão disponíveis no site.\nAo clicar no botão Add file, podemos criar um novo arquivo (ou também outras pastas) (com a opção Create new file), e também podemos fazer o upload de um arquivo (com a opção Upload files).\n Para criar um novo arquivo, precisamos adicionar o nome do arquivo (o caminho completo: o diretório - caso seja necessário, o nome do arquivo, e a extensão), e o conteúdo do arquivo.\nPor exemplo, se queremos criar um arquivo chamado dados.R, e queremos que ele seja salvo na pasta scripts/, precisamos adicionar o caminho completo: scripts/dados.R (caso a pasta scripts/ ainda não exista, o GitHub irá criar).\nApós escrever o conteúdo, podemos escrever uma mensagem de commit e clicar no botão Commit new file para adicionar o arquivo ao repositório.\n\n\n\n\n\nPara fazer o upload de um arquivo, podemos arrastar o arquivo para a área demarcada (onde está escrito Drag files here to add them to your repository) ou clicar no botão Choose your files. Após selecionar os arquivos, podemos escrever uma mensagem de commit e clicar no botão Commit changes para enviar os arquivos para o repositório.\n\n\n\n\n\n\n\n\n\n\n\nO que é uma mensagem de commit?\n\n\n\nUma mensagem de commit é uma mensagem que descreve as alterações que foram feitas em um commit. A mensagem de commit é importante para que outras pessoas entendam o que foi feito em um commit, e para que possamos entender o histórico de alterações do repositório.\n\n\nTambém podemos fazer alterações nos arquivos existentes no repositório. Para isso, precisamos abrir o arquivo que queremos editar, e clicar no botão do lápis (Edit this file). Faça as modificações necessárias, escreva uma mensagem de commit e clique no botão Commit changes para salvar as alterações.\n\n\n\n\n\nTambém podemos consultar as alterações feitas no repositório através da opção xx Commits (sendo x o número de commits realizados no repositório). Clicando nessa opção, podemos ver o histórico de alterações do repositório, e clicar em um dos commits para ver as alterações feitas naquele commit.\n\n\n\nBotão para acessar o histórico de commits\n\n\n\n\n\nPágina com o histórico de commits\n\n\n\n\n\nPágina com informações de um commit específico\n\n\n\n6.6.1 Exercícios\n\nNo repositório criado anteriormente:\n\n\nEdite o arquivo README.md e adicione uma breve descrição sobre o repositório.\nCrie um arquivo chamado script.R, dentro de uma pasta chamada dados, com o seguinte conteúdo:\n\n\nwrite.csv(mtcars, \"dados/mtcars.csv\")\n\n\nExecute o código acima no seu RStudio e faça o upload do arquivo mtcars.csv para o repositório, dentro da pasta dados/. Como esse arquivo aparece no repositório?\nNa página inicial do repositório, clique em X Commits e veja o histórico de alterações do repositório. Clique em um dos commits para ver as alterações feitas naquele commit.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introdução ao controle de versão com Git e GitHub</span>"
    ]
  },
  {
    "objectID": "git-github.html#conectar-com-o-rstudio",
    "href": "git-github.html#conectar-com-o-rstudio",
    "title": "6  Introdução ao controle de versão com Git e GitHub",
    "section": "6.7 Conectar com o RStudio",
    "text": "6.7 Conectar com o RStudio\nAté agora, a nossa interação com o GitHub foi feita diretamente no site. Entretanto, podemos utilizar o Git e o GitHub diretamente no RStudio, o que facilita o trabalho com o controle de versão.\nPara isso, precisamos conectar o RStudio com o GitHub.\n\n6.7.1 Pacote {usethis}\nO pacote {usethis} oferece diversas funções que facilitam o trabalho de configuração do Git e do GitHub no RStudio. Portanto, precisamos verificar se o pacote {usethis} está instalado no R. Caso não esteja, podemos instalar com o comando install.packages(\"usethis\").\n\n# install.packages(\"usethis\")\nlibrary(usethis)\n\nO {usethis} tem uma função chamada git_sitrep() que nos ajuda a ter uma série de informações úteis para saber se o Git e GitHub estão conectados corretamente com o RStudio (situation report).\n\nusethis::git_sitrep()\n\n\n\n6.7.2 Falar para o Git qual é o nosso nome e email\nAntes de conectar o RStudio com o GitHub, precisamos nos apresentar ao Git. Para isso, precisamos configurar o Git com o nosso nome e e-mail (de preferência, utilize o mesmo email vinculado com a conta do GitHub). Podemos utilizar a função use_git_config() do pacote {usethis} para configurar o Git:\n\nusethis::use_git_config(\n  user.name = \"Seu Nome\",\n  user.email = \"seu_email@gmail.com\"\n)\n\nPara saber se o Git está configurado corretamente, podemos utilizar a função git_sitrep() do pacote {usethis}, e verificar no output se o nome e email estão configurados corretamente (em Git global).\n\nusethis::git_sitrep()\n\n# ── Git global (user) \n# • Name: \"....\"\n# • Email: \".....\"\n\n\n\n6.7.3 Criar um token de acesso pessoal (PAT)\nO próximo passo é criar um token de acesso pessoal (Personal Access Token - PAT) no GitHub. O PAT é uma forma segura de acessar o GitHub sem precisar digitar a senha toda vez que fizermos uma operação.\nPara criar um PAT, podemos utilizar a função create_github_token() do pacote {usethis}. Essa função irá abrir uma página no navegador para que possamos criar o PAT.\n\nusethis::create_github_token()\n\n# ☐ Call gitcreds::gitcreds_set() to register this token\n#   in the local Git credential store.\n# ℹ It is also a great idea to store this token in any\n#   password-management software that you use.\n# ✔ Opening URL\n#   &lt;https://github.com/settings/tokens/new?scopes=repo,user,gist,workflow&description=DESCRIBE\n#   THE TOKEN'S USE CASE&gt;.\n\n A página aberta no navegador é a página de criação de um novo token de acesso pessoal. Nessa página, precisamos adicionar um nome para o token, selecionar o tempo de expiração e as permissões que queremos dar para o token.\n\nSobre o nome do token: é importante adicionar um nome que descreva o uso do token. Como é possível utilizar o GitHub em diferentes computadores, eu costumo nomear o token com o nome do computador onde estou criando o token e a data de criação (por exemplo, Macbook - Janeiro/2025).\nSobre o tempo de expiração: podemos escolher entre um tempo de expiração de 30 dias, 90 dias, sem expiração ou personalizado. Eu costumo escolher a opção de 90 dias, para que eu não precise criar um novo token a cada mês. O GitHub não recomenda criar tokens sem expiração, por questões de segurança. Mas atenção: sempre que o seu token expirar, será necessário criar um novo token, e fazer o processo de atualizar o token no RStudio (que abordaremos a seguir).\nSobre os escopos selecionados: os escopos são as permissões que estamos dando para o token. O GitHub oferece uma série de escopos, e é importante selecionar apenas os escopos necessários para o uso do token. Recomendo manter apenas as opções pré-selecionadas pelo {usethis}: repo, user, gist e workflow.\n\nAo final da página, podemos clicar no botão Generate token para gerar o token. O GitHub irá gerar o token e exibir na tela. É importante copiar o token e salvar em um local seguro, pois não será possível acessar o token novamente.\n\n\n\n\n\n\n\n6.7.4 Salvar o token de acesso pessoal no RStudio\nPara salvar o token gerado, precisamos utilizar a função gitcreds::gitcreds_set() do pacote {usethis}. Essa função irá abrir uma janela no RStudio para que possamos colar o token gerado.\n\ngitcreds::gitcreds_set()\n\nSiga as instruções que aparecem no Console do R, e informe o token gerado quando solicitado.\nAtenção: após informar o token, reinicie a sessão do RStudio para que as alterações sejam aplicadas: no menu superior do RStudio, clique em Session -&gt; Restart R.\n\n\n6.7.5 Verificar se o RStudio está conectado ao GitHub\nPara verificar se o RStudio está conectado ao GitHub, podemos utilizar novamente a função git_sitrep() do pacote {usethis}. No output, é importante que a opção Personal access token for ... esteja como &lt;discovered&gt;:\n\nusethis::git_sitrep()\n\n# ── GitHub user \n# Personal access token for \"https://github.com\": &lt;discovered&gt;\n\n\n\n6.7.6 Exercícios\n\nNa explicação anterior, apresentamos como fazer a conexão do Git e do GitHub com RStudio. Execute os passos apresentados e verifique se o RStudio está conectado ao GitHub. Caso dê algum erro e precise de ajuda, solicite no chat com o resultado da função git_sitrep().",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introdução ao controle de versão com Git e GitHub</span>"
    ]
  },
  {
    "objectID": "git-github.html#utilizando-o-git-e-github-no-rstudio",
    "href": "git-github.html#utilizando-o-git-e-github-no-rstudio",
    "title": "6  Introdução ao controle de versão com Git e GitHub",
    "section": "6.8 Utilizando o Git e GitHub no RStudio",
    "text": "6.8 Utilizando o Git e GitHub no RStudio\nO RStudio possui uma interface gráfica para o Git, que facilita o trabalho com o controle de versão: o painel Git (ou Git Pane. Porém, este painel apenas aparece quando estamos em um projeto que está versionado com Git (ou seja, é um repositório do Git).\n\n\n\n\n\nA seguir, vamos explorar como: 1) como fazer uma cópia de um repositório que está no GitHub para o RStudio, e 2) criar um novo repositório do Git a partir de um projeto existente no RStudio.\n\n6.8.1 Fazer uma cópia de um repositório no GitHub para o computador (clone) com o RStudio\nPara fazer uma cópia de um repositório que existe no GitHub para o computador, precisamos “clonar” o repositório.\nPrimeiramente, precisamos copiar a URL do repositório que queremos clonar. A URL do repositório é composto por https://github.com/SEU-NOME-DE-USUARIO/NOME-DO-REPOSITORIO.\nPor exemplo, a URL do repositório do material curso é https://github.com/ipeadata-lab/curso_r_intermediario_202501, pois o nome de usuário (no caso, a organização) é ipeadata-lab e o nome do repositório é curso_r_intermediario_202501.\nCom a URL do repositório copiada, no RStudo precisamos selecionar a opção “New Project” no menu superior, e depois selecionar a opção “Version Control” e “Git”:\n\n\n\n\n\n\n\n\n\n\nNa próxima tela, precisamos colar a URL do repositório que queremos clonar no campo Repository URL, e escolher o diretório onde queremos salvar o repositório no campo Create project as subdirectory of. O campo Project directory name é preenchido automaticamente com o nome do repositório. Após preencher as informações, clicamos no botão “Create Project”:\n\n\n\n\n\nO RStudio irá fazer o clone do repositório, e abrirá um projeto para ele (caso não exista um ainda, será criado).\n\n\n6.8.2 Exercícios\n\nFaça os passos descritos anteriormente com o repositório “meu-primeiro-repositorio” (criado anteriormente), para fazer o clone do GitHub para o RStudio.\nVerifique se o painel Git aparece no RStudio.\n\n\n\n6.8.3 Fluxo de trabalho com Git e GitHub no RStudio\nComo citado anteriormente, o RStudio possui uma interface gráfica para o Git (o painel Git), que facilita o trabalho com o controle de versão.\nPrimeiro, vamos revisar alguns conceitos. Quando criamos um projeto no RStudio, o RStudio cria uma pasta para o projeto, (diretório). Na imagem abaixo, essa etapa é representada pela pasta amarela.\nQuando iniciamos a versionar o projeto com o Git (um passo chamado git init), chamamos de “Repositório” a pasta do projeto que está sendo versionada. O repositório local é a pasta do projeto no computador, e o repositório remoto é a cópia do repositório que está no GitHub:\n\n\n\n\n\n\n\nImagem por Marília Fava\n\n\nAs alterações entre o repositório local e o repositório remoto não são enviadas automaticamente, então é importante entender o fluxo de trabalho com o Git e GitHub. O fluxo de trabalho básico é:\n\nIniciamos o repositório (git init) ou clonamos um repositório existente (git clone).\nFazemos alterações nos arquivos do repositório.\nSelecionamos as alterações que queremos adicionar em um commit (adicionamos as alterações ao stage - git add).\nConfirmamos as alterações (git commit).\nEnviamos as alterações para o repositório remoto (git push).\nAtualizamos o repositório local com as alterações do repositório remoto (git pull).\n\n\n\n\n\n\n\n\nImagem por Curso-R\n\n\nNas imagens abaixo, é possível ver como o painel Git do RStudio facilita o trabalho com o controle de versão, pois apresenta botões para os comandos descritos acima:\n\n\n\n\n\n\n\n\n\n\n\n\n6.8.4 Exercícios\n\nNo repositório “meu-primeiro-repositorio” (clonado anteriormente no RStudio), faça as seguintes alterações:\n\n\nFaça uma alteração no arquivo README.md (ex. adicione uma nova linha com a data de hoje).\nObserve o painel Git: a alteração feita no arquivo README.md aparece no painel Git? Se sim, adicione a alteração ao stage e faça um commit.\nVeja o seu repositório no GitHub: a alteração feita no arquivo README.md aparece no repositório? O esperado é que não, pois ainda não enviamos as alterações para o repositório remoto.\nClique no botão push para enviar as alterações para o repositório remoto.\nObserve novamente o seu repositório no GitHub: as alterações feitas no RStudio aparecem no repositório?\n\n\nNa interface do GitHub, abra o repositório “meu-primeiro-repositorio” e:\n\n\nfaça outra alteração no arquivo README.md.\nApós fazer a alteração, volte para o RStudio e veja se a alteração feita no GitHub aparece no RStudio. O esperado é que não, pois ainda não atualizamos o repositório local com as alterações do repositório remoto.\nNo RStudio, clique no botão pull para atualizar o repositório local com as alterações do repositório remoto.\nObserve novamente o arquivo README.md no RStudio: a alteração feita no GitHub aparece no RStudio?\n\n\n\n6.8.5 Criar um novo repositório no GitHub a partir do R\nPodemos criar um novo repositório no GitHub a partir de um projeto existente no RStudio.\nPara isso, precisamos seguir os seguintes passos:\n\nInicializar o repositório local com o Git (caso ainda não tenha sido feito). Para isso, podemos utilizar a função use_git() do pacote {usethis}. Atenção: essa função apresenta algumas mensagens e opções no console, então é importante ler as mensagens e responder conforme necessário.\n\n\nusethis::use_git()\n\nO RStudio solicitará que você o reinicie para que o painel Git apareça.\n\nUtilize a função usethis::use_github() para criar um novo repositório no GitHub a partir do projeto no RStudio. Essa função irá abrir uma janela no navegador quando o repositório for criado. Atenção: essa função apresenta algumas mensagens e opções no console, então é importante ler as mensagens e responder conforme necessário.\n\n\nusethis::use_github()\n\n\n\n6.8.6 Exercícios\n\nAbra o projeto que estamos utilizando ao longo do curso (criado na aula 1), e:\n\n\nInicialize o repositório local com o Git: usethis::use_git().\nCrie um novo repositório no GitHub a partir do projeto no RStudio: usethis::use_github().\nCrie um arquivo README.md na pasta raíz do projeto, e adicione um breve conteúdo. Faça o commit desta alteração, e faça o push. Verifique se o arquivo README.md aparece no repositório no GitHub.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introdução ao controle de versão com Git e GitHub</span>"
    ]
  },
  {
    "objectID": "git-github.html#glossário",
    "href": "git-github.html#glossário",
    "title": "6  Introdução ao controle de versão com Git e GitHub",
    "section": "6.9 Glossário",
    "text": "6.9 Glossário\n\n\n\n\n\n\nGit\n\n\n\n“O Git é um programa de código aberto para acompanhamento de alterações em arquivos de texto. Ele foi escrito pelo autor do sistema operacional Linux e é a principal tecnologia na qual o GitHub, a interface social e do usuário, se baseia.”\nFonte: Glossário do GitHub\n\n\n\n\n\n\n\n\nGitHub\n\n\n\n“Uma plataforma baseada em nuvem construída em torno do Git que permite salvar versões do seu projeto online e colaborar com outras pessoas usuárias do Git.”\nFonte: Glossário da Carpentries\n\n\n\n\n\n\n\n\nRepositório\n\n\n\n“Um repositório é o elemento mais básico do GitHub. É mais fácil imaginá-lo como uma pasta de projetos. Um repositório contém todos os arquivos de projeto (incluindo a documentação) e armazena o histórico de revisão de cada arquivo. Os repositórios podem ter vários colaboradores e podem ser públicos ou privados.”\nFonte: Glossário do GitHub\n\n\n\n\n\n\n\n\nArquivo README\n\n\n\n“Um arquivo de texto que contém informações sobre os arquivos de um repositório que, normalmente, é o primeiro arquivo que um visitante do repositório verá. Um arquivo README, acompanhado de uma licença de repositório, diretrizes de contribuição e um código de conduta, ajuda você a compartilhar as expectativas e gerenciar as contribuições do seu projeto.”\nFonte: Glossário do GitHub\n\n\n\n\n\n\n\n\nCommit\n\n\n\n“Commit, ou”revisão”, é uma alteração individual em um arquivo (ou conjunto de arquivos). Quando você faz um commit para salvar seu trabalho, o Git cria uma ID exclusiva (também conhecida como o “SHA” ou “hash”) que permite que você mantenha o registro das alterações específicas confirmadas com quem as fez e quando. Os commits normalmente contêm uma mensagem do commit, que é uma breve descrição de quais alterações foram feitas.”\nFonte: Glossário do GitHub\n\n\n\n\n\n\n\n\nMensagem de Commit\n\n\n\n“Texto breve e descritivo que acompanha um commit e comunica a alteração que o commit apresenta.”\nFonte: Glossário do GitHub\n\n\n\n\n\n\n\n\nPull\n\n\n\n“Pull refere-se a quando você busca alterações e as mescla. Por exemplo, se alguém editou o arquivo remoto no qual vocês dois estão trabalhando, o ideal é fazer pull dessas alterações na cópia local para que ele fique atualizado. Confira também fetch.”\nFonte: Glossário do GitHub\n\n\n\n\n\n\n\n\nPush\n\n\n\n“Enviar por push significa enviar as alterações confirmadas para um repositório remoto no GitHub.com. Por exemplo, se você alterar algo localmente, poderá enviar por push essas alterações para que outras pessoas possam acessá-las.”\nFonte: Glossário do GitHub",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introdução ao controle de versão com Git e GitHub</span>"
    ]
  },
  {
    "objectID": "git-github.html#materiais",
    "href": "git-github.html#materiais",
    "title": "6  Introdução ao controle de versão com Git e GitHub",
    "section": "6.10 Materiais",
    "text": "6.10 Materiais\nO material do workshop “Introducción a GitHub para Investigador(a|e)s”, ministrado por Beatriz Milz e Yanina Belllini Saibene, foi utilizado como base para a elaboração de parte do material desta aula.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introdução ao controle de versão com Git e GitHub</span>"
    ]
  },
  {
    "objectID": "texto-data.html",
    "href": "texto-data.html",
    "title": "7  Manipulação de datas e textos",
    "section": "",
    "text": "7.1 Dados\nNo curso Introdução à análise de dados com R exploramos algumas funções de transformação de dados. Nesta aula, vamos explorar funções específicas para manipulação de datas e textos.\nCaso você tenha dúvidas sobre o tema, recomendamos revisar as seguintes aulas:\nAntes de iniciar o conteúdo, vamos baixar a base de dados que utilizaremos nesta aula. A base de dados voos_dez-2024-alterado.csv apresenta informações sobre voos realizados em dezembro de 2024 realizados no Brasil. Esses dados foram obtidos com o pacote {flightsbr}, e foram alterados para fins didáticos.\ndownload.file(\n1  url = \"https://github.com/ipeadata-lab/curso_r_intermediario_202501/raw/refs/heads/main/dados/voos_dez-2024-alterado.csv\",\n2  destfile = \"dados/voos_dez-2024-alterado.csv\",\n  mode = \"wb\")\n\n\n1\n\nURL do arquivo a ser baixado.\n\n2\n\nCaminho onde o arquivo que será salvo.\nVamos carregar o pacote {tidyverse}:\nlibrary(tidyverse)\nVamos importar a base de dados voos_dez-2024-alterado.csv e ver o resultado da função glimpse():\nvoos &lt;- read_csv2(\"dados/voos_dez-2024-alterado.csv\") \nglimpse(voos)\n\nRows: 82,003\nColumns: 26\n$ id_basica             &lt;dbl&gt; 33821878, 33972533, 33819746, 33819747, 33914237…\n$ id_empresa            &lt;dbl&gt; 1002650, 1001070, 1007570, 1007570, 1000896, 100…\n$ nm_empresa            &lt;chr&gt; \"DHL AERO EXPRESO\", \"AEROVÍAS DE MÉXICO S.A DE C…\n$ dt_referencia         &lt;date&gt; 2024-12-01, 2024-12-01, 2024-12-01, 2024-12-01,…\n$ ds_di                 &lt;chr&gt; \"INCLUSÃO DE ETAPA EM UM VOO PREVISTO EM HOTRAN\"…\n$ ds_grupo_di           &lt;chr&gt; \"REGULAR\", \"REGULAR\", \"REGULAR\", \"REGULAR\", \"REG…\n$ ds_natureza_etapa     &lt;chr&gt; \"INTERNACIONAL\", \"INTERNACIONAL\", \"INTERNACIONAL…\n$ hr_partida_real       &lt;time&gt; 13:35:00, 10:15:00, 05:34:00, 19:45:00, 20:24:0…\n$ dt_partida_real       &lt;chr&gt; \"01/12/2024\", \"01/12/2024\", \"01/12/2024\", \"30/11…\n$ id_aerodromo_origem   &lt;dbl&gt; 467, 301, 301, 609, 66, 66, 301, 500, 301, 301, …\n$ nm_aerodromo_origem   &lt;chr&gt; \"MIAMI INTERNATIONAL AIRPORT\", \"GUARULHOS - GOVE…\n$ nm_municipio_origem   &lt;chr&gt; \"MIAMI, FLORIDA\", \"GUARULHOS\", \"GUARULHOS\", \"PUN…\n$ sg_uf_origem          &lt;chr&gt; NA, \"SP\", \"SP\", NA, NA, NA, \"SP\", NA, \"SP\", \"SP\"…\n$ nm_regiao_origem      &lt;chr&gt; NA, \"SUDESTE\", \"SUDESTE\", NA, NA, NA, \"SUDESTE\",…\n$ nm_pais_origem        &lt;chr&gt; \"ESTADOS UNIDOS DA AMÉRICA\", \"BRASIL\", \"BRASIL\",…\n$ nm_continente_origem  &lt;chr&gt; \"AMÉRICA DO NORTE\", \"AMÉRICA DO SUL\", \"AMÉRICA D…\n$ hr_chegada_real       &lt;time&gt; 22:46:00, 19:01:00, 11:42:00, 03:28:00, 05:42:0…\n$ dt_chegada_real       &lt;dbl&gt; 45627, 45627, 45627, 45627, 45628, 45627, 45628,…\n$ id_aerodromo_destino  &lt;dbl&gt; 162, 466, 609, 301, 301, 301, 500, 301, 66, 66, …\n$ nm_aerodromo_destino  &lt;chr&gt; \"VIRACOPOS\", \"BENITO JUAREZ INTL\", \"PUNTA CANA\",…\n$ nm_municipio_destino  &lt;chr&gt; \"CAMPINAS\", \"MEXICO\", \"PUNTA CANA\", \"GUARULHOS\",…\n$ sg_uf_destino         &lt;chr&gt; \"SP\", NA, NA, \"SP\", \"SP\", \"SP\", NA, \"SP\", NA, NA…\n$ nm_regiao_destino     &lt;chr&gt; \"SUDESTE\", NA, NA, \"SUDESTE\", \"SUDESTE\", \"SUDEST…\n$ nm_pais_destino       &lt;chr&gt; \"BRASIL\", \"MÉXICO\", \"REPÚBLICA DOMINICANA\", \"BRA…\n$ nm_continente_destino &lt;chr&gt; \"AMÉRICA DO SUL\", \"AMÉRICA DO NORTE\", \"AMÉRICA C…\n$ dt_sistema            &lt;dttm&gt; 2025-01-04 01:00:02, 2025-01-10 01:00:09, 2025-…",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Manipulação de datas e textos</span>"
    ]
  },
  {
    "objectID": "texto-data.html#manipulação-de-datas",
    "href": "texto-data.html#manipulação-de-datas",
    "title": "7  Manipulação de datas e textos",
    "section": "7.2 Manipulação de datas",
    "text": "7.2 Manipulação de datas\n\n7.2.1 Tipo Date\nQuando escrevemos datas em português, é comum utilizarmos o formato dia/mês/ano (por exemplo: 20/01/2025). Ao criar uma variável com esta no R, teremos um objeto do tipo character (texto):\n\nclass(\"20/01/2025\")\n\n[1] \"character\"\n\n\nPorém no R existe um tipo específico para datas, o Date. O tipo Date é útil em vários contextos: permite realizar operações específicas para datas, como calcular a diferença entre duas datas, extrair o dia da semana, alterar a formatação de datas em gráficos, entre outros.\nPara que o R reconheça um objeto com o tipo Date, precisamos salvar as datas no formato ano-mês-dia (por exemplo: 2025-01-20), e utilizar a função as.Date() para transformar a variável do tipo character em Date.\nExemplo:\n\ndata_inicio_curso &lt;- as.Date(\"2025-01-20\")\ndata_inicio_curso\n\n[1] \"2025-01-20\"\n\nclass(data_inicio_curso)\n\n[1] \"Date\"\n\n\nPorém, tome cuidado! Se você tentar transformar uma data no formato dia/mês/ano diretamente para Date, o R não irá reconhecer a data corretamente (e também não irá retornar um erro):\n\nas.Date(\"20/01/2025\")\n\n[1] \"20-01-20\"\n\n\nA função Sys.Date() retorna a data atual do sistema, com o tipo Date:\n\nSys.Date()\n\n[1] \"2025-02-09\"\n\nclass(Sys.Date())\n\n[1] \"Date\"\n\n\n\n\n\n\n\n\nCuriosidade: o que é armazenado em uma variável do tipo Date?\n\n\n\n\n\nO tipo Date armazena o quantidade de dias desde 1 de janeiro de 1970. Podemos verificar isso utilizando a função as.numeric() para obter o número armazenado em uma variável do tipo Date. Por exemplo, a data 1 de janeiro de 1970:\n\ndata_1970 &lt;- as.Date(\"1970-01-01\")\ndata_1970\n\n[1] \"1970-01-01\"\n\nas.numeric(data_1970)\n\n[1] 0\n\n\nUm número negativo indica uma data anterior a 1 de janeiro de 1970, e um número positivo indica uma data posterior a essa data. Por exemplo, considerando a data de nascimento de Julia Lopes de Almeida (24 de setembro de 1862):\n\nnascimento_julia_lopes &lt;- as.Date(\"1862-09-24\")\n\nas.numeric(nascimento_julia_lopes)\n\n[1] -39180\n\n\n\n\n\n\n7.2.1.1 Exercício\n\nCrie uma variável chamada data_nascimento com sua data de nascimento e transforme-a para o tipo Date.\nCrie uma variável chamada data_atual com a data atual do sistema.\nCalcule a diferença entre a data atual e a sua data de nascimento. O que é retornado?\n\n\nUtilize a função Sys.time() e guarde o resultado em uma variável.\n\nO que essa função retorna?\nQual é o tipo da variável?\n\n\n\n\n\n7.2.2 Tipo POSIXct e POSIXt\nO tipo POSIXct é uma extensão do tipo Date, que inclui informações de data, hora e fuso horário (em UTC: Coordinated Universal Time). O formato padrão para datas e horas é ano-mês-dia hora:minuto:segundo fuso_horario (por exemplo: 2025-01-20 15:30:00 -03).\n\nSys.time()\n\n[1] \"2025-02-09 19:24:25 UTC\"\n\nclass(Sys.time())\n\n[1] \"POSIXct\" \"POSIXt\" \n\n\nEsse tipo armazena o número de segundos desde 1 de janeiro de 1970, no fuso horário UTC +0 (que é igual ao GMT).\nNesta aula, vamos focar no tipo Date, mas é importante saber que o R possui funções específicas para manipulação de datas e horas (caso você precise trabalhar com isso).\n\n7.2.2.1 Exercício\n\nUtilizando a base de dados voos (importada no início da aula), explore:\n\nQuais são as colunas que armazenam alguma data?\nQual é o tipo de cada uma dessas colunas?\nQuais dessas precisariam ser transformadas para o tipo Date? Como você faria isso?\n\n\n\n\n\n7.2.3 Tipo Date e bases de dados\nAté agora, exploramos como criar variáveis do tipo Date a partir de valores que digitamos diretamente no código. Porém, em muitos casos, as datas estão armazenadas em bases de dados.\nA rotina mais comum é importar a base de dados, e caso a variável de data esteja no formato character (texto), utilizamos alguma função para transformá-la em Date.\nVamos explorar trabalhar com as datas da base de dados voos. As colunas que armazenam datas iniciam com o prefixo dt_. Vamos selecionar essas colunas e observar as primeiras linhas:\n\nvoos_datas &lt;- voos |&gt; \n1  select(starts_with(\"dt_\"))\n\nvoos_datas |&gt; \n2  head()\n\n\n1\n\nSelecionamos apenas as colunas que iniciam com o prefixo dt_.\n\n2\n\nExibimos as primeiras linhas da tabela.\n\n\n\n\n# A tibble: 6 × 4\n  dt_referencia dt_partida_real dt_chegada_real dt_sistema         \n  &lt;date&gt;        &lt;chr&gt;                     &lt;dbl&gt; &lt;dttm&gt;             \n1 2024-12-01    01/12/2024                45627 2025-01-04 01:00:02\n2 2024-12-01    01/12/2024                45627 2025-01-10 01:00:09\n3 2024-12-01    01/12/2024                45627 2025-01-02 01:00:59\n4 2024-12-01    30/11/2024                45627 2025-01-02 01:00:59\n5 2024-12-01    01/12/2024                45628 2025-01-09 01:00:08\n6 2024-12-01    01/12/2024                45627 2025-01-09 01:00:08\n\n\n\nExercício: identifique as colunas que armazenam datas na base de dados voos.\n\nCom o resultado, vamos observar quais colunas são datas e quais não são:\n\ndt_referencia: O readr identificou que a coluna é uma data e já importou como &lt;date&gt;.\ndt_partida_prevista: está como tipo &lt;character&gt;. O formato é dia/mês/ano. Precisamos transformar para &lt;date&gt;.\ndt_chegada_real: está como &lt;double&gt;, em um formato numérico. Precisamos transformar para &lt;date&gt;.\ndt_sistema: está como &lt;dttm&gt;, ou seja, do tipo POSIXct. Vamos manter como está.\n\n\n7.2.3.1 Transformando variáveis de texto em datas\nComo vimos anteriormente, existem funções para transformar variáveis de texto em datas. Vamos transformar a coluna dt_partida_real para o tipo Date.\nSe a gente tentar transformar a coluna dt_partida_real diretamente para Date, o R não irá reconhecer a data corretamente (e também não irá retornar um erro):\n\nvoos_datas |&gt; \n  select(dt_partida_real) |&gt; \n  mutate(\n    dt_partida_real_date = as.Date(dt_partida_real)\n  )\n\n# A tibble: 82,003 × 2\n   dt_partida_real dt_partida_real_date\n   &lt;chr&gt;           &lt;date&gt;              \n 1 01/12/2024      1-12-20             \n 2 01/12/2024      1-12-20             \n 3 01/12/2024      1-12-20             \n 4 30/11/2024      30-11-20            \n 5 01/12/2024      1-12-20             \n 6 01/12/2024      1-12-20             \n 7 01/12/2024      1-12-20             \n 8 01/12/2024      1-12-20             \n 9 01/12/2024      1-12-20             \n10 01/12/2024      1-12-20             \n# ℹ 81,993 more rows\n\n\nEntão é importante lembrar que o R espera que a data esteja no formato ano-mês-dia para transformar em Date. Para isso, vamos utilizar a função as.Date() e especificar o formato da data, usando o argumento format:\n\nvoos_datas |&gt; \n  select(dt_partida_real) |&gt; \n  mutate(\n    dt_partida_real_date = as.Date(dt_partida_real, format = \"%d/%m/%Y\")\n  )\n\n# A tibble: 82,003 × 2\n   dt_partida_real dt_partida_real_date\n   &lt;chr&gt;           &lt;date&gt;              \n 1 01/12/2024      2024-12-01          \n 2 01/12/2024      2024-12-01          \n 3 01/12/2024      2024-12-01          \n 4 30/11/2024      2024-11-30          \n 5 01/12/2024      2024-12-01          \n 6 01/12/2024      2024-12-01          \n 7 01/12/2024      2024-12-01          \n 8 01/12/2024      2024-12-01          \n 9 01/12/2024      2024-12-01          \n10 01/12/2024      2024-12-01          \n# ℹ 81,993 more rows\n\n\nNo argumento format, precisamos apresentar como a data está formatada. Ou seja: em \"%d/%m/%Y\", %d representa o dia, %m representa o mês e %Y representa o ano.\nExiste uma função do pacote lubridate que facilita a conversão de datas: a função dmy() (que significa “dia-mês-ano”) e similares, mas vamos apresentá-las mais adiante.\n\n\n\n\n\n\nExtra: função readr::parse_date()\n\n\n\n\n\nA função readr::parse_date() tem o mesmo propósito, porém ela apresenta alguns argumentos extras (como o locale). A documentação dessa função é muito útil para entender como formatar datas.\n\nvoos_datas |&gt; \n  select(dt_partida_real) |&gt; \n  mutate(\n    dt_partida_real_date = parse_date(dt_partida_real, format = \"%d/%m/%Y\")\n  )\n\n# A tibble: 82,003 × 2\n   dt_partida_real dt_partida_real_date\n   &lt;chr&gt;           &lt;date&gt;              \n 1 01/12/2024      2024-12-01          \n 2 01/12/2024      2024-12-01          \n 3 01/12/2024      2024-12-01          \n 4 30/11/2024      2024-11-30          \n 5 01/12/2024      2024-12-01          \n 6 01/12/2024      2024-12-01          \n 7 01/12/2024      2024-12-01          \n 8 01/12/2024      2024-12-01          \n 9 01/12/2024      2024-12-01          \n10 01/12/2024      2024-12-01          \n# ℹ 81,993 more rows\n\n\nExemplo de um uso onde o locale é necessário: quando a data está escrita por extenso, em um idioma diferente do inglês:\n\n# Com as.Date(), fev não é reconhecido, pois em inglês é feb\nas.Date(\"03/fev/2025\", format = \"%d/%b/%Y\")\n\n[1] NA\n\n# Com o parse_date(), podemos informar o locale:\nreadr::parse_date(\"03/fev/2025\",\n                  format = \"%d/%b/%Y\",\n                  locale = locale(\"pt\"))\n\n[1] \"2025-02-03\"\n\n\n\n\n\n\n\n7.2.3.2 Transformando datas do Excel para Date\nA coluna dt_chegada_real foi importada como número (Double).\nSerá que conseguimos transformar essa coluna para Date apenas usando a função as.Date()?\n\nvoos_datas |&gt; \n  select(dt_chegada_real) |&gt; \n  mutate(\n    dt_chegada_real_date = as.Date(dt_chegada_real)\n  )\n\n# A tibble: 82,003 × 2\n   dt_chegada_real dt_chegada_real_date\n             &lt;dbl&gt; &lt;date&gt;              \n 1           45627 2094-12-03          \n 2           45627 2094-12-03          \n 3           45627 2094-12-03          \n 4           45627 2094-12-03          \n 5           45628 2094-12-04          \n 6           45627 2094-12-03          \n 7           45628 2094-12-04          \n 8           45627 2094-12-03          \n 9           45628 2094-12-04          \n10           45627 2094-12-03          \n# ℹ 81,993 more rows\n\n\nAs datas convertidas estão no futuro (o que não faz sentido, já que os voos ocorreram em dezembro de 2024). O que aconteceu?\nEssa coluna está salva em um padrão comum de dados do Excel: o número de dias desde 01/01/1900. Para transformar essa coluna em Date, precisamos informar ao R que a data de referência é 30/12/1899 (um dia antes de 01/01/1900), utilizando o argumento origin:\n\nvoos_datas |&gt; \n  select(dt_chegada_real) |&gt; \n  mutate(\n    dt_chegada_real_date = as.Date(dt_chegada_real, origin = \"1899-12-30\")\n  )\n\n# A tibble: 82,003 × 2\n   dt_chegada_real dt_chegada_real_date\n             &lt;dbl&gt; &lt;date&gt;              \n 1           45627 2024-12-01          \n 2           45627 2024-12-01          \n 3           45627 2024-12-01          \n 4           45627 2024-12-01          \n 5           45628 2024-12-02          \n 6           45627 2024-12-01          \n 7           45628 2024-12-02          \n 8           45627 2024-12-01          \n 9           45628 2024-12-02          \n10           45627 2024-12-01          \n# ℹ 81,993 more rows\n\n\nNão é muito prático ter que lembrar a data de referência para transformar datas do Excel em Date. Por isso, o janitor possui a função excel_numeric_to_date() que faz essa conversão automaticamente:\n\nvoos_datas |&gt; \n  select(dt_chegada_real) |&gt; \n  mutate(\n    dt_chegada_real_date = janitor::excel_numeric_to_date(dt_chegada_real)\n  )\n\n# A tibble: 82,003 × 2\n   dt_chegada_real dt_chegada_real_date\n             &lt;dbl&gt; &lt;date&gt;              \n 1           45627 2024-12-01          \n 2           45627 2024-12-01          \n 3           45627 2024-12-01          \n 4           45627 2024-12-01          \n 5           45628 2024-12-02          \n 6           45627 2024-12-01          \n 7           45628 2024-12-02          \n 8           45627 2024-12-01          \n 9           45628 2024-12-02          \n10           45627 2024-12-01          \n# ℹ 81,993 more rows\n\n\n\n\n7.2.3.3 Exercícios\n\nObserve os valores abaixo, e identifique em qual formato de data estão. Como você transformaria esses valores para o tipo Date?\n\n\"2025-02-03\"\n\"03/02/2025\"\n20122\n45691\n\n\n\n\n\n7.2.4 Pacote lubridate\n\nO pacote lubridate faz parte do pacote {tidyverse} do R, e tem funções que facilitam a manipulação de datas. Ele possui funções específicas para extrair informações de datas, como dia, mês, ano, semana, entre outras.\n\nlibrary(lubridate)\n\n\n7.2.4.1 Funções de parse\nComo citado anteriormente, quando queremos transformar uma data no formato dia/mês/ano para Date, podemos utilizar a função dmy() (que significa “dia-mês-ano”):\n\nvoos_datas |&gt; \n  select(dt_partida_real) |&gt; \n  mutate(\n    dt_partida_real_date = dmy(dt_partida_real)\n  )\n\n# A tibble: 82,003 × 2\n   dt_partida_real dt_partida_real_date\n   &lt;chr&gt;           &lt;date&gt;              \n 1 01/12/2024      2024-12-01          \n 2 01/12/2024      2024-12-01          \n 3 01/12/2024      2024-12-01          \n 4 30/11/2024      2024-11-30          \n 5 01/12/2024      2024-12-01          \n 6 01/12/2024      2024-12-01          \n 7 01/12/2024      2024-12-01          \n 8 01/12/2024      2024-12-01          \n 9 01/12/2024      2024-12-01          \n10 01/12/2024      2024-12-01          \n# ℹ 81,993 more rows\n\n\nO lubridate também possui funções para transformar datas que estejam em outros formatos. O importante é lembrar que y representa o ano, m representa o mês e d representa o dia, e assim podemos combinar essas letras para formar o nome da função que precisamos usar para transformar a data. Se quiser saber mais sobre esse grupo de funções, acesse a documentação oficial.\n\n\n7.2.4.2 Extrair informações de datas\nO lubridate possui funções para extrair informações de datas. No exemplo abaixo, vamos extrair o dia, mês e ano da coluna dt_referencia:\n\nvoos_datas |&gt; \n  select(dt_referencia) |&gt; \n  mutate(\n    dia = day(dt_referencia),\n    mes = month(dt_referencia),\n    ano = year(dt_referencia)\n  )\n\n# A tibble: 82,003 × 4\n   dt_referencia   dia   mes   ano\n   &lt;date&gt;        &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 2024-12-01        1    12  2024\n 2 2024-12-01        1    12  2024\n 3 2024-12-01        1    12  2024\n 4 2024-12-01        1    12  2024\n 5 2024-12-01        1    12  2024\n 6 2024-12-01        1    12  2024\n 7 2024-12-01        1    12  2024\n 8 2024-12-01        1    12  2024\n 9 2024-12-01        1    12  2024\n10 2024-12-01        1    12  2024\n# ℹ 81,993 more rows\n\n\nAlgumas funções tem argumentos que permitem personalizar a saída. Por exemplo, a função month() tem o argumento label que permite retornar o mês por extenso (em vez de numérico), o argumento abbr que permite retornar o mês abreviado, e o argumento locale que permite retornar o mês em outro idioma:\n\nvoos_datas |&gt;\n  select(dt_referencia) |&gt;\n  mutate(\n    mes_curto = month(dt_referencia, label = TRUE),\n    \n    mes = month(dt_referencia, label = TRUE, abbr = FALSE),\n    \n    mes_pt = month(\n      dt_referencia,\n      label = TRUE,\n      abbr = FALSE,\n      locale = \"pt_BR\"\n    )\n  )\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `mes_pt = month(dt_referencia, label = TRUE, abbr = FALSE,\n  locale = \"pt_BR\")`.\nCaused by warning in `Sys.setlocale()`:\n! OS reports request to set locale to \"pt_BR\" cannot be honored\n\n\n# A tibble: 82,003 × 4\n   dt_referencia mes_curto mes      mes_pt  \n   &lt;date&gt;        &lt;ord&gt;     &lt;ord&gt;    &lt;ord&gt;   \n 1 2024-12-01    Dec       December December\n 2 2024-12-01    Dec       December December\n 3 2024-12-01    Dec       December December\n 4 2024-12-01    Dec       December December\n 5 2024-12-01    Dec       December December\n 6 2024-12-01    Dec       December December\n 7 2024-12-01    Dec       December December\n 8 2024-12-01    Dec       December December\n 9 2024-12-01    Dec       December December\n10 2024-12-01    Dec       December December\n# ℹ 81,993 more rows\n\n\n\n\n\n\n\n\nExtra: extrair o dia da semana de datas\n\n\n\n\n\nA função wday() retorna o dia da semana, e também possui argumentos para personalizar a saída:\n\nvoos_datas |&gt;\n  select(dt_referencia) |&gt;\n  mutate(\n    dia_semana_numero = wday(dt_referencia),\n    \n    dia_semana = wday(dt_referencia, label = TRUE),\n    \n    dia_semana_abbr = wday(dt_referencia, label = TRUE, abbr = FALSE),\n    \n    dia_semana_pt = wday(\n      dt_referencia,\n      label = TRUE,\n      abbr = FALSE,\n      locale = \"pt_BR\"\n    )\n  )\n\n# A tibble: 82,003 × 5\n   dt_referencia dia_semana_numero dia_semana dia_semana_abbr dia_semana_pt\n   &lt;date&gt;                    &lt;dbl&gt; &lt;ord&gt;      &lt;ord&gt;           &lt;ord&gt;        \n 1 2024-12-01                    1 Sun        Sunday          Sunday       \n 2 2024-12-01                    1 Sun        Sunday          Sunday       \n 3 2024-12-01                    1 Sun        Sunday          Sunday       \n 4 2024-12-01                    1 Sun        Sunday          Sunday       \n 5 2024-12-01                    1 Sun        Sunday          Sunday       \n 6 2024-12-01                    1 Sun        Sunday          Sunday       \n 7 2024-12-01                    1 Sun        Sunday          Sunday       \n 8 2024-12-01                    1 Sun        Sunday          Sunday       \n 9 2024-12-01                    1 Sun        Sunday          Sunday       \n10 2024-12-01                    1 Sun        Sunday          Sunday       \n# ℹ 81,993 more rows\n\n\n\n\n\n\n\n7.2.4.3 Arredondando datas\nO lubridate também possui funções para arredondar datas. Por exemplo, a função floor_date() arredonda a data para o início de um intervalo de tempo (por exemplo, o início do mês):\n\nvoos_datas |&gt; \n  select(dt_referencia) |&gt; \n  mutate(\n    mes_arredondado = floor_date(dt_referencia, unit = \"month\"),\n  )\n\n# A tibble: 82,003 × 2\n   dt_referencia mes_arredondado\n   &lt;date&gt;        &lt;date&gt;         \n 1 2024-12-01    2024-12-01     \n 2 2024-12-01    2024-12-01     \n 3 2024-12-01    2024-12-01     \n 4 2024-12-01    2024-12-01     \n 5 2024-12-01    2024-12-01     \n 6 2024-12-01    2024-12-01     \n 7 2024-12-01    2024-12-01     \n 8 2024-12-01    2024-12-01     \n 9 2024-12-01    2024-12-01     \n10 2024-12-01    2024-12-01     \n# ℹ 81,993 more rows\n\n\n\n\n7.2.4.4 Exercícios\n\nUtilizando a base de dados voos, tente gerar a tabela abaixo utilizando a coluna dt_partida_real:\n\n\n\n# A tibble: 82,003 × 5\n   dt_partida_real dia_partida mes_partida mes_partida_date dia_semana_partida\n   &lt;date&gt;                &lt;int&gt; &lt;ord&gt;       &lt;date&gt;           &lt;ord&gt;             \n 1 2024-12-01                1 Dec         2024-12-01       Sun               \n 2 2024-12-01                1 Dec         2024-12-01       Sun               \n 3 2024-12-01                1 Dec         2024-12-01       Sun               \n 4 2024-11-30               30 Nov         2024-11-01       Sat               \n 5 2024-12-01                1 Dec         2024-12-01       Sun               \n 6 2024-12-01                1 Dec         2024-12-01       Sun               \n 7 2024-12-01                1 Dec         2024-12-01       Sun               \n 8 2024-12-01                1 Dec         2024-12-01       Sun               \n 9 2024-12-01                1 Dec         2024-12-01       Sun               \n10 2024-12-01                1 Dec         2024-12-01       Sun               \n# ℹ 81,993 more rows\n\n\n\n\n\n7.2.5 Datas em gráficos\nVamos criar um gráfico com o pacote ggplot2 utilizando a base de dados voos. Vamos criar um gráfico de barras com a quantidade de voos por dia de partida, que partiram do aeroporto de Brasília - DF: PRESIDENTE JUSCELINO KUBITSCHEK.\n\nvoos_brasilia &lt;- voos |&gt;\n  filter(nm_aerodromo_origem == \"PRESIDENTE JUSCELINO KUBITSCHEK\")\n\nComo essa coluna está originalmente salva como texto, o ggplot2 entenderá que cada data é uma categoria (e não uma data), e o gráfico não será exibido corretamente:\n\nquantidade_voos_por_partida &lt;- voos_brasilia |&gt; \n  count(dt_partida_real) \n\nquantidade_voos_por_partida |&gt; \n  ggplot(aes(x = dt_partida_real, y = n)) +\n  geom_col() +\n  labs(\n    x = \"Data\",\n    y = \"Quantidade de voos\",\n    title = \"Quantidade de voos por dia de partida\"\n  )\n\n\n\n\n\n\n\n\nPara que o ggplot2 entenda que a variável é uma data, precisamos transformá-la para o tipo Date (como visto anteriormente):\n\nquantidade_voos_partida_data &lt;- voos_brasilia |&gt;\n  mutate(\n    dt_partida_real_date = dmy(dt_partida_real)\n  ) |&gt;\n  count(dt_partida_real_date)\n\nquantidade_voos_partida_data\n\n# A tibble: 31 × 2\n   dt_partida_real_date     n\n   &lt;date&gt;               &lt;int&gt;\n 1 2024-12-01             142\n 2 2024-12-02             158\n 3 2024-12-03             163\n 4 2024-12-04             160\n 5 2024-12-05             164\n 6 2024-12-06             157\n 7 2024-12-07             126\n 8 2024-12-08             146\n 9 2024-12-09             160\n10 2024-12-10             159\n# ℹ 21 more rows\n\n\nAgora vamos criar o gráfico com a data transformada. Observe que agora o ggplot2 entende que a variável é uma data, e o gráfico é exibido corretamente:\n\n grafico_voos &lt;- quantidade_voos_partida_data |&gt; \n  ggplot(aes(x = dt_partida_real_date, y = n)) +\n  geom_col() +\n  labs(\n    x = \"Data de partida\",\n    y = \"Quantidade de voos\",\n    title = \"Quantidade de voos por dia de partida\",\n    subtitle = \"Voos que partiram do aeroporto de Brasília, em dezembro de 2024\"\n  ) +\n  coord_trans(expand = FALSE) +\n  theme_minimal()\n\ngrafico_voos\n\n\n\n\n\n\n\n\nO pacote ggplot2 possui funções específicas para trabalhar com datas em gráficos. Por exemplo, a função scale_x_date() permite personalizar o eixo x de um gráfico com datas. Essa função possui argumentos para personalizar o formato das datas (date_labels), e o intervalo entre as datas (date_breaks).\n\ngrafico_voos +\n  scale_x_date(date_labels = \"%d\", date_breaks = \"1 day\") \n\n\n\n\n\n\n\n\n\n7.2.5.1 Exercícios\n\nUtilizando o gráfico criado anteriormente, personalize o eixo x para exibir o dia/mês de cada data (como 12/dez), e o intervalo entre as datas seja de 7 dias.\n\n\nOs nomes dos meses estão em inglês ou em português? Caso esteja em inglês, como você faria para exibir os nomes dos meses em português?\n\n\n\n\n\n\n\nDica\n\n\n\nDica: a função Sys.setlocale() permite alterar o locale utilizado pelo R.\n\nSys.setlocale(\"LC_ALL\", \"pt_br.utf-8\")",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Manipulação de datas e textos</span>"
    ]
  },
  {
    "objectID": "texto-data.html#manipulação-de-textos",
    "href": "texto-data.html#manipulação-de-textos",
    "title": "7  Manipulação de datas e textos",
    "section": "7.3 Manipulação de textos",
    "text": "7.3 Manipulação de textos\nEm breve!",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Manipulação de datas e textos</span>"
    ]
  },
  {
    "objectID": "texto-data.html#material-complementar",
    "href": "texto-data.html#material-complementar",
    "title": "7  Manipulação de datas e textos",
    "section": "7.4 Material complementar",
    "text": "7.4 Material complementar\n\nCapítulos do livro “R para Ciência de Dados” (2 ed) por Hadley Wickham, Mine Çetinkaya-Rundel, e Garrett Grolemund:\n\nDatas e horários\nStrings\nExpressões regulares",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Manipulação de datas e textos</span>"
    ]
  },
  {
    "objectID": "programacao-funcional.html",
    "href": "programacao-funcional.html",
    "title": "8  Programação funcional",
    "section": "",
    "text": "8.1 Material complementar\nEm breve!",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Programação funcional</span>"
    ]
  },
  {
    "objectID": "programacao-funcional.html#material-complementar",
    "href": "programacao-funcional.html#material-complementar",
    "title": "8  Programação funcional",
    "section": "",
    "text": "Capítulos do livro “R para Ciência de Dados” (2 ed) por Hadley Wickham, Mine Çetinkaya-Rundel, e Garrett Grolemund:\n\nUm guia para o R Base\nFunções\nIteração",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Programação funcional</span>"
    ]
  },
  {
    "objectID": "dados-espaciais.html",
    "href": "dados-espaciais.html",
    "title": "9  Dados espaciais",
    "section": "",
    "text": "Em breve!",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Dados espaciais</span>"
    ]
  },
  {
    "objectID": "big-data.html",
    "href": "big-data.html",
    "title": "10  Introdução à Big Data",
    "section": "",
    "text": "10.1 Material complementar\nEm breve!",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introdução à *Big Data*</span>"
    ]
  },
  {
    "objectID": "big-data.html#material-complementar",
    "href": "big-data.html#material-complementar",
    "title": "10  Introdução à Big Data",
    "section": "",
    "text": "Capítulos do livro “R para Ciência de Dados” (2 ed) por Hadley Wickham, Mine Çetinkaya-Rundel, e Garrett Grolemund:\n\nBancos de dados\nArrow",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Introdução à *Big Data*</span>"
    ]
  }
]