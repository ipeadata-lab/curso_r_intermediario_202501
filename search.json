[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R intermediário e pesquisa reprodutível",
    "section": "",
    "text": "Introdução\nEste site apresenta o material de apoio para o curso “R intermediário e pesquisa reprodutível”, oferecido em 2025 para servidores do Instituto de Pesquisa Econômica Aplicada (Ipea).\nO curso será realizado de forma remota híbrida, com aulas ao vivo e atividades práticas.\nAlém deste site, o material do curso também é composto por:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Página inicial</span>"
    ]
  },
  {
    "objectID": "index.html#introdução",
    "href": "index.html#introdução",
    "title": "R intermediário e pesquisa reprodutível",
    "section": "",
    "text": "Scripts em R que foram utilizados nas aulas\nGravação das aulas, em um link disponibilizado para as pessoas matriculadas no curso.\n\n\n\n\n\n\n\nNota\n\n\n\nRecomendamos que todas as pessoas participantes que verifiquem a página Instruções de instalação antes do início do curso.\nCaso tenha alguma dificuldade, entre em contato com a equipe do curso o quanto antes.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Página inicial</span>"
    ]
  },
  {
    "objectID": "index.html#pré-requisitos",
    "href": "index.html#pré-requisitos",
    "title": "R intermediário e pesquisa reprodutível",
    "section": "Pré-requisitos",
    "text": "Pré-requisitos\nEste curso é uma continuação do Introdução à análise de dados no R, e recomendamos que você tenha familiaridade com os conceitos abordados nele para aproveitar ao máximo os conteúdos aqui apresentados.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Página inicial</span>"
    ]
  },
  {
    "objectID": "index.html#equipe-do-curso",
    "href": "index.html#equipe-do-curso",
    "title": "R intermediário e pesquisa reprodutível",
    "section": "Equipe do curso",
    "text": "Equipe do curso\nBeatriz Milz  Pesquisadora Colaboradora | Estágio pós-doutoral  Laboratório de Planejamento Territorial (LaPlan) - Universidade Federal do ABC (UFABC)  Email | GitHub | LinkedIn | ResearchGate | Currículo Lattes | Orcid\nPedro Cavalcanti Gonçalves Ferreira  Coordenação de Ciência de Dados - COCD  Instituto de Pesquisa Econômica Aplicada (Ipea)  GitHub | LinkedIn | Currículo Lattes | Orcid\nRafael H. M. Pereira  Coordenador de Ciência de Dados  Instituto de Pesquisa Econômica Aplicada (Ipea)  Website | Google Scholar | Linkedin |",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Página inicial</span>"
    ]
  },
  {
    "objectID": "index.html#sobre-este-material",
    "href": "index.html#sobre-este-material",
    "title": "R intermediário e pesquisa reprodutível",
    "section": "Sobre este material",
    "text": "Sobre este material\n\n\n\nLicença\nEsse material está disponível sob a licença CC BY-SA 4.0.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Página inicial</span>"
    ]
  },
  {
    "objectID": "calendario.html",
    "href": "calendario.html",
    "title": "2  Calendário do curso",
    "section": "",
    "text": "A maioria das aulas acontecerão às segundas e quartas-feiras, exceto a aula do dia 30/01/2025, que acontecerá numa quinta-feira.\nAs aulas acontecerão das 09h às 12h, com intervalo de 15 minutos.\nSegue o calendário do curso:\n\n\n\nSemana\nData\nHorário\nDia da semana\nConteúdo previsto\n\n\n\n\n1\n20/01/2025\n09h-12h\nSegunda-feira\nApresentação do curso, Reprodutibilidade e estruturação de projeto\n\n\n1\n22/01/2025\n09h-12h\nQuarta-feira\nProdução de relatórios com Quarto (Parte 1)\n\n\n2\n29/01/2025\n09h-12h\nQuarta-feira\nProdução de relatórios com Quarto (Parte 2)\n\n\n2\n30/01/2025\n09h-12h\nQuinta-feira (*)\nIntrodução ao controle de versão com Git e GitHub\n\n\n3\n03/02/2025\n09h-12h\nSegunda-feira\nManipulação de textos e datas\n\n\n4\n10/02/2025\n09h-12h\nSegunda-feira\nIntrodução à Big Data\n\n\n4\n12/02/2025\n09h-12h\nQuarta-feira\nProgramação funcional e paralelização (Parte 1)\n\n\n5\n17/02/2025\n09h-12h\nSegunda-feira\nProgramação funcional e paralelização (Parte 2)\n\n\n5\n19/02/2025\n09h-12h\nQuarta-feira\nDados espaciais (Parte 1)\n\n\n6\n24/02/2025\n09h-12h\nSegunda-feira\nDados espaciais (Parte 2)\n\n\n7\n26/02/2025\n09h-11h (*)\nQuarta-feira\nDúvidas e encerramento\n\n\n\n\n(*): Atenção para as datas e horários diferentes.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Calendário do curso</span>"
    ]
  },
  {
    "objectID": "instalacao.html",
    "href": "instalacao.html",
    "title": "3  Instalações e outros preparativos",
    "section": "",
    "text": "3.1 Instalação de pacotes necessários\nPara instalar os pacotes necessários para o curso, execute o seguinte código:\ninstall.packages(c(\"tidyverse\", \"usethis\", \"renv\",\n                   \"here\", \"fuzzyjoin\", \"furrr\",\n                   \"dbplyr\", \"arrow\", \"vroom\",\n                   \"duckdb\", \"sf\", \"geobr\", \"quarto\"))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Instalações e outros preparativos</span>"
    ]
  },
  {
    "objectID": "instalacao.html#instalação-do-tinytex",
    "href": "instalacao.html#instalação-do-tinytex",
    "title": "3  Instalações e outros preparativos",
    "section": "3.2 Instalação do TinyTeX",
    "text": "3.2 Instalação do TinyTeX\nPara a aula de “Produção de relatórios com Quarto”, para exportar o relatório em PDF será necessário ter algum sistema de LaTeX instalado. O TinyTeX é uma versão mínima do LaTeX que é suficiente para o uso no curso.\nPrimeiramente, precisamos instalar o pacote tinytex:\n\ninstall.packages('tinytex')\n\nE então instalar o TinyTeX:\n\ntinytex::install_tinytex()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Instalações e outros preparativos</span>"
    ]
  },
  {
    "objectID": "instalacao.html#instalação-do-git",
    "href": "instalacao.html#instalação-do-git",
    "title": "3  Instalações e outros preparativos",
    "section": "3.3 Instalação do Git",
    "text": "3.3 Instalação do Git\nPara a aula de “Introdução controle de versão com Git e GitHub”, é necessário ter o Git instalado.\nO Git não é um pacote, e sim um software que deve ser instalado no seu computador.\nPara instalar o Git, acesse a página oficial do Git e siga as instruções de instalação para o seu sistema operacional.\n\n\n\n\n\nPara verificar se o Git foi instalado corretamente, execute o seguinte comando no painel “Terminal” do RStudio:\n\ngit --version\n\ngit version 2.48.1",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Instalações e outros preparativos</span>"
    ]
  },
  {
    "objectID": "instalacao.html#conta-no-github",
    "href": "instalacao.html#conta-no-github",
    "title": "3  Instalações e outros preparativos",
    "section": "3.4 Conta no GitHub",
    "text": "3.4 Conta no GitHub\nPara a aula de “Introdução controle de versão com Git e GitHub”, é necessário ter uma conta no GitHub.\nCaso ainda não tenha uma conta, acesse a página oficial do GitHub, clique em “Sign up” e crie uma conta gratuitamente.\n\n\n\nPágina inicial do GitHub\n\n\n\n\n\nPágina para criar a conta gratuitamente",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Instalações e outros preparativos</span>"
    ]
  },
  {
    "objectID": "reprodutibilidade.html",
    "href": "reprodutibilidade.html",
    "title": "4  Reprodutibilidade e estruturação de projeto",
    "section": "",
    "text": "4.1 Introdução à Reprodutibilidade\nNesta aula, o objetivo é apresentar o conceito de reprodutibilidade, e apresentar abordagens e ferramentas para estruturar projetos em ciência de dados, buscando garantir a reprodutibilidade dos resultados.\nA reprodutibilidade é um conceito central na ciência, embora não tenha uma definição única e comum (Gundersen 2021). Ao fazer um levantamento sobre o conceito de reprodutibilidade, Gundersen (2021) elaborou a seguinte definição:\nTradução livre:\nA definição prática de reprodutibilidade é frequentemente associada à capacidade de reproduzir os resultados de uma pesquisa a partir dos dados brutos e do código utilizado.\nDe acordo com Baker (2016), a partir de um questionário realizado pela revista Nature sobre reprodutibilidade com mais de 1500 pesquisadores, vários fatores contribuem para pesquisas não reprodutíveis, como a não disponibilização de códigos, métodos e dados brutos. A figura abaixo apresenta os fatores mais citados pelos respondentes:",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reprodutibilidade e estruturação de projeto</span>"
    ]
  },
  {
    "objectID": "reprodutibilidade.html#introdução-à-reprodutibilidade",
    "href": "reprodutibilidade.html#introdução-à-reprodutibilidade",
    "title": "4  Reprodutibilidade e estruturação de projeto",
    "section": "",
    "text": "“Reprodutibilidade é como escovar os dentes. Isso é bom para você, mas leva tempo e esforço. Depois de aprender, torna-se um hábito”. - Irakli Loladze, em pesquisa conduzida por Baker (2016).\n\n\n\n“Reproducibility is the ability of independent investigators to draw the same conclusions from an experiment by following the documentation shared by the original investigators.”\n\n\n\n“Reprodutibilidade é a capacidade de pesquisadores independentes chegarem às mesmas conclusões de um experimento ao seguir a documentação compartilhada pelos pesquisadores originais.”\n\n\n\n\n\n\nFatores que contribuem para pesquisas não reprodutíveis. Fonte: Baker (2016).\n\n\n\n4.1.1 Exercício\n\nReflita sobre a seguinte pergunta: Como você acha que a reprodutibilidade está relacionada ao seu trabalho? Se possível, discuta em grupo e posteriormente compartilhe com a turma suas ideias.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reprodutibilidade e estruturação de projeto</span>"
    ]
  },
  {
    "objectID": "reprodutibilidade.html#boas-práticas-em-projetos-de-análise-de-dados",
    "href": "reprodutibilidade.html#boas-práticas-em-projetos-de-análise-de-dados",
    "title": "4  Reprodutibilidade e estruturação de projeto",
    "section": "4.2 Boas práticas em projetos de análise de dados",
    "text": "4.2 Boas práticas em projetos de análise de dados\nPara aumentar a chance de desenvolver um projeto de análise de dados que seja reprodutível, algumas boas práticas podem ser adotadas, como:\n\nnão utilizar caminhos absolutos1\nevitar o uso de caracteres especiais em caminhos, variáveis e nomes de colunas2. Além disso, utilize nomes descritivos (ex: evite utilizar apenas x ou df).\narmazenar os arquivos de maneira consistente\nregistrar quais são as dependências (versões do R e dos pacotes utilizados)\ndocumentar as análises realizadas\ncontrolar as versões dos arquivos por meio de ferramentas como o Git e GitHub.\ncompartilhamento de dados brutos, códigos e documentação\n\nUma prática que pode ajudar a checar a reprodutibilidade de uma análise de dados é solicitar que outra pessoa que trabalha com você tente reproduzir os resultados a partir dos códigos, dados brutos e documentação (Markowetz 2015).\n\n4.2.1 Exercício\n\nVocê já teve alguma experiência em que a falta de reprodutibilidade foi um problema? Se sim, o que você aprendeu com essa experiência?\nConsiderando a seguir e a discussão feita em sala, o que você mudaria no código a seguir?\n\n\nlibrary(tidyverse)\ndata &lt;- read_rds(\"C:/Users/usuario/Downloads/sidra_4092_arrumado.rds\")\ndados &lt;- dados |&gt;\n  filter(ano == max(ano))\ndados |&gt;\n  group_by(uf) |&gt;\n  mutate(diferenca = perc_desocupacao - last(perc_desocupacao)) |&gt;\n  ungroup() |&gt;\n  mutate(uf = fct_reorder(uf, diferenca)) |&gt;\n  ggplot(aes(x = perc_desocupacao, y = uf)) +\n  geom_point(aes(color = trimestre_codigo)) +\n  theme_light()",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reprodutibilidade e estruturação de projeto</span>"
    ]
  },
  {
    "objectID": "reprodutibilidade.html#estrutura-de-projetos",
    "href": "reprodutibilidade.html#estrutura-de-projetos",
    "title": "4  Reprodutibilidade e estruturação de projeto",
    "section": "4.3 Estrutura de projetos",
    "text": "4.3 Estrutura de projetos\nProjetos estruturados são importantes para a reprodutibilidade na ciência de dados. Ferramentas como projetos do RStudio, pacotes em R, controle de versão com Git e GitHub3, relatórios reprodutíveis com Quarto4, {renv} e {targets} ajudam a organizar o trabalho, gerenciar dependências e automatizar processos, aumentando as chances que outras pessoas posam reproduzir os resultados a partir dos códigos e dados brutos. Ao adotar essas práticas, é possível reduzir erros, aumentar a confiabilidade e promover uma ciência mais transparente e colaborativa.\nA seguir, vamos apresentar algumas dessas ferramentas e práticas!",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reprodutibilidade e estruturação de projeto</span>"
    ]
  },
  {
    "objectID": "reprodutibilidade.html#projetos-no-rstudio",
    "href": "reprodutibilidade.html#projetos-no-rstudio",
    "title": "4  Reprodutibilidade e estruturação de projeto",
    "section": "4.4 Projetos no RStudio",
    "text": "4.4 Projetos no RStudio\n\n\n\n\n\n\n\nNota\n\n\n\nO conteúdo sobre projetos no RStudio foi abordado no curso “Introdução à análise de dados no R”.\n\n\nO RStudio oferece uma funcionalidade chamada projetos, que facilita a organização e a reprodutibilidade do trabalho em ciência de dados. Ao criar um projeto no RStudio, uma nova pasta é gerada no computador, e o RStudio automaticamente define essa pasta como o diretório de trabalho. Além disso, o RStudio também cria um arquivo com a extensão .Rproj dentro dessa pasta, que contém informações sobre o projeto.\nTrabalhar com projetos no RStudio é altamente recomendado, pois ajuda a manter os arquivos organizados e facilita a reprodução do código. Sempre que iniciar uma nova análise de dados, crie um projeto correspondente. Isso garante que todos os arquivos relacionados ao projeto estejam em um único local e evita problemas comuns, como dependência de caminhos absolutos.\nÉ recomendado que sempre trabalhemos em projetos no RStudio, pois isso facilita a organização dos arquivos e a reprodução do código. Portanto, ao começar a trabalhar em uma novo projeto de análise de dados, lembre-se de criar um .Rproj correspondente.\nPara manter a organização, salve os arquivos relacionados ao projeto (como scripts, bases de dados e resultados) dentro da pasta principal do projeto. No entanto, é uma boa prática estruturar o projeto em subpastas para separar diferentes tipos de arquivos, como dados, scripts e relatórios.\nUm exemplo de estrutura básica de projeto pode incluir as seguintes subpastas:\n\ndados/: Para armazenar bases de dados.\nscripts/: Para salvar scripts R utilizados na análise.\nrelatorios/: Para guardar relatórios gerados.\n\n\n4.4.1 Exercício\n\nNo RStudio, crie um novo projeto para ser utilizado ao longo do curso. Lembre-se de criar o projeto em uma pasta que você possa acessar facilmente.\nDentro do projeto, crie as seguintes pastas para organizar os arquivos:\n\ndados/\ndados_output/\nscripts/\nrelatorios/\n\n\nVocê pode criar as pastas manualmente ou utilizar a função dir.create() para criar as pastas:\n\ndir.create(\"dados\")\ndir.create(\"dados_output\") \ndir.create(\"scripts\")\ndir.create(\"relatorios\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reprodutibilidade e estruturação de projeto</span>"
    ]
  },
  {
    "objectID": "reprodutibilidade.html#renv-gerenciando-dependências",
    "href": "reprodutibilidade.html#renv-gerenciando-dependências",
    "title": "4  Reprodutibilidade e estruturação de projeto",
    "section": "4.5 {renv}: gerenciando dependências",
    "text": "4.5 {renv}: gerenciando dependências\n\nO R e seus pacotes estão em constante evolução, com novas versões sendo lançadas regularmente para corrigir erros, adicionar funcionalidades e melhorar a eficiência. No entanto, essas atualizações podem introduzir mudanças que “quebram” análises anteriores, especialmente se as versões dos pacotes usados em um projeto não forem registradas. Para evitar esses problemas e garantir que as análises sejam reprodutíveis ao longo do tempo, podemos utilizar ferramentas que ajudem a gerenciar as dependências do projeto.\nO pacote {renv} é uma ferramenta que permite gerenciar as dependências de pacotes em projetos R. Ele registra quais foram os pacotes utilizados, quais é a versão de cada um deles, e a fonte de instalação (se foram instalados do CRAN, GitHub, R Universe, Bioconductor, etc). Isso possibilita que o ambiente seja reproduzido em qualquer máquina ou momento, mesmo se o R ou os pacotes forem atualizados.\nO {renv} é especialmente útil em projetos colaborativos, em que diferentes pessoas podem estar trabalhando no mesmo projeto, ou em projetos que serão retomados após um longo período de tempo.\nUm conceito importante do {renv} é o isolamento de ambiente. Isso significa que o {renv} possibilita armazenar as bibliotecas de pacotes do projeto em uma pasta específica, separada das bibliotecas globais do R. Isso evita conflitos entre versões de pacotes e garante que o ambiente de pacotes do projeto seja consistente e reprodutível.\nApesar de poderoso, o {renv} pode não ser necessário para projetos muito simples ou temporários.\n\n4.5.1 Arquivo renv.lock\nO {renv} registra as dependências do projeto no arquivo renv.lock, que é um arquivo que contém informações sobre as versões dos pacotes instalados. Com esse arquivo, é possível recriar o ambiente de pacotes exatamente como ele estava quando o arquivo foi gerado. Isso é útil para garantir a reprodutibilidade do projeto e evitar problemas com pacotes desatualizados.\nAtenção: o arquivo renv.lock não deve ser alterado manualmente.\n\n\n\n\n\n\nExpanda para ver um exemplo de conteúdo do renv.lock\n\n\n\n\n\nNo exemplo abaixo, temos um exemplo do conteúdo do renv.lock. Observe que está registrado que estamos usando o R versão 4.4.1 e o pacote readr (deixamos apenas um pacote para servir de exemplo, mas o arquivo contém informações sobre todos os pacotes utilizados no projeto):\n\n{\n1  \"R\": {\n    \"Version\": \"4.4.1\",\n    \"Repositories\": [\n      {\n        \"Name\": \"CRAN\",\n        \"URL\": \"https://cloud.r-project.org\"\n      }\n    ]\n  },\n2  \"Packages\": {\n3    \"readr\": {\n      \"Package\": \"readr\",\n      \"Version\": \"2.1.5\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n4      \"Requirements\": [\n        \"R\",\n        \"R6\",\n        \"cli\",\n        \"clipr\",\n        \"cpp11\",\n        \"crayon\",\n        \"hms\",\n        \"lifecycle\",\n        \"methods\",\n        \"rlang\",\n        \"tibble\",\n        \"tzdb\",\n        \"utils\",\n        \"vroom\"\n      ],\n      \"Hash\": \"9de96463d2117f6ac49980577939dfb3\"\n    }\n  }\n}\n\n\n1\n\nVersão do R utilizada, e de qual repositório ele foi instalado.\n\n2\n\nLista de pacotes utilizados (essa lista foi cortada para aparecer apenas um pacote, como exemplo).\n\n3\n\nInformações sobre o pacote instalado: nome, versão, repositório de origem, dependências e hash.\n\n4\n\nDependências do pacote instalado: quais pacotes são necessários para que o pacote readr funcione corretamente?\n\n\n\n\n\n\n\n\n\n4.5.2 Principais funções do {renv}\nPara começar a utilizar o {renv} em um projeto, podemos utilizar a função renv::init(). Isso criará uma pasta renv/ e um arquivo renv.lock, que registrará as dependências do projeto. Além disso, o {renv} armazenará as bibliotecas de pacotes do projeto na pasta renv/library (chamamos isso de isolamento).\n\nrenv::init()\n\nPara verificar o status do ambiente e quais pacotes estão instalados, podemos usar a função renv::status():\n\nrenv::status()\n\nA função renv::snapshot() é utilizada para registrar/atualizar as dependências do projeto no arquivo renv.lock. Isso é útil quando novos pacotes são instalados ou atualizados, e queremos registrar essas mudanças.\n\nrenv::snapshot()\n\nPara restaurar o ambiente de pacotes de um projeto a partir do arquivo renv.lock, podemos utilizar a função renv::restore():\n\nrenv::restore()\n\n\n\n\n\n\n\nNota\n\n\n\n\n\nTambém é possível utilizar a função renv::snapshot() com um projeto que não foi iniciado com {renv} (iniciado com o renv::init()).\nNeste caso, ele registrará o estado atual das dependências nos caminhos das bibliotecas atuais. Isso torna possível restaurar os pacotes atuais, fornecendo portabilidade e reprodutibilidade leves sem o isolamento de ambiente.\n\n\n\n\n\n4.5.3 Exercício 1\nNeste exercício, vamos praticar a utilização do {renv} em um projeto, utilizando o isolamento de ambiente.\n\nAbra o projeto criado no exercício anterior (ou crie um novo projeto, se preferir).\nInicie o {renv} no projeto utilizando a função renv::init().\n\n\n\n\n\n\n\nExemplo de output da função renv::init()\n\n\n\n\n\n\nrenv::init()\n\nrenv: Project Environments for R\n\nWelcome to renv! It looks like this is your first time using renv.\nThis is a one-time message, briefly describing some of renv's functionality.\n\nrenv will write to files within the active project folder, including:\n\n  - A folder 'renv' in the project directory, and\n  - A lockfile called 'renv.lock' in the project directory.\n\nIn particular, projects using renv will normally use a private, per-project\nR library, in which new packages will be installed. This project library is\nisolated from other R libraries on your system.\n\nIn addition, renv will update files within your project directory, including:\n\n  - .gitignore\n  - .Rbuildignore\n  - .Rprofile\n\nFinally, renv maintains a local cache of data on the filesystem, located at:\n\n  - \"/cloud/home/r217847/.cache/R/renv\"\n\nThis path can be customized: please see the documentation in `?renv::paths`.\n\nPlease read the introduction vignette with `vignette(\"renv\")` for more information.\nYou can browse the package documentation online at https://rstudio.github.io/renv/.\n\nDo you want to proceed? [y/N]: \n\ny\n\n- \"/cloud/home/r217847/.cache/R/renv\" has been created.\nThe following package(s) will be updated in the lockfile:\n\n# RSPM -----------------------------------------------------------------------\n- renv   [* -&gt; 1.0.11]\n\nThe version of R recorded in the lockfile will be updated:\n- R      [* -&gt; 4.4.2]\n\n- Lockfile written to \"/cloud/project/renv.lock\".\n\nRestarting R session...\n\n- Project '/cloud/project' loaded. [renv 1.0.11]\n\n\n\n\nObserve no seu projeto se o arquivo renv.lock foi criado e a pasta renv/ foi gerada. Abra o arquivo renv.lock para verificar as informações registradas.\nUtilize a função renv::status() para verificar o status do ambiente e quais pacotes estão instalados.\n\n\n\n\n\n\n\nExemplo de output da função renv::status()\n\n\n\n\n\n\nrenv::status()\n#&gt; No issues found -- the project is in a consistent state.\n\n\n\n\n\nInstale o pacote palmerpenguins utilizando a função install.packages(\"palmerpenguins\") no console.\nCrie um RScript, escreva library(palmerpenguins) e salve-o (dentro do projeto).\nUtilize novamente a função renv::status() para verificar o status do ambiente e quais pacotes estão instalados.\n\n\n\n\n\n\n\nExemplo de output da função renv::status()\n\n\n\n\n\n\nrenv::status()\n\nThe following package(s) are in an inconsistent state:\n\n package        installed recorded used\n palmerpenguins y         n        y   \n\nSee `?renv::status` for advice on resolving these issues.\n\n\n\n\nUtilize a função renv::snapshot() para registrar as dependências do projeto no arquivo renv.lock.\n\n\n\n\n\n\n\nExemplo de output da função renv::snapshot()\n\n\n\n\n\n\nrenv::snapshot()\n\nThe following package(s) will be updated in the lockfile:\n\n# CRAN -----------------------------------------------------------------------\n- palmerpenguins   [* -&gt; 0.1.1]\nDo you want to proceed? [Y/n]:\n\ny\n\n- Lockfile written to \"/cloud/project/renv.lock\".\n\n\n\n\nObserve no arquivo renv.lock se as informações sobre o pacote palmerpenguins foram registradas.\n\n\n\n4.5.4 Exercício 2\nNeste exercício, o objetivo é praticar a restauração do ambiente de pacotes de um projeto a partir do arquivo renv.lock.\n\nCrie um novo projeto no RStudio, para que possamos trabalhar neste exercício com o {renv} (não utilize o mesmo do exercício 1).\nFaça o download deste arquivo renv.lock que utilizaremos de exemplo, e salve na pasta do projeto. Você pode fazer o download manualmente, ou utilizar o código abaixo para baixar o arquivo diretamente no R:\n\n\ndownload.file(\n  url = \"https://raw.githubusercontent.com/ipeadata-lab/curso_r_intermediario_202501/refs/heads/main/exercicios/renv-2/renv.lock\",\n  destfile = \"renv.lock\",\n  mode = \"wb\")\n\n\nAbra o arquivo renv.lock para verificar as informações registradas.\nUtilize a função renv::restore() para restaurar o ambiente de pacotes do projeto a partir do arquivo renv.lock. Quando solicitado, escolha a opção para não isolar o ambiente de pacotes (2: Do not activate the project and use the current library paths.).\n\n\n\n\n\n\n\nExemplo de output da função renv::restore()\n\n\n\n\n\n\nrenv::restore()\n\n\nrenv: Project Environments for R\n\nWelcome to renv! It looks like this is your first time using renv.\nThis is a one-time message, briefly describing some of renv's functionality.\n\nrenv will write to files within the active project folder, including:\n\n  - A folder 'renv' in the project directory, and\n  - A lockfile called 'renv.lock' in the project directory.\n\nIn particular, projects using renv will normally use a private, per-project\nR library, in which new packages will be installed. This project library is\nisolated from other R libraries on your system.\n\nIn addition, renv will update files within your project directory, including:\n\n  - .gitignore\n  - .Rbuildignore\n  - .Rprofile\n\nFinally, renv maintains a local cache of data on the filesystem, located at:\n\n  - \"/cloud/home/r217847/.cache/R/renv\"\n\nThis path can be customized: please see the documentation in `?renv::paths`.\n\nPlease read the introduction vignette with `vignette(\"renv\")` for more information.\nYou can browse the package documentation online at https://rstudio.github.io/renv/.\nDo you want to proceed? [y/N]: \n\ny\n\n- \"/cloud/home/r217847/.cache/R/renv\" has been created.\nIt looks like you've called renv::restore() in a project that hasn't been activated yet.\nHow would you like to proceed? \n\n1: Activate the project and use the project library.\n2: Do not activate the project and use the current library paths.\n3: Cancel and resolve the situation another way.\n\nAtenção neste ponto!\n\nA opção 1 (Activate the project and use the project library) é a opção que irá ativar o ambiente de pacotes do projeto, isolando as bibliotecas de pacotes do projeto das bibliotecas globais do R.\nA opção 2 (Do not activate the project and use the current library paths) é a opção que não irá ativar o ambiente de pacotes do projeto, e os pacotes serão instalados nas bibliotecas globais do R.\n\n\n2\n\nSelection: 2\nThe following package(s) will be updated:\n\n# CRAN -----------------------------------------------------------------------\n- parzer   [* -&gt; 0.4.1]\n- Rcpp     [* -&gt; 1.0.13-1]\n- withr    [* -&gt; 3.0.2]\n\nDo you want to proceed? [Y/n]: y\n\ny\n\n# Downloading packages -------------------------------------------------------\n- Querying repositories for available source packages ... Done!\n- Downloading Rcpp from CRAN ...                OK [3.3 Mb]\n- Downloading parzer from CRAN ...              OK [433.6 Kb]\n- Downloading withr from CRAN ...               OK [100.8 Kb]\nSuccessfully downloaded 3 packages in 2.1 seconds.\n\n# Installing packages --------------------------------------------------------\n- Installing Rcpp ...                           OK [built from source and cached in 26s]\n- Installing withr ...                          OK [built from source and cached in 3.3s]\n- Installing parzer ...                         OK [built from source and cached in 26s]\nSession restored from your saved work on 2025-Jan-20 10:58:30 UTC (18 minutes ago)\n\n\n\n\nVerifique no seu projeto se o pacote parzer está disponível para uso.\n\n\nlibrary(parzer)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reprodutibilidade e estruturação de projeto</span>"
    ]
  },
  {
    "objectID": "reprodutibilidade.html#introdução-ao-targets",
    "href": "reprodutibilidade.html#introdução-ao-targets",
    "title": "4  Reprodutibilidade e estruturação de projeto",
    "section": "4.6 Introdução ao {targets}",
    "text": "4.6 Introdução ao {targets}\n\nO pacote {targets} é uma ferramenta para gerenciamento de pipelines reprodutíveis e escaláveis em R. Ele foi projetado para ajudar a organizar e automatizar análises de dados complexas, garantindo que todos os passos da análise sejam executados na ordem correta e de forma eficiente.\nO {targets} utiliza o conceito de pipelines: cada etapa da análise é definida como um “alvo” (ou target), e as dependências entre essas etapas são gerenciadas automaticamente. Isso significa que, quando algo é alterado em uma etapa inicial, o {targets} identifica quais etapas subsequentes precisam ser reexecutadas e atualiza apenas essas partes, economizando tempo e esforço.\n\n\n\n\n\n\n\nExemplo de gráfico de pipeline com targets, por Will Landau\n\n\nO {targets} é especialmente útil em análises que incluem múltiplas etapas interdependentes, como pré-processamento, modelagem e visualização. Ele também é indicado para situações em que se trabalha com grandes volumes de dados ou análises que demandam muito tempo de execução.\nEmbora seja uma ferramenta poderosa, o {targets} pode ser excessivo para análises simples que consistem em poucas etapas. Ele é mais indicado para fluxos de trabalho complexos.\n\n4.6.1 Materiais de referência sobre targets\n\nDocumentação do pacote\nLivro sobre {targets}\nApresentação “Reproducible computation at scale in R” por Will Landau.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reprodutibilidade e estruturação de projeto</span>"
    ]
  },
  {
    "objectID": "reprodutibilidade.html#outros-pacotes-citados-em-aula",
    "href": "reprodutibilidade.html#outros-pacotes-citados-em-aula",
    "title": "4  Reprodutibilidade e estruturação de projeto",
    "section": "4.7 Outros pacotes citados em aula",
    "text": "4.7 Outros pacotes citados em aula\n\n{reprex} - este pacote nos auxilia a criar exemplos reprodutíveis. Ele é útil para compartilhar dúvidas em fóruns, reportar bugs e criar tutoriais.\n{conflicted} - este pacote nos ajuda a gerenciar conflitos de funções. Ele é útil quando dois pacotes possuem funções com o mesmo nome, e precisamos escolher qual função utilizar.\n{groundhog} - este pacote nos ajuda a utilizar versões específicas de pacotes.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reprodutibilidade e estruturação de projeto</span>"
    ]
  },
  {
    "objectID": "reprodutibilidade.html#materiais",
    "href": "reprodutibilidade.html#materiais",
    "title": "4  Reprodutibilidade e estruturação de projeto",
    "section": "4.8 Materiais",
    "text": "4.8 Materiais\nEste material foi inicialmente desenvolvido com base na aula Introdução ao conceito de reprodutibilidade do curso Relatórios reprodutíveis com R, ministrado por Beatriz Milz no programa de Verão do IME-USP.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reprodutibilidade e estruturação de projeto</span>"
    ]
  },
  {
    "objectID": "reprodutibilidade.html#referências-citadas",
    "href": "reprodutibilidade.html#referências-citadas",
    "title": "4  Reprodutibilidade e estruturação de projeto",
    "section": "4.9 Referências citadas",
    "text": "4.9 Referências citadas\n\n\n\n\nBaker, Monya. 2016. «1, 500 scientists lift the lid on reproducibility». Nature 533 (7604): 452–54. https://doi.org/10.1038/533452a.\n\n\nGundersen, Odd Erik. 2021. «The fundamental principles of reproducibility». Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences 379 (2197): 20200210. https://doi.org/10.1098/rsta.2020.0210.\n\n\nMarkowetz, Florian. 2015. «Five selfish reasons to work reproducibly». Genome Biology 16 (1). https://doi.org/10.1186/s13059-015-0850-7.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reprodutibilidade e estruturação de projeto</span>"
    ]
  },
  {
    "objectID": "reprodutibilidade.html#footnotes",
    "href": "reprodutibilidade.html#footnotes",
    "title": "4  Reprodutibilidade e estruturação de projeto",
    "section": "",
    "text": "Os conceitos diretório de trabalho, caminhos absolutos e caminhos relativos foram abordados na aula sobre diretórios de trabalho e projetos do curso “Introdução à análise de dados no R”.↩︎\nCaso queira revisar este tópico, recomendamos a leitura da seção sobre boas práticas para nomear objetos no R do curso “Introdução à análise de dados no R”.↩︎\nSerá abordado na aula sobre introdução ao controle de versão com Git e GitHub.↩︎\nSerá abordado na aula sobre produção de relatórios com Quarto.↩︎",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reprodutibilidade e estruturação de projeto</span>"
    ]
  },
  {
    "objectID": "relatorios.html",
    "href": "relatorios.html",
    "title": "5  Produção de relatórios com Quarto",
    "section": "",
    "text": "5.1 Introdução\nNo curso Introdução à análise de dados no R, utilizamos arquivos .R para escrever os códigos em R. Em scripts .R, todo o conteúdo é interpretado como código em R, exceto o que estava precedido de # (utilizado para comentários).\nPor exemplo:\n# Aula sobre ggplot2 -----\n\n# Carregar pacotes\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\n# Código que gera o gráfico\npenguins |&gt;\n  ggplot() +\n  aes(x = flipper_length_mm, y = body_mass_g) +\n  geom_point(aes(color = species, shape = species)) +\n  scale_color_manual(values = c(\"darkorange\", \"darkorchid\", \"cyan4\")) +\n  theme_minimal()\n\n# ....\nEssa forma de trabalhar é ótima para criar scripts de análise de dados, mas não é a melhor forma de criar relatórios que combinam texto, código e resultados.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Produção de relatórios com Quarto</span>"
    ]
  },
  {
    "objectID": "relatorios.html#literate-programming",
    "href": "relatorios.html#literate-programming",
    "title": "5  Produção de relatórios com Quarto",
    "section": "5.2 Literate programming",
    "text": "5.2 Literate programming\n\nO conceito de literate programming, ou programação letrada1, foi criado por Donald Knuth na década de 80. Esse conceito propõe a escrita de códigos intercalados com texto explicativo, de forma que o fluxo de raciocínio fique claro para leitores e colaboradores. A ideia central é que o código seja parte da comunicação, tornando o relatório um documento legível tanto para computadores quanto para humanos.\nCom base nesse conceito, surgiram ferramentas que tornam possível criar relatórios reprodutíveis que combinam texto, código e resultados, como o R Markdown e, mais recentemente, o Quarto.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Produção de relatórios com Quarto</span>"
    ]
  },
  {
    "objectID": "relatorios.html#r-markdown",
    "href": "relatorios.html#r-markdown",
    "title": "5  Produção de relatórios com Quarto",
    "section": "5.3 R Markdown",
    "text": "5.3 R Markdown\n\nO R Markdown é um pacote em R que possibilita criar arquivos com códigos em R, resultados dos códigos, e textos explicativos. Esses arquivos tem extensão .Rmd.\nLançado em 20152, ele rapidamente se tornou uma das ferramentas mais populares para a criação de relatórios dinâmicos e reprodutíveis na comunidade R.\n\n\n\nExemplo de um arquivo .Rmd\n\n\nO R Markdown possibilita exportar os arquivos em diversos formatos, como HTML, PDF, Word, apresentações, entre outros.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Produção de relatórios com Quarto</span>"
    ]
  },
  {
    "objectID": "relatorios.html#quarto",
    "href": "relatorios.html#quarto",
    "title": "5  Produção de relatórios com Quarto",
    "section": "5.4 Quarto",
    "text": "5.4 Quarto\n\nComo citado anteriormente, o R Markdown é uma ferramenta muito boa para escrita técnica e científica reprodutível, mas, por ser um pacote em R, o seu uso acaba ficando limitado às pessoas que usam R.\nEm 2022, a Posit (anteriormente chamada de RStudio) (mesma empresa responsável pelo RMarkdown) lançou o Quarto, uma nova ferramenta que permite a criação de documentos dinâmicos e reprodutíveis.\nO Quarto é um sistema de escrita técnica e científica, de código aberto. Ele é uma evolução do R Markdown, mas não depende do R para funcionar. Isso significa que você pode usar o Quarto para escrever documentos com códigos em Python, R, Julia, Observable, entre outras linguagens, e exportar para diversos formatos, como PDF, HTML, Word, entre outros. Por exemplo: Você pode usar o VSCode como IDE, escrever um documento com código em Python e gerar o documento final. Tudo isso sem precisar ter o R e/ou RStudio instalados.\n\n\n\n\n\n\n\nArte por Allison Horst.\n\n\n\n\n\n\n\n\nNota\n\n\n\nO Quarto foi lançado em 2022, e apresenta melhorias em relação ao R Markdown.\nNesta aula, vamos focar no Quarto, mas caso queira utilizar o RMarkdown, os principais conceitos são os mesmos.\n\n\n\n5.4.1 Instalação do Quarto\nComo dito anteriormente, o Quarto não é um pacote em R como o RMarkdown, e sim um software que podemos instalar em nosso computador.\nQuando instalamos as versões mais recentes do RStudio IDE, o Quarto já vem instalado. Caso você não tenha o RStudio instalado, você pode instalar o Quarto de forma independente.\nPara instalar ou atualizar o Quarto, acesse a página de instalação, faça o download do instalador referente ao seu sistema operacional (Windows, Mac OS, Linux) e faça a instalação.\n\n\n5.4.1.1 Exercício\n\nVerifique se o Quarto está instalado no seu computador. Para isso, abra o RStudio e verifique se o botão “New File” apresenta a opção “Quarto Document”.\n\n\n\n\n5.4.2 Criar um novo documento Quarto (.qmd)\nOs arquivos Quarto tem extensão .qmd, e podem ser criados no RStudio clicando no botão “New File” e selecionando “Quarto Document”.\n\n\n\nCriar um novo arquivo Quarto\n\n\nEm seguida, o RStudio apresentará uma janela chamada “New Quarto Document” com algumas opções para criar um novo arquivo. Essas opções são passíveis de alteração posteriormente, então não precisamos nos preocupar muito com elas agora. Em resumo:\n\nTitle: Título do documento\nAuthor: Nome de quem está criando o documento\nFormat: Formato do documento (HTML, PDF, Word). Vamos manter em HTML.\nEngine: Knitr ou Jupyter. Vamos manter em Knitr.\nEditor: Caixa para selecionar o editor visual. Por enquanto, vamos deixar desmarcado.\n\nPara criar o documento, clique em “Create”:\n\n\n\nNew Quarto Document\n\n\nO RStudio criará um arquivo .qmd com uma estrutura inicial:\n\n\n\nArquivo Quarto criado\n\n\n\n5.4.2.1 Exercício\n\nCrie um arquivo com Quarto básico, adicionando o título “Meu primeiro relatório”, e no campo de autoria adicionando o seu nome. Mantenha selecionada a opção para exportar um arquivo HTML. Salve o arquivo como \"aula-2.qmd\" na pasta do projeto do curso, em \"relatorios/\".\n\n\n\n\n5.4.3 Renderizar o arquivo\nPodemos clicar no botão Render para que o arquivo seja renderizado (ou seja, o código fonte será transformado em um arquivo final HTML/Word/PDF/etc). É necessário salvar o arquivo antes de renderizar.\nNa imagem a seguir, temos um exemplo de um arquivo em sua versão .qmd e a versão renderizada em HTML. Observe que o botão render foi destacado em vermelho, e que o arquivo renderizado foi aberto no painel Viewer do RStudio.\n\n\n\nExemplo: Arquivo .qmd e a versão renderizada em HTML\n\n\nCaso você clique em render e não aconteça nada, você pode:\n\nVerificar se o RStudio está configurado para mostrar a versão preliminar (Preview) do documento no painel Viewer, clicando na engrenagem ao lado do botão Render e selecionando a opção “Preview in Viewer Pane”:\n\n\n\n\nOpção Preview in Viewer Pane\n\n\n\nVerificar se o arquivo foi salvo na pasta do projeto.\n\nNos próximos tópicos, vamos explorar a estrutura de um arquivo Quarto e como adicionar conteúdos a ele.\n\n5.4.3.1 Exercício\n\nRenderize o arquivo \"aula-2.qmd\" que você criou anteriormente. Verifique se o arquivo foi renderizado corretamente, se você consegue visualizar o conteúdo no painel Viewer do RStudio, e se o arquivo foi salvo na pasta do projeto.\n\n\n\n\n5.4.4 Estrutura de um arquivo Quarto\nOs arquivos Quarto tem extensão .qmd, e são divididos em três partes:\n\nMetadados: Informações sobre o documento, como título, autor, formato, data, editor, entre outros. Essa parte é delimitada por --- no início e no final. É escrita em formato yaml, com a estrutura chave: valor. Nos metadados, a indentação (espaços entre o início da linha e o início do texto) é importante para o correto funcionamento do documento.\nCampos de código (code chunks): Trechos de código (em R ou outra linguagem) que podem ser executados e exibidos no documento. Os campos de código podem ser criados utilizando a marcação ```{r} no início e ``` no final, ou utilizando o botão de criar novo chunk: .\nTextos com marcação em Markdown: Textos explicativos, títulos, listas, tabelas, imagens, links, entre outros. A marcação é feita em Markdown, uma linguagem de marcação simples.\n\n\n\n\n\n\n\nO que é Markdown?\n\n\n\nMarkdown é uma linguagem de marcação simples que permite escrever textos com formatação básica, como títulos, listas, links, imagens, entre outros. A ideia é que o texto seja legível mesmo sem a formatação, e que a marcação seja simples e intuitiva.\n\n\nO arquivo abaixo é um exemplo de um arquivo Quarto:\n1---\ntitle: \"Título do documento\"\nformat: html\n---\n\n2# Título 1\n\nEste é um texto de exemplo.\n\n```{r}\n3# este é um campo de código em R\n1 + 1\n``` \n\n1\n\nMetadados\n\n2\n\nTexto com marcação em Markdown\n\n3\n\nCampo de código\n\n\n\n5.4.4.1 Exercício\n\nVamos começar a adicionar um pouco de conteúdo no arquivo \"aula-2.qmd\" criado anteriormente. Adicione:\n\n\nUm campo de código, onde o pacote tidyverse seja carregado.\nUm campo de código, com o código para criar um gráfico simples com o pacote ggplot2. Caso você não tenha um código em mente, você pode utilizar o código abaixo:\n\n\nlibrary(palmerpenguins)\npenguins |&gt;\n  ggplot() +\n  aes(x = flipper_length_mm, y = body_mass_g) +\n  geom_point(aes(color = species, shape = species)) +\n  scale_color_manual(values = c(\"darkorange\", \"darkorchid\", \"cyan4\")) +\n  theme_minimal()\n\n\nUm parágrafo simples de texto, descrevendo o que foi feito.\n\n\nSalve o arquivo e renderize-o. Verifique se o conteúdo foi renderizado corretamente.\n\n\n\n\n5.4.5 Editor Source e Visual\nAo utilizar documentos Quarto, podemos escolher entre dois modos de edição: Source (código fonte) e Visual.\n\nEditor Source: Modo de edição de código, onde podemos ver e editar o código fonte do documento. É o modo padrão.\nEditor Visual: Modo de edição visual, onde podemos ver uma prévia do documento como um todo, com o texto formatado e uma barra de ferramentas. É importante perceber que quando alteramos o documento no editor visual, o código fonte é atualizado automaticamente. Saiba mais sobre o Editor Visual.\n\n\n\n\nBarra de ferramentas do editor visual\n\n\nA seguir, temos um exemplo de um documento Quarto no modo Source e Visual:\n\n\n\n\n\n\n\n\n\nEditor Source\n\n\n\n\n\n\n\nEditor Visual\n\n\n\n\n\nPara alterar entre os modos de edição, escolha a opção desejada nos botões no canto superior direito do documento:\n\n\n\nAlterar entre modo Source e Visual\n\n\nO editor Visual tem várias opções para facilitar a formação do texto com Markdown e inserir outros tipos de conteúdo (como por exemplo: notas de rodapé, citações, imagens, links, tabelas simples, expressões matemáticas com LaTeX, entre outros):\n\n\n\nOpções do editor Visual. Fonte: documentação do Quarto.\n\n\nCaso queira que o RStudio sempre abra o documento no editor de preferência, você pode adicionar essa informação nos metadados do documento, utilizando editor: seguido de source ou visual. Por exemplo:\n\n\n\n\n\n\n---\neditor: source\n---\n\n\n---\neditor: visual\n---\n\n\n\n\n5.4.5.1 Exercício\n\nExplore as opções do editor Visual, adicionando um pouco de formatação ao texto do arquivo \"aula-2.qmd\". Tente adicionar pelo menos um título, uma lista, e um link.\nAltere entre os modos Source e Visual. Veja a diferença entre o código fonte e a visualização do documento.\nEntre os modos Source e Visual, qual você prefere para escrever documentos? Por quê?\n\n\n\n\n5.4.6 Adicionando conteúdos com código\n\n\n\n\n\n\nNota\n\n\n\nExistem vários tipos de conteúdo que podem ser adicionados a um documento Quarto, como texto, código, gráficos, tabelas, imagens, links, entre outros.\nO melhor lugar para aprender sobre esses conteúdos é a documentação do Quarto, que é muito completa e bem organizada.\n\n\nVamos explorar alguns tipos de conteúdos que podem ser adicionados a um documento Quarto que sejam resultados de códigos em R.\nComo citado anteriormente, podemos adicionar código em R em campos de código, ou code chunks. Dentro de um campo de código, podemos adicionar comentários, códigos em R, e os resultados dos códigos serão exibidos logo em seguida no documento.\nPara adicionar um campo de código, utilizamos a marcação ```{r} no início e ``` no final. Por exemplo:\n\n```{r}\n# Exemplo: somando 1 + 1\n1 + 1\n```\n\n[1] 2\n\n\nA partir de agora, vamos omitir a marcação de iniciar e finalizar os campos de código, porém saiba que é necessário adicionar essas marcações para que o código seja executado. Por exemplo, o código acima seria apresentado desta forma:\n\n# Exemplo: somando 1 + 1\n1 + 1\n\n[1] 2\n\n\n\n5.4.6.1 Adicionando gráficos\nPara adicionar um gráfico, podemos criar um campo de código e adicionar o código que gera o gráfico (igual ao utilizando em scripts .R).\nOs gráficos gerados a partir de um campo de código são exibidos logo após o código.\nPor exemplo:\n\n# Carregar os pacotes\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\n# exemplo de código\npenguins |&gt;\n  ggplot() +\n  aes(x = flipper_length_mm, y = body_mass_g) +\n  geom_point(aes(color = species, shape = species)) +\n  scale_color_manual(values = c(\"darkorange\", \"darkorchid\", \"cyan4\")) +\n  labs(\n    x = \"Comprimento da nadadeira (mm)\",\n    y = \"Massa corporal (g)\",\n    color = \"Espécie\",\n    shape = \"Espécie\",\n    title = \"Relação entre comprimento da nadadeira e massa corporal\",\n    subtitle = \"Pinguins das espécies Adelie, Chinstrap e Gentoo\",\n    caption = \"Fonte: Pacote palmerpenguins.\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n5.4.6.2 Adicionando tabelas\nPara adicionar tabelas (que sejam geradas com código), não basta apenas adicionar o código que gera a tabela. Veja o que acontece se tentarmos adicionar uma tabela com o código abaixo:\n\npinguins_frequencia &lt;- penguins |&gt; \n  count(species, island, sort = TRUE)\n\npinguins_frequencia\n\n# A tibble: 5 × 3\n  species   island        n\n  &lt;fct&gt;     &lt;fct&gt;     &lt;int&gt;\n1 Gentoo    Biscoe      124\n2 Chinstrap Dream        68\n3 Adelie    Dream        56\n4 Adelie    Torgersen    52\n5 Adelie    Biscoe       44\n\n\nObserve que o resultado que apareceu no relatório é igual ao que apareceria no console do R.\nPara que a tabela seja exibida de forma mais amigável, podemos utilizar alguma função de tabela para gerar tabelas. Existem diversas funções (de diferentes pacotes em R) que possibilitam a criação de tabelas. A função knitr::kable() é muito utilizada, e permite criar tabelas simples a partir de um data frame.\nPor exemplo, podemos utilizar o knitr::kable() para exibir a tabela criada:\n\npinguins_frequencia |&gt; \n  knitr::kable()\n\n\n\n\nspecies\nisland\nn\n\n\n\n\nGentoo\nBiscoe\n124\n\n\nChinstrap\nDream\n68\n\n\nAdelie\nDream\n56\n\n\nAdelie\nTorgersen\n52\n\n\nAdelie\nBiscoe\n44\n\n\n\n\n\nPodemos explorar os argumentos da função para personalizar a tabela, como adicionar nomes de colunas, entre outros. Por exemplo:\n\npinguins_frequencia |&gt; \n  knitr::kable(col.names = c(\"Espécie\", \"Ilha\", \"Quantidade\"))\n\n\n\n\nEspécie\nIlha\nQuantidade\n\n\n\n\nGentoo\nBiscoe\n124\n\n\nChinstrap\nDream\n68\n\n\nAdelie\nDream\n56\n\n\nAdelie\nTorgersen\n52\n\n\nAdelie\nBiscoe\n44\n\n\n\n\n\n\n\n\n\n\n\nDica\n\n\n\nAlém da função knitr::kable(), existem outras funções que podem ser utilizadas para criar tabelas. Abaixo listamos alguns pacotes que possuem funções para criar tabelas, e podem ser explorados posteriormente:\n\nkableExtra: este pacote apresenta funções para personalizar tabelas criadas com knitr::kable(), porém o seu funcionamento é focado em tabelas em HTML e PDF (com LaTeX). Se o seu objetivo é gerar documentos em word, não utilize o kableExtra.\nflextable: este pacote é focado em criar tabelas para documentos em Word, e permite maior personalização. Para aprender a utilizar o flextable, consulte a documentação do pacote e o guia de usuário (flextable book).\nreactable: este pacote é focado em criar tabelas interativas em HTML, e permite adicionar filtros, ordenação, entre outros. Para aprender a utilizar o reactable, consulte a documentação do pacote.\ngt: este pacote foi criado pela equipe da RStudio/Posit, e tenta utilizar uma filosofia similar ao ggplot2 (a gramática dos gráficos), porém com tabelas (gt sendo gramática de tabelas). O gt tem funções para as diferentes partes da tabela: cabeçalho, corpo, rodapé, entre outros. Para aprender a utilizar o gt, consulte a documentação do pacote. Curiosidade: em 2023 a mesma equipe lançou a biblioteca gt para Python.\n\n\n\n\n5.4.6.2.1 Exercício\n\nNo arquivo \"aula-2.qmd\", crie um campo de código com uma tabela de frequência de pinguins por espécie e sexo, utilizando a base de dados penguins. Salve essa tabela de frequência em um objeto chamado pinguins_freq_especie_sexo.\nUtilizando o objeto criado, apresente essa tabela formatada com a função knitr::kable().\nExperimente adicionar outra tabela utilizando alguma função de tabela de outro pacote citado como extra, como flextable::flextable(), reactable::reactable(), ou gt::gt().\n\n\n\n\n5.4.6.3 Adicionar código em linha (inline code)\nAté agora, exploramos como adicionar conteúdos com código dentro de um campo de código. Mas e se quisermos adicionar um resultado de um código em um texto?\nNão é interessante adicionar manualmente conteúdos que podem ser gerados com código, pois isso pode tornar o documento menos reprodutível. Principalmente se os dados podem ser atualizados com o tempo!\nPara adicionar um resultado de um código em um texto, podemos utilizar o que chamamos de código em linha, ou inline code. Para isso, utilizamos a seguinte sintaxe:\n\nPor exemplo, o texto abaixo apresenta conteúdos feitos com campos de código:\n\nA base de dados penguins apresenta pinguins de três espécies: Adelie, Gentoo, Chinstrap. A base possui 344 observações e 8 (sendo que cada observação corresponde a um pinguim) variáveis: species, island, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, sex, year. A coleta de dados foi feita em três ilhas: Torgersen, Biscoe, Dream, entre os anos de 2007 e 2009.\n\nVocê consegue identificar onde foram utilizados os códigos em linha?\n\n\n\n\n\n\nClique para ver a resposta!\n\n\n\n\n\nOs conteúdos em destaque foram feitos com códigos em linha:\n\nA base de dados penguins apresenta pinguins de três espécies: Adelie, Gentoo, Chinstrap. A base possui 344 observações e 8 (sendo que cada observação corresponde a um pinguim) variáveis: species, island, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, sex, year. A coleta de dados foi feita em três ilhas: Torgersen, Biscoe, Dream, entre os anos de 2007 e 2009.\n\n\n\n\n\n\n\n\n\n\nClique para ver o código!\n\n\n\n\n\n\n\n\n\nDicas para adicionar conteúdos com código em linha:\n\nSe você vai escrever algo no texto que pode ser gerado com código, experimente utilizar o código em linha.\nA base de dados que você está utilizando pode ser atualizada futuramente? Se sim, busque adicionar conteúdos com códigos em linha.\nCaso algum conteúdo que você quer adicionar com código de linha dependa de um código “grande” (mais de uma linha), é interessante criar um campo de código, salvar o resultado em um objeto, e utilizar o código em linha para chamar o objeto.\n\n\n5.4.6.3.1 Exercícios\n\nAinda no arquivo \"aula-2.qmd\": utilizando a base de dados pnud_min do pacote abjData, escreva uma breve descrição da base de dados, utilizando códigos em linha. Ideias de conteúdos: número de observações, número de variáveis, variáveis presentes na base, quais são os anos presentes na base, quais são os municípios com o menor e maior indicador de IDH municipal para o ano mais recente, entre outros.\n\nCaso não conheça o pacote abjData, você pode carregar a base de dados com o código abaixo:\n\n# install.packages(\"abjData\") # executar caso não tenha o abjData instalado\nlibrary(abjData)\npnud_min\n\n# A tibble: 16,686 × 15\n   ano   muni_id muni_nm   uf_sigla regiao_nm  idhm idhm_e idhm_l idhm_r espvida\n   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;\n 1 1991  1100015 ALTA FLO… RO       Norte     0.329  0.112  0.617  0.516    62.0\n 2 1991  1100023 ARIQUEMES RO       Norte     0.432  0.199  0.684  0.593    66.0\n 3 1991  1100031 CABIXI    RO       Norte     0.309  0.108  0.636  0.43     63.2\n 4 1991  1100049 CACOAL    RO       Norte     0.407  0.171  0.667  0.593    65.0\n 5 1991  1100056 CEREJEIR… RO       Norte     0.386  0.167  0.629  0.547    62.7\n 6 1991  1100064 COLORADO… RO       Norte     0.376  0.151  0.658  0.536    64.5\n 7 1991  1100072 CORUMBIA… RO       Norte     0.203  0.039  0.572  0.373    59.3\n 8 1991  1100080 COSTA MA… RO       Norte     0.425  0.22   0.629  0.553    62.8\n 9 1991  1100098 ESPIGÃO … RO       Norte     0.388  0.159  0.653  0.561    64.2\n10 1991  1100106 GUAJARÁ-… RO       Norte     0.468  0.247  0.662  0.625    64.7\n# ℹ 16,676 more rows\n# ℹ 5 more variables: rdpc &lt;dbl&gt;, gini &lt;dbl&gt;, pop &lt;int&gt;, lat &lt;dbl&gt;, lon &lt;dbl&gt;\n\n\n\n\n\n\n5.4.7 Opções de campos de código (chunk options)\nOs campos de código, ou code chunks, são trechos de código que podem ser executados em documentos Quarto. Eles oferecem diversas opções para personalizar a execução e a exibição do código e dos resultados. Essas opções permitem configurar como o código aparece no relatório, como ele é executado e como os resultados são apresentados.\nAs opções devem ser apresentadas na linha após o início do campo de código, precedido de #|, no formato nome_opcao: valor. Por exemplo:\n```{r}\n#| nome_opcao: valor\n\n# código em R aqui\n1 + 1\n```\nExistem muitas opções de campos de código, e estão listadas na documentação do Quarto. Neste momento, vamos explorar algumas das principais opções!\n\n5.4.7.1 Exibir ou ocultar o código\nA opção echo: define se o código será exibido (ou não) no relatório. Por padrão, o código é exibido. Para ocultar o código, podemos adicionar echo: false no campo de código.\n\n\n5.4.7.2 Executar ou não o código\nA opção eval: define se o código será executado (ou não) no relatório. Por padrão, o código é executado. Para não executar o código, podemos adicionar eval: false no campo de código.\n\n\n5.4.7.3 Mensagens (message) e avisos (warning)\nAo executar um campo de código, mensagens e avisos podem ser gerados. Podemos controlar se essas mensagens e avisos serão exibidos no relatório com as opções message: e warning:. Por padrão, ambos são exibidos. Para ocultar as mensagens, podemos adicionar message: false no campo de código. Para ocultar os avisos, podemos adicionar warning: false.\n\n\n\n5.4.8 Tipos de formatos para exportar\nO Quarto permite exportar os documentos em diversos formatos, como HTML, PDF, Word, entre outros. Para definir o formato de saída, podemos adicionar um campo format nos metadados do documento. Por exemplo:\n\nHTML:\n\n---\nformat: html\n---\n\nWord:\n\n---\nformat: docx\n---\n\nPDF (é necessário ter alguma instalação de LaTeX no computador, veja as página de instalações):\n\n---\nformat: pdf\n---\n\nApresentação em HTML:\n\n---\nformat: revealjs\n---\nEssas são as opções de formatos mais utilizadas. Para ver a lista completa, consulte a documentação do Quarto.\n\n\n5.4.9 Projetos em Quarto\nEm breve\n\n\n5.4.10 Quarto CLI\nEm breve\n\n\n5.4.11 Extensões\nEm breve",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Produção de relatórios com Quarto</span>"
    ]
  },
  {
    "objectID": "relatorios.html#footnotes",
    "href": "relatorios.html#footnotes",
    "title": "5  Produção de relatórios com Quarto",
    "section": "",
    "text": "https://www.ime.usp.br/~pf/CWEB/lit-prog.html↩︎\nCuriosidade: o criador do pacote R Markdown, Yihui Xie, fez uma apresentação sobre a história do R Markdown no R-Day Brasil em 2021.↩︎",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Produção de relatórios com Quarto</span>"
    ]
  },
  {
    "objectID": "git-github.html",
    "href": "git-github.html",
    "title": "6  Introdução ao controle de versão com Git e GitHub",
    "section": "",
    "text": "Em breve!",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Introdução ao controle de versão com Git e GitHub</span>"
    ]
  },
  {
    "objectID": "texto-data.html",
    "href": "texto-data.html",
    "title": "7  Manipulação de textos e datas",
    "section": "",
    "text": "Em breve!",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Manipulação de textos e datas</span>"
    ]
  },
  {
    "objectID": "big-data.html",
    "href": "big-data.html",
    "title": "8  Introdução à Big Data",
    "section": "",
    "text": "Em breve!",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Introdução à *Big Data*</span>"
    ]
  },
  {
    "objectID": "programacao-funcional.html",
    "href": "programacao-funcional.html",
    "title": "9  Programação funcional",
    "section": "",
    "text": "Em breve!",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Programação funcional</span>"
    ]
  },
  {
    "objectID": "dados-espaciais.html",
    "href": "dados-espaciais.html",
    "title": "10  Dados espaciais",
    "section": "",
    "text": "Em breve!",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Dados espaciais</span>"
    ]
  }
]