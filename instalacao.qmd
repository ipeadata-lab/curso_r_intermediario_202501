---
title: "Instalações e outros preparativos"
code-annotations: hover
---

::: callout-important
Os softwares R e RStudio devem ser instalados antes do início do curso. Caso tenha alguma dúvida, consulte as [instruções de instalação do curso introdutório](https://ipeadata-lab.github.io/curso_r_intro_202409/00_instrucoes_pre_curso.html).
:::

## Instalação de pacotes

Para instalar os pacotes usados no curso, execute o seguinte código:

```{r}
#| eval: false

pacotes <- c("abjData", "arrow", "DBI", "dbplyr", "duckdb", "fletable", 
  "fs", "furrr", "future", "fuzzyjoin", "geobr", "gghighlight", 
  "ggspatial", "ggthemes", "gitcreds", "here", "here", "htmltools", 
  "janitor", "knitr", "leaflet", "mapview", "palmerpenguins", "parzer", 
  "quarto", "reactable", "renv", "renv", "RPostgres", "RSQLite", 
  "sf", "tidyverse", "tinytex", "usethis", "usethis", "vroom")

install.packages(pacotes) 
```

Nem todos os pacotes são essenciais para o acompanhamento do curso, alguns são úteis para exemplos mais específicos. 

Caso você tenha problemas com a instalação de algum pacote, tente seguir os passos abaixo:

- Verifique qual é o caminho onde o R está instalando os pacotes. Você pode fazer isso executando o seguinte comando no console do R:

```{r}
#| eval: false
.libPaths()
# > "/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library"
```


- Verifique se não está tentando instalar o pacote em uma pasta que está sincronizada com a nuvem (Google Drive, OneDrive, etc). Isso pode causar problemas na instalação de pacotes. 

- Reinicie o RStudio e tente instalar o pacote novamente.

- Veja a mensagem de erro e tente identificar o problema. 

- O erro indica que falta um pacote de dependência (ou seja, um pacote que o pacote que você está tentando instalar precisa)? Se sim, instale o pacote de dependência e tente instalar o pacote original novamente. As vezes precisamos realizar essa etapa mais de uma vez.

- Se você estiver utilizando o Windows, pode ser necessário instalar o [Rtools](https://cran.r-project.org/bin/windows/Rtools/).


- Se você estiver utilizando o Windows, delete o arquivo `00LOCK` na pasta de instalação de pacotes.

- Se você estiver utilizando o Linux ou MacOS, pode ser necessário instalar dependências de sistema. Procure por mensagens de erro que indiquem que você precisa instalar algo no sistema operacional (geralmente no terminal). A documentação de pacotes com dependências de sistema geralmente indica o que é necessário instalar.


- Se você não conseguir resolver o problema, peça ajuda para a equipe do curso.


## Instalação do TinyTeX

Para a aula de ["Produção de relatórios com Quarto"](relatorios.qmd), para exportar o relatório em PDF será necessário ter algum sistema de LaTeX instalado. O TinyTeX é uma versão mínima do LaTeX que é suficiente para o uso no curso.

Primeiramente, precisamos instalar o pacote `tinytex`:

```{r}
#| eval: false
install.packages('tinytex')
```

E então instalar o TinyTeX:

```{r}
#| eval: false
tinytex::install_tinytex()
```

## Instalação do Git {#instalar-git}

Para a aula de ["Introdução controle de versão com Git e GitHub"](git-github.qmd), é necessário ter o Git instalado.

O Git **não** é um pacote, e sim um software que deve ser instalado no seu computador.

Para instalar o Git, acesse a página oficial do [Git](https://git-scm.com/downloads) e siga as instruções de instalação para o seu sistema operacional.

[![](images/install-git.png){fig-align="center" width="100%"}](https://git-scm.com/downloads)

### O RStudio encontrou a instalação do Git?

Para verificar se o Git foi instalado corretamente, execute o seguinte comando no painel "Terminal" do RStudio:

```{bash}
git --version
```

Em alguns casos, o RStudio não encontra a instalação do Git automaticamente, e retorna uma mensagem de erro como a seguinte:

```         
> 'git' não é reconhecido como um comando interno ou externo,
um programa operável ou um arquivo em lotes.
```

Neste caso, é necessário informar ao RStudio onde o Git foi instalado. Para isso, abra o menu de configurações do RStudio (`Tools` -\> `Global Options`), selecione a aba `Git/SVN` e informe o caminho para o executável do Git em `Git executable`.

::: callout-tip
Atenção! O caminho para o executável depende do sistema operacional, e de onde o Git foi instalado. Você precisará procurar isso no seu computador!

Abaixo estão alguns exemplos de caminhos para o executável do Git, quando instalado nos locais padrão:

-   Windows: `C:/Program Files/Git/bin/git.exe`

-   macOS e Linux: `/usr/bin/git`

-   Para as pessoas utilizando o servidor do IPEA (substitua `r000000` pelo seu usuário): `C:/Users/r000000/AppData/Local/Programs/Git/bin/git.exe`
:::


![Configurações do RStudio para o Git](images/rstudio-git-config.png){fig-align="center" width="80%"}

## Conta no GitHub {#conta-github}

Para a aula de ["Introdução controle de versão com Git e GitHub"](git-github.qmd), é necessário ter uma conta no GitHub.

Caso ainda não tenha uma conta, acesse a página oficial do [GitHub](https://github.com/), clique em "Sign up" e crie uma conta gratuitamente.

![Página inicial do GitHub](images/github-home.png){fig-align="center" width="100%"}

![Página para criar a conta gratuitamente](images/github-signup.png){fig-align="center" width="100%"}

## Instalar o GitHub Desktop

Para a aula de ["Introdução controle de versão com Git e GitHub"](git-github.qmd), é recomendado instalar o GitHub Desktop, que é uma interface gráfica para o Git.

Para instalar o GitHub Desktop, acesse a página oficial do [GitHub Desktop](https://desktop.github.com/download/) e siga as instruções de instalação para o seu sistema operacional.

[![](images/install-github-desktop.png){fig-align="center" width="100%"}](https://desktop.github.com/)
