---
title: "Dados espaciais no R"
code-annotations: hover
execute:
  freeze: auto
  cache: true
lightbox: true  
---

Dados espaciais são dados que possuem uma localização geográfica associada, como coordenadas geográficas, endereços, códigos de municípios, entre outros.

A análise de dados espaciais é muito importante para diversas áreas, como planejamento urbano, planejamento ambiental, epidemiologia, entre outras.

Muitas vezes, são utilizados softwares *point-and-click* como o QGIS e o ArcGIS para análise de dados espaciais. No entanto, o R é uma ferramenta muito poderosa para análise de dados espaciais, pois podemos escrever scripts e reproduzir nossas análises, além de possuir diversos pacotes que facilitam a manipulação e visualização de dados geográficos.

Nesta aula, vamos apresentar uma introdução à manipulação de dados espaciais no R, utilizando o pacote [`{sf}`](https://r-spatial.github.io/sf/). Além disso, também exploraremos o pacote [`{geobr}`](https://ipeagit.github.io/geobr/), produzido pela equipe do IPEA.

Vamos carregar os pacotes necessários para a aula:

```{r}
#| message: false
#| warning: false
library(tidyverse) # <1>
library(geobr) # <2>
library(sf) # <3>
```
1. Carrega os pacotes dplyr, ggplot2, readr, entre outros
2. Carrega o pacote geobr, para importar dados espaciais do Brasil
3. Carrega o pacote sf, para manipulação de dados espaciais

::: {.callout-warning}

## Cuidado com a memória RAM!

Atenção: dados espaciais são mais pesados que dados tabulares (ou seja, arquivos simples com linhas e colunas). Se você estiver utilizando um computador com pouca memória RAM, pode ser que tenha problemas ao importar bases de dados espaciais.

Também evite usar a função `View()` para visualizar bases de dados espaciais, pois isso pode travar o RStudio.

:::

## Tipos de dados espaciais

Os modelos de dados espaciais são uma forma de representar o mundo real em um ambiente computacional.


Existem dois tipos principais de dados espaciais: vetoriais e raster (chamados também de matriciais). Nesta aula, nos concentraremos em dados vetoriais, porém vamos apresentar uma breve introdução aos dados raster.




[![Modelos de dados espaciais. Fonte: University of Washington](images/vetor-raster-mundo-real.jpeg)](https://guides.lib.uw.edu/)


### Dados matriciais (raster)

Os dados matriciais, ou raster, são uma forma de representar o mundo em uma grade contínua de células (ou uma matriz de células) de tamanho constante, onde cada célula possui um valor. Fazendo uma analogia, vamos imaginar um tabuleiro de xadrez, onde cada célula é uma unidade de informação, e cada célula tem um mesmo tamanho:


[![Analogia com o tabuleiro de xadrez. Fonte da imagem: Naurt](images/tabuleiro-de-xadrez.png)](https://www.naurt.com/blog-posts/naurt-raster-maps-vs-vector-maps)

No exemplo acima, cada célula do tabuleiro de xadrez possui um valor 1 ou 0, porém quando falamos de dados raster, cada célula pode possuir um valor contínuo.

Este tipo de formato é muito utilizado para imagens de satélite, modelos digitais de elevação, e mapas de uso e cobertura da terra.


A ilustração abaixo nos ajuda a conectar o conceito de *raster* e **imagens de satélite**:


[![Conceito de raster/dados matriciais. Imagem por: *National Ecological Observatory Network*](images/raster_concept.png)](https://www.neonscience.org/resources/learning-hub/tutorials/dc-raster-data-r)

Existem diversos pacotes no R que permitem a manipulação de dados raster, como o [`{terra}`](https://rspatial.github.io/terra/index.html) e [`{stars}`](https://r-spatial.github.io/stars/). No entanto, não abordaremos a manipulação de dados raster nesta aula.


### Dados vetoriais

Os dados vetoriais são representados por **pontos**, **linhas** e **polígonos**:

- **Pontos**: representam um local específico no espaço, como uma coordenada geográfica. Por exemplo: um ponto de coleta de dados, a localização de uma escola.

- **Linhas**: representam uma sequência de pontos conectados. Por exemplo: uma estrada, um rio.

- **Polígonos**: representam uma delimitação de uma área. Por exemplo: um município, um estado, um país.


A imagem abaixo apresenta um exemplo de dados vetoriais, onde temos pontos, linhas e polígonos, representando o município de Osasco - SP:

![Exemplo de dados vetoriais: Osasco. Elaborado por Beatriz Milz, com dados do pacote `{geobr}` e [DNIT](https://www.gov.br/transportes/pt-br/assuntos/dados-de-transportes/bit/bit-mapas).](images/exemplo-vetorial-osasco.png)

No R, podemos manipular dados vetoriais utilizando o pacote [`{sf}`](https://r-spatial.github.io/sf/). Vamos explorar um pouco mais sobre esse pacote na próxima seção.

    

## Pacote `{sf}`

<img src="images/sf-logo.png" class="img-rstudio" align="right" width="120px"/>

O pacote [`{sf}`](https://r-spatial.github.io/sf/) (*Simple Features for R*) é um dos principais pacotes para manipulação de dados espaciais no R. Ele é um pacote que implementa classes e métodos para manipulação de dados espaciais, e é baseado no padrão [Simple Features](https://en.wikipedia.org/wiki/Simple_Features).

::: {.callout-warning}

## Problemas de instalação?

O pacote `{sf}` possui dependências que são instalados no computador (e não no R), e que podem ser um pouco complicadas de instalar para quem utiliza **MacOS e Linux**.

Observe que, ao carregar o pacote `{sf}`, uma mensagem é apresentada, com informações sobre as dependências:

```{r}
#| eval: false
library(sf)
# > Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0;
# sf_use_s2() is TRUE
```

Se você tiver problemas para instalar, tente instalar o pacote diretamente do GitHub:

```{r}
#| eval: false
install.packages("remotes") #<1>
remotes::install_github(repo = "r-spatial/sf") # <2>
```
1. Instala o pacote `remotes`, que permite instalar pacotes diretamente do GitHub.
2. Instala o pacote `sf` diretamente do GitHub.

Caso ainda tenha problemas, consulte as [instruções de instalação na documentação oficial do pacote](https://r-spatial.github.io/sf/#installing).



:::




O pacote `{sf}` apresenta um novo tipo de classe: `sf`. A classe `sf` costuma estar associada a um objeto do tipo `data.frame`, onde uma das colunas é do tipo `geometry`, que armazena as informações espaciais (pontos, linhas ou polígonos).

Portanto, ao trabalhar com esse pacote, teremos tabelas similares a um `data.frame`, mas com uma coluna adicional que armazena as informações espaciais. A figura abaixo ajuda a ilustrar essa ideia:

[![Imagem por Allison Horst](images/sf_horst.png){fig-align="center" width="90%"}](https://github.com/allisonhorst/stats-illustrations)


### Importação de dados espaciais

Ao trabalhar com dados espaciais, é comum importar arquivos no formato `shapefile` (`.shp`),  `geopackage` (`.gpkg`),  `GeoJSON`, entre outros. Porém, em alguns casos, podemos ter dados espaciais em outros formatos, como um arquivo `.csv` que contém coordenadas geográficas (latitude e longitude).

Vamos explorar alguns exemplos de importação de dados espaciais utilizando o pacote `{sf}`.

#### Importação de arquivos de dados espaciais

Para importação de arquivos de dados espaciais, podemos utilizar a função `st_read()`. Esta função é capaz de ler diversos formatos de arquivos, como `shapefile` (`.shp`),  `geopackage` (`.gpkg`),  `GeoJSON`, entre outros.

Neste exemplo, vamos importar dados de rodovias do Distrito Federal, disponibilizados pelo [DNIT](https://www.gov.br/transportes/pt-br/assuntos/dados-de-transportes/bit/bit-mapas)[^1].

[^1]: Os dados originalmente são disponibilizados em `.shp`, com registros de rodovias para todo o Brasil. Porém os dados foram convertidos para o formato `geopackage`, e filtrados apenas para o DF, para deixar o arquivo mais leve e facilitar o exemplo. Caso queira acessar os dados originais, faça o download do arquivo `.zip` disponível no site do [DNIT](https://www.gov.br/transportes/pt-br/assuntos/dados-de-transportes/bit/bit-mapas) (em Rodovias -> Base georreferenciada), descompacte o arquivo e utilize o arquivo `.shp` para a leitura com a função `read_sf()`.

```{r}
arquivo_dnit_df <- "https://github.com/ipeadata-lab/curso_r_intermediario_202501/raw/refs/heads/main/dados/shapefiles/dnit/dnit_df.gpkg"

rodovias_df <- read_sf(arquivo_dnit_df)
```





Vamos explorar as colunas do objeto `rodovias_df`:

```{r}
glimpse(rodovias_df)
```

Perceba que o objeto `rodovias_df` é um objeto do tipo `sf`, e possui informações sobre a geometria (tipo de geometria, dimensão, *bounding box* e sistema de referência de coordenadas):
```{r}
#| eval: false
rodovias_df

# Simple feature collection with 128 features and 28 fields
# Geometry type: LINESTRING
# Dimension:     XY
# Bounding box:  xmin: -48.25963 ymin: -16.05217 xmax: -47.3186 ymax: -15.50038
# Geodetic CRS:  SIRGAS 2000
```


::: {.callout-note}
## CRS - Sistema de referência de coordenadas
O sistema de referência de coordenadas (CRS - *Coordinate Reference System*) é uma informação importante, pois define como as coordenadas geográficas são representadas. No exemplo acima, o CRS é [`SIRGAS 2000`](https://epsg.io/4674), que é um sistema de referência utilizado no Brasil. 

Cada CRS também possui um código chamado EPSG, que é um identificador único para cada sistema de referência de coordenadas, e pode ser consultado no site [epsg.io](https://epsg.io/). O EPSG para o CRS SIRGAS 2000 é 4674.

A função `sf::st_crs(objeto_sf)` permite consultar o CRS de um objeto do tipo `sf`:

```{r}
#| eval: false
sf::st_crs(rodovias_df)

# Coordinate Reference System:
#   User input: SIRGAS 2000 
#   wkt:
# GEOGCRS["SIRGAS 2000",
#     DATUM["Sistema de Referencia Geocentrico para las AmericaS 2000",
#         ELLIPSOID["GRS 1980",6378137,298.257222101,
#             LENGTHUNIT["metre",1]]],
#     PRIMEM["Greenwich",0,
#         ANGLEUNIT["degree",0.0174532925199433]],
#     CS[ellipsoidal,2],
#         AXIS["geodetic latitude (Lat)",north,
#             ORDER[1],
#             ANGLEUNIT["degree",0.0174532925199433]],
#         AXIS["geodetic longitude (Lon)",east,
#             ORDER[2],
#             ANGLEUNIT["degree",0.0174532925199433]],
#     USAGE[
#         SCOPE["Horizontal component of 3D system."],
#         AREA["Latin America - Central America and South America - onshore and offshore. Brazil - onshore and offshore."],
#         BBOX[-59.87,-122.19,32.72,-25.28]],
#     ID["EPSG",4674]]
```

A função `sf::st_transform(objeto_sf, crs = ...)` permite alterar o CRS de um objeto do tipo `sf`. Por exemplo, para alterar o CRS para `WGS 84` (EPSG 4326), podemos fazer:

```{r}
#| eval: false
rodovias_sf_wgs84 <- sf::st_transform(rodovias_df, crs = 4326)
rodovias_sf_wgs84

# Simple feature collection with 128 features and 28 fields
# Geometry type: LINESTRING
# Dimension:     XY
# Bounding box:  xmin: -48.25963 ymin: -16.05217 xmax: -47.3186 ymax: -15.50038
# Geodetic CRS:  WGS 84
```
:::


O pacote `ggplot2` apresenta a geometria `geom_sf()` para visualização de dados espaciais. Vamos visualizar no mapa o que foi importado:

```{r}
#| label: sf-ggplot2-rodovias-df
ggplot() +
  geom_sf(data = rodovias_df)
```



#### Coordenadas como texto

Neste exemplo, vamos utilizar um arquivo `.csv` que contém coordenadas de latitude e longitude, e então vamos transformar esses dados em um objeto do tipo `sf`.

Os dados que vamos utilizar são da base de dados de [Classificação Nacional de Barragens de Mineração](https://app.anm.gov.br/SIGBM/Publico/ClassificacaoNacionalDaBarragem), disponiblizada pela Agência Nacional de Mineração (ANM).

```{r}
#| message: false
#| warning: false
caminho_arquivo <- "https://github.com/ipeadata-lab/curso_r_intermediario_202501/raw/refs/heads/main/dados/sigbm_20252118.csv"

dados_sigbm <- read_csv2(caminho_arquivo)
```

Vamos visualizar as primeiras linhas do arquivo:

```{r}
glimpse(dados_sigbm)
```

Perceba que as colunas `LatitudeFormatada` e `LongitudeFormatada` estão no formato de texto, e não número.


Para transformar essas colunas em coordenadas geográficas, podemos utilizar funções do pacote `{parzer}`, para fazer o *parse* de coordenadas geográficas:

```{r}
dados_sigbm_parzer <- dados_sigbm |> 
  mutate(
    lat = parzer::parse_lat(LatitudeFormatada),
    lon = parzer::parse_lon(LongitudeFormatada)
  )

glimpse(dados_sigbm_parzer)
```

Perceba que agora temos as colunas `lat` e `lon` no formato numérico, que representam as coordenadas geográficas. Com essas colunas, podemos criar um objeto do tipo `sf`, utilizando a função `st_as_sf()`, e informando nos argumentos: 1) `coords` o nome das colunas  que representam as coordenadas geográficas; e 2) `crs` o sistema de referência de coordenadas (CRS, *Coordinate Reference System*).

```{r}
dados_sigbm_sf <- st_as_sf(dados_sigbm_parzer,
                           coords = c("lon", "lat"),
                           crs = 4674)
```

Observe a classe do objeto `dados_sigbm_sf`:
```{r}
class(dados_sigbm_sf)
```


Ao transformar os dados em um objeto do tipo `sf`, o objeto apresentará informações sobre: tipo de geometria (ponto, linha, polígono), a dimensão, o *bouding box* (limites do quadrante onde nossos dados estão contidos), e o sistema de referência de coordenadas (CRS).

```{r}
#| eval: false
dados_sigbm_sf

# Simple feature collection with 919 features and 23 fields
# Geometry type: POINT
# Dimension:     XY
# Bounding box:  xmin: -63.62128 ymin: -30.91978 xmax: -36.29974 ymax: 2.321194
# Geodetic CRS:  WGS 84
```


Agora que temos um objeto do tipo `sf`, podemos visualizar esses dados em um mapa. Para isso, vamos utilizar a função `geom_sf()` do pacote `{ggplot2}`:

```{r}
#| label: sf-ggplot2-sigbm
dados_sigbm_sf |> 
  ggplot() +
  geom_sf() +
  facet_wrap(vars(SituacaoNivelEmergencial))
```


## Introdução ao pacote `{geobr}`

<img src="images/logo-geobr.png" class="img-rstudio" align="right" width="120px"/>

O pacote [`{geobr}`](https://ipeagit.github.io/geobr/) disponibiliza funções para obter diversas bases de dados espaciais oficiais do Brasil. Este pacote está disponível para `R` e `Python`.

O pacote foi desenvolvido e é mantido pela equipe do [Instituto de Pesquisa Econômica Aplicada (IPEA)](https://www.ipea.gov.br/portal/).

```{r}
library(geobr)
```


### Principais funções

O pacote `{geobr}` possui diversas funções para baixar bases de dados espaciais do Brasil.

A função `list_geobr()` retorna uma tabela com informações sobre as bases de dados disponíveis no pacote: 

```{r}
#| echo: false
geobr::list_geobr() |> 
 dplyr::select(-years) |>  
  knitr::kable()
```


Em algumas funções, podemos passar argumentos para filtrar os dados que queremos baixar. Por exemplo, a função `read_municipality()` permite baixar a delimitação de um município específico, passando o código do IBGE do município como argumento. 


::: {.callout-tip}
## Como saber o código IBGE de um município?

Existe uma função no pacote `{geobr}`, chamada `lookup_muni()`, que permite buscar o código IBGE de um município pelo nome (ou também consultar o nome do município a partir de um código!). Por exemplo:

```{r}
lookup_muni(name_muni = 'fortaleza')

lookup_muni(code_muni = 4106902)
```



Você também pode consultar o código IBGE de um município no site do [IBGE](https://www.ibge.gov.br/explica/codigos-dos-municipios.php).

[![](images/codigo-muni.png){fig-align="center"
width="80%"}](https://www.ibge.gov.br/explica/codigos-dos-municipios.php)

:::

A seguir, estão as funções que apresentam a delimitação do Brasil, seus estados e municípios:

- `read_country()`: Delimitação do Brasil.

- `read_state()`: Delimitação dos estados do Brasil.

- `read_state("SP")`: Delimitação de um estado específico, usando a sigla como argumento.

- `read_municipality()`: Delimitação de todos os municípios do Brasil.  É uma base pesada!

- `read_municipality(code_muni = 3550308)`: Delimitação de um município específico, usando o código do IBGE do município.

### Dica: armazenar uma cópia dos dados

O pacote `{geobr}` faz o download das bases de dados. Isso significa que você precisa estar conectado à internet para baixar as bases de dados. Caso o servidor onde os dados estão armazenados esteja fora do ar, ou você esteja com problemas de conexão de internet, você não conseguirá baixar as bases de dados.
    
Uma sugestão é salvar os resultados em um arquivo após baixar os dados, para evitar ter que baixar novamente, com a função `readr::write_rds()`. Por exemplo:


1) Lendo a delimitação dos estados:

```{r}
#| eval: false
estados_br <- read_state() 
# Using year/date 2010
# Download status: 27 done; 0 in progress. Total size: 4.19 Mb (287%)... done!  
```

2) Salvando os dados obtidos em formato `.rds`:

```{r}
#| eval: false
write_rds(estados_br, "dados/geobr/estados_br.rds")
```


3) Carregando a delimitação dos estados quando necessário:

```{r}
estados_br <- read_rds("dados/geobr/estados_br.rds")
```

Com o objeto `estados_br`, podemos utilizar a função `geom_sf()` do pacote `{ggplot2}` para visualizar a delimitação dos estados brasileiros:

```{r}
#| label: sf-ggplot2-estados-br
ggplot() +
  geom_sf(data = estados_br)
```

## Criação de mapas temáticos

Mapas temáticos são mapas que representam um fenômeno geográfico, como a distribuição de uma variável em um território.

Para criar mapas temáticos, podemos utilizar a função `geom_sf()` do pacote `{ggplot2}`, e mapear uma variável para a cor de preenchimento (`fill`) ou cor do contorno (`color`) das geometrias.

Além disso, é comum utilizar mais que uma camada de informação no mapa, como a delimitação de estados, municípios, rodovias, entre outros.

Para explorar alguns conceitos úteis, vamos criar um mapa temático com a base de dados `voos`. Para isso, vamos importar a base de dados `voos` (utilizada em aulas anteriores):

```{r}
#| message: false
#| warning: false
voos <- read_csv2("dados/voos_dez-2024-alterado.csv")
```

Vamos sumarizar os dados, e contar a quantidade de voos por estado de origem e destino:

```{r}
dados_origem <- voos |>
  count(sg_uf_origem) |> # <1>
  rename(estado = sg_uf_origem, n_voos = n) |> # <2>
  mutate(referencia = "Origem") # <3>

dados_destino <- voos |>
  count(sg_uf_destino) |> # <4>
  rename(estado = sg_uf_destino, n_voos = n) |> # <5>
  mutate(referencia = "Destino") # <6>

base_contagem_voos_uf <- bind_rows(dados_origem,
                                   dados_destino) |> # <7>
  drop_na(estado) # <8>
```
1. Conta o número de voos por estado de origem
2. Renomeia as colunas para padronizar os nomes
3. Adiciona uma coluna indicando que são dados de origem
4. Conta o número de voos por estado de destino
5. Renomeia as colunas para padronizar os nomes
6. Adiciona uma coluna indicando que são dados de destino
7. Une as bases de dados de origem e destino
8. Remove linhas cujo estado é `NA`


Porém, para criar um mapa temático, precisamos de uma base de dados espaciais. Observe que não temos a coluna `geometry` na base de dados `base_contagem_voos_uf`:

```{r}
glimpse(base_contagem_voos_uf)
```

Vamos utilizar a função `read_state()` do pacote `{geobr}` para obter a delimitação dos estados brasileiros, e então vamos fazer um *join* com a base de dados `base_contagem_voos_uf`:

```{r}
#| eval: false
estados_br <- read_state()
```
```{r}
dados_voos_unidos <- full_join(
  estados_br, 
  base_contagem_voos_uf,
  by = c("abbrev_state" = "estado")
)
```

Para criar um mapa temático, vamos mapear a variável do número de voos para a cor de preenchimento das geometrias:

```{r}
#| label: sf-ggplot2-voos-1
ggplot() +
  geom_sf(data = dados_voos_unidos, aes(fill = n_voos)) +
  facet_wrap(vars(referencia))
```


Criamos um mapa simples, porém podemos melhorar a visualização!


Muitas vezes, é interessante adaptar os dados para melhorar a visualização. Por exemplo, podemos criar categorias para a quantidade de voos, e mapear essas categorias para a cor de preenchimento das geometrias:

```{r}
dados_voos_arrumados <- dados_voos_unidos |>
  mutate(
    referencia = factor(referencia, labels = c("Origem", "Destino")),
    categoria_n_voos = cut(
      n_voos,
      breaks = c(0, 100, 500, 1000, 5000, 10000, 15000,
                 20000, 25000, Inf),
      labels = c(
        "0-100",
        "101-500",
        "501-1.000",
        "1.001-5.000",
        "5.001-10.000",
        "10.001-15.000",
        "15.001-20.000",
        "20.001-25.000",
        "25.001 ou mais"
      )
    )
  ) 
```


Com os dados arrumados, podemos criar um mapa mais interessante:

```{r}
#| label: sf-ggplot2-voos-2
mapa_voos <- ggplot() +
  geom_sf(data = dados_voos_arrumados, aes(fill = categoria_n_voos)) +
  facet_wrap(vars(referencia)) +
  theme_minimal() +
  labs(title = "Quantidade de voos por estado, em Dezembro/2024",
       fill = "Número de voos", 
       caption = "Dados obtidos com o pacote flightsbr do R.") +
  theme(legend.position = "bottom",
        axis.text.y = element_text(angle = 90)) +
  scale_fill_viridis_d() 

mapa_voos
```

É possível ir além, e adicionar elementos como o Norte, a escala, entre outros. Para isso, podemos utilizar o pacote `{ggspatial}`:

```{r}
#| label: sf-ggplot2-voos-3
mapa_voos +
  ggspatial::annotation_scale() +
    # Adiciona o Norte Geográfico
  ggspatial::annotation_north_arrow(
    location = "bl",
    which_north = "true",
    pad_x = unit(0.5, "cm"),
    pad_y = unit(0.8, "cm"),
    height = unit(1, "cm"),
    width = unit(1, "cm")
  )
```
Neste exemplo, exploramos elementos que te ajudarão a criar mapas temáticos com outros dados!

::: {.callout-note}

## Pacote tmap

Existem outros pacotes que permitem fazer visualizações com dados espaciais, como o [`{tmap}` - *thematic maps in R*](https://r-tmap.github.io/tmap/).

Veja um exemplo de como criar um mapa temático com o pacote `{tmap}`, com os mesmos dados explorados no exemplo acima (filtrados para origem): 

```{r}
#| label: exemplo-tmap
library(tmap)
dados_voos_arrumados |>
  filter(referencia == "Origem") |>
  tm_shape() +
  tm_polygons(
    fill = "n_voos",
    fill.scale = tm_scale_intervals(
      # tipos de quebras: fixed, sd, equal, pretty, quantile, fisher, jenks
      style = "jenks",
      # quantidade de classes
      n = 10,
      # paleta de cores
      values = "pu_gn_div"
    )
  )
```

:::




## Visualização interativa

Utilizando objetos do tipo `sf`, vimos que é possível criar mapas estáticos com `ggplot2`.


No entanto, é possível criar visualizações interativas, com o pacote [`{mapview}`](https://r-spatial.github.io/mapview/).


Vamos criar um mapa interativo com a base de dados `dados_sigbm_sf`:

```{r}
#| label: sf-mapview-sigbm

mapview::mapview(dados_sigbm_sf) 
```
Para visualizar grandes bases de dados espaciais, é interessante rodar a opção a seguir antes de criar o mapa. Para que isso funcione, é necessário ter o pacote `leafgl` instalado.

```{r}
#| eval: false
# install.packages("leafgl")
# Configura a opção
mapview::mapviewOptions(platform = 'leafgl')

# Visualiza o mapa
mapview::mapview(dados_sigbm_sf) 
```


## Geoprocessamento básico 

O geoprocessamento permite realizar operações espaciais, como filtro, interseção e cálculo de distâncias entre objetos geográficos.
O pacote `{sf}` oferece diversas funções para essas tarefas.

A *cheatsheet* (ou folha de cola) do pacote `{sf}` apresenta diversas as principais funções do pacote. Você pode acessar a *cheatsheet* [neste link](https://github.com/rstudio/cheatsheets/blob/main/sf.pdf).


::: {layout-ncol=2}
![Cheatsheet - Página 1](images/sf_page-0001.jpg)

![Cheatsheet - Página 2](images/sf_page-0002.jpg)
:::


Essa área também é muito ampla, então vamos apresentar apenas algumas funções básicas do pacote `{sf}`.
 

### Simplificação de geometrias

Em alguns casos, como quando temos bases de dados muito grandes e limitação de memória RAM, podemos simplificar as geometrias, para reduzir a complexidade dos dados. A função `st_simplify()` permite simplificar geometrias, e é importante observar o argumento `dTolerance`que permite controlar o nível de generalização das unidades do mapa. 

```{r}
#| label: sf-simplify
estados_br_simplificado <- st_simplify(estados_br,
                                       dTolerance = 1000)


ggplot() +
  geom_sf(data = estados_br_simplificado)
```


Mas atenção: a simplificação pode alterar a forma das geometrias, então é importante tomar cuidado com o valor de `dTolerance` para não simplificar demais.

```{r}
#| label: sf-simplify-exagerado
estados_br_simplificado_exagerado <- st_simplify(estados_br,
                                                 dTolerance = 100000)


ggplot() +
  geom_sf(data = estados_br_simplificado_exagerado)
```
### Filtro e interseção espacial

Caso o objetivo é fazer um filtro utilizando algum atributo que está na tabela, podemos utilizar a função `filter()` do pacote `{dplyr}`. Por exemplo, para filtrar os estados de Minas Gerais:

```{r}
estado_mg <- estados_br |> 
  filter(abbrev_state == "MG")
```

Porém, muitas vezes queremos fazer filtros com objetos espaciais. Neste caso, podemos utilizar funções do pacote `{sf}`.

O exemplo abaixo utiliza os dados de barragens de mineração no Brasil (`dados_sigbm_sf`), e filtra as barragens que estão localizadas no estado de Minas Gerais, utilizando a função `st_filter()`:

```{r}
sigbm_mg <- st_filter(dados_sigbm_sf, estado_mg)

ggplot() +
  geom_sf(data = estado_mg) +
  geom_sf(data = sigbm_mg)
```

Perceba que a função `st_filter()` retorna um objeto do tipo `sf`. Essa função filtra as geometrias inteiras que têm algum ponto dentro da área de interesse. Se uma linha ou polígono tiver pelo menos um ponto dentro do município, ele será mantido inteiro. Portanto, essa função não modifica a geometria original, apenas faz um filtro.

Outra operação espacial muito comum é a interseção entre geometrias. A função `st_intersection()` permite retornar a interseção entre duas geometrias. 

Para este exemplo, vamos carregar a base de dados de rodovias de São Paulo, disponibilizada pelo DNIT:

```{r}
caminho_dnit_sp <- "https://github.com/ipeadata-lab/curso_r_intermediario_202501/raw/refs/heads/main/dados/shapefiles/dnit/dnit_sp.gpkg"

rodovias_sp <- read_sf(caminho_dnit_sp)
```

Vamos também carregar o limite do município de Osasco:

```{r}
#| echo: false
municipio_osasco <- read_sf("https://github.com/ipeadata-lab/curso_r_intermediario_202501/raw/refs/heads/main/dados/geobr/osasco-sp.gpkg")
```


```{r}
#| eval: false
municipio_osasco <- read_municipality(code_muni = 3534401)
```

Vamos visualizar as geometrias:

```{r}
#| label: sf-ggplot2-intersecao-1

ggplot() +
  geom_sf(data = rodovias_sp) +
  geom_sf(data = municipio_osasco, color = "red")
```

E se a gente quiser saber quais rodovias estão dentro do município de Osasco? Podemos utilizar a função `st_intersection()`:


```{r}
#| label: sf-ggplot2-intersecao-2
intersection_rodovia_osasco <- st_intersection(rodovias_sp, municipio_osasco)

ggplot() +
  geom_sf(data = municipio_osasco, color = "red") +
  geom_sf(data = intersection_rodovia_osasco) 
```

Essa função retorna apenas a parte da geometria que efetivamente cruza a outra. Se uma linha ou polígono estiver parcialmente dentro da área de interesse, ele será **cortado** na interseção. Essa função é útil quando se deseja manter apenas os trechos de linhas ou polígonos que estão dentro do limite espacial.

Caso você queira manter a geometria original, lembre-se que podemos usar a função `st_filter()`: ela mantém a geometria original, mas filtra as linhas ou polígonos que estão dentro da área de interesse.

```{r}
#| label: sf-ggplot2-filter-2
filter_rodovia_osasco <- st_filter(rodovias_sp, municipio_osasco)

ggplot() +
  geom_sf(data = municipio_osasco, color = "red") +
  geom_sf(data = filter_rodovia_osasco) 
```


### Cálculo de distâncias e áreas

A função `st_area()` permite calcular a área de uma geometria, e a função `st_distance()` permite calcular a distância entre duas geometrias.

Por exemplo, podemos calcular a área do polígono do município de Osasco:

```{r}
area_municipio_osasco <- st_area(municipio_osasco)
area_municipio_osasco
```
Também podemos calcular a área de vários polígonos ao mesmo tempo, como os estados brasileiros. A função `st_area()` retorna um vetor com a área de cada polígono:

```{r}
estados_br$area_estado_m2 <- st_area(estados_br)
```

Por padrão, a função `st_area()` retorna a área em metros quadrados.

Também podemos calcular a distância entre dois pontos. Por exemplo, vamos calcular a distância entre as duas barragens com maior volume atual:

```{r}
barragens_alto_volume <- sigbm_mg |> 
  slice_max(order_by = VolumeAtualFormatado, n = 2) 

st_distance(barragens_alto_volume[1, ], 
            barragens_alto_volume[2, ], by_element = TRUE)
```
Caso seja informado um conjunto de pontos, a função `st_distance()` retorna uma matriz de distâncias entre todos os pontos. Por exemplo:

```{r}
matriz_de_distancias <- st_distance(head(sigbm_mg))

matriz_de_distancias
```

## Conclusão

A análise de dados espaciais e o geoprocessamento são áreas muito amplas, e o objetivo desta aula foi apresentar uma introdução!

Nesta aula, aprendemos sobre o pacote `{sf}`, que é um dos principais pacotes para manipulação de dados espaciais no R. Vimos como importar dados espaciais, criar mapas temáticos, realizar geoprocessamento básico e visualização interativa.



## Material complementar

- [Livro Geocomputation with R](https://r.geocompx.org/)
- [Capítulo 15 - Dados geoespaciais, livro Análises Ecológicas no R](https://analises-ecologicas.com/cap15)
  - Workshop [Trabalhando com dados espaciais no R](https://beamilz.com/talks/pt/2023-12-dados-espaciais/), por Beatriz Milz e Laís Brasileiro.

- Dados Raster:
  - [Spatial Data Science](https://rspatial.org/).
  - [Tutorial: Raster 00: Intro to Raster Data in R](https://www.neonscience.org/resources/learning-hub/tutorials/dc-raster-data-r), escrito pelo *National Ecological Observatory Network*.
  - [Pacote `{getSpatialData}`](https://jakob.schwalb-willmann.de/getSpatialData/), para obter dados raster.
  - [`{terra}`](https://rspatial.github.io/terra/index.html) - Pacote para trabalhar com dados raster.
  - [`{stars}` - Spatiotemporal Arrays: Raster and Vector Datacubes](https://r-spatial.github.io/stars/) - pacote para trabalhar com dados raster, especialmente com dados espaço-temporais.


- Dados Vetoriais:
  - [Pacote `{parzer}`](https://docs.ropensci.org/parzer/) - Pacote para ajudar a limpar coordenadas geográficas para o formato que o R entende.
  - [Pacote `{sf}`](https://r-spatial.github.io/sf/) - Pacote para manipulação de dados espaciais.
  - [Pacote `{geobr}`](https://ipeagit.github.io/geobr/) - Pacote para baixar dados geográficos do Brasil.
  - Workshop [Conhecendo o pacote geobr](https://beamilz.com/talks/pt/2024-09-amostra-ime-usp-geobr/), por Beatriz Milz.
  
- Visualização de dados espaciais:
  - [Pacote `{leaflet}`](https://rstudio.github.io/leaflet/) - Pacote para visualização interativa de mapas.
  - [Pacote `{ggplot2}` - Geometria `geom_sf`](https://ggplot2.tidyverse.org/reference/ggsf.html) - Geometria específica para dados espaciais.
  - [Pacote `{tmap}`](https://r-tmap.github.io/tmap/) - Pacote para visualização de dados espaciais.
  
  
- Aplicações:
  - [Livro "Introdução à acessibilidade urbana"](https://ipeagit.github.io/intro_access_book/pt/)
  - [Texto: Criando mapas com os pacotes tidyverse e geobr](https://beamilz.com/posts/2020-07-27-criando-mapas-com-os-pacotes-tidyverse-e-geobr/pt/), por Beatriz Milz.
  - [Texto: Drawing waterlines with ggplot2 in R](https://www.brunomioto.com/posts/waterlines/en/), por Bruno Mioto.