---
title: "Reprodutibilidade e estruturação de projeto"
code-annotations: hover

# Rproject (retomar, começar)
# 
# GitHub (explicar controle de versão, conceitos como commit/pull/push, conectar o rstudio e o github, pull request**, mostrar no RStudio mas mencionar que dá para usar com outras ferramentas, como o GitHub Extensions e GitHub Desktop)
# 
#  renv (explicar, mas não demora muito)
# 
#  targets** (explicar que existe, mostrar um exemplo de projeto que usa o targets)
---

Nesta aula, o objetivo é apresentar o conceito de reprodutibilidade, e apresentar abordagens e ferramentas para estruturar projetos em ciência de dados, buscando garantir a reprodutibilidade dos resultados.

## Introdução à Reprodutibilidade

> "Reprodutibilidade é como escovar os dentes. Isso é bom para você, mas leva tempo e esforço. Depois de aprender, torna-se um hábito". - Irakli Loladze, em pesquisa conduzida por Baker [-@Baker2016].

A reprodutibilidade é um conceito central na ciência, embora não tenha uma definição única e comum [@gundersen2021reproducibility]. Ao fazer um levantamento sobre o conceito de reprodutibilidade, Gundersen [-@gundersen2021reproducibility] elaborou a seguinte definição:

> "Reproducibility is the ability of independent investigators to draw the same conclusions from an experiment by following the documentation shared by the original investigators."

Tradução livre:

> "Reprodutibilidade é a capacidade de investigadores independentes chegarem às mesmas conclusões de um experimento ao seguir a documentação compartilhada pelos investigadores originais."

A definição prática de reprodutibilidade é frequentemente associada à capacidade de reproduzir os resultados de uma pesquisa a partir dos dados brutos e do código utilizado.

De acordo com Baker [-@Baker2016], a partir de um questionário realizado pela revista *Nature* sobre reprodutibilidade com mais de 1500 pesquisadores, vários fatores contribuem para pesquisas não reprodutíveis, como a não disponibilização de códigos, métodos e dados brutos. A figura abaixo apresenta os fatores mais citados pelos respondentes:

![Fatores que contribuem para pesquisas não reprodutíveis. Fonte: @Baker2016.](images/irreproducible.png){fig-align="center" width="60%"}

### Exercício

1)  Reflita sobre a seguinte pergunta: Como você acha que a reprodutibilidade está relacionada ao seu trabalho? Se possível, discuta em grupo e posteriormente compartilhe com a turma suas ideias.

## Boas práticas em projetos de análise de dados

Para aumentar a chance de desenvolver um projeto de análise de dados que seja reprodutível, algumas boas práticas podem ser adotadas, como:

-   não utilizar caminhos absolutos[^reprodutibilidade-1]

-   evitar o uso de caracteres especiais em caminhos, variáveis e nomes de colunas[^reprodutibilidade-2]

-   armazenar os arquivos de maneira consistente

-   registrar quais são as dependências (versões do R e dos pacotes utilizados)

-   documentar as análises realizadas

-   controlar as versões dos arquivos por meio de ferramentas como o Git e GitHub.

-   compartilhamento de dados brutos, códigos e documentação

[^reprodutibilidade-1]: Os conceitos diretório de trabalho, caminhos absolutos e caminhos relativos foram abordados na aula sobre [diretórios de trabalho e projetos](https://ipeadata-lab.github.io/curso_r_intro_202409/01_1_rproj.html) do curso "[Introdução à análise de dados no R](https://ipeadata-lab.github.io/curso_r_intro_202409/)".

[^reprodutibilidade-2]: Caso queira revisar este tópico, recomendamos a leitura da seção sobre [boas práticas para nomear objetos no R](https://ipeadata-lab.github.io/curso_r_intro_202409/02_conceitos_basicos_r.html#boas-pr%C3%A1ticas-para-nomear-objetos-no-r) do curso "[Introdução à análise de dados no R](https://ipeadata-lab.github.io/curso_r_intro_202409/)".

Uma prática que pode ajudar a checar a reprodutibilidade de uma análise de dados é solicitar que outra pessoa que trabalha com você tente reproduzir os resultados a partir dos códigos, dados brutos e documentação [@Markowetz2015].

### Exercício

1)  Você já teve alguma experiência em que a falta de reprodutibilidade foi um problema? Se sim, o que você aprendeu com essa experiência?

2)  Considerando a seguir e a discussão feita em sala, o que você mudaria no código a seguir?

```{r}
#| eval: false
#| echo: true
library(tidyverse)
data <- read_rds("C:/Users/usuario/Downloads/sidra_4092_arrumado.rds")
dados <- dados |>
  filter(ano == max(ano))
dados |>
  group_by(uf) |>
  mutate(diferenca = perc_desocupacao - last(perc_desocupacao)) |>
  ungroup() |>
  mutate(uf = fct_reorder(uf, diferenca)) |>
  ggplot(aes(x = perc_desocupacao, y = uf)) +
  geom_point(aes(color = trimestre_codigo)) +
  theme_light()
```

## Estrutura de projetos

Projetos estruturados são essenciais para a reprodutibilidade na ciência de dados. Ferramentas como projetos do RStudio, pacotes em R, controle de versão com Git e GitHub[^reprodutibilidade-3], relatórios reprodutíveis com [Quarto](https://quarto.org)[^reprodutibilidade-4], [`{renv}`](https://rstudio.github.io/renv/articles/renv.html) e [`{targets}`](https://books.ropensci.org/targets/) ajudam a organizar o trabalho, gerenciar dependências e automatizar processos, aumentando as chances que outras pessoas posam reproduzir os resultados a partir dos códigos e dados brutos. Ao adotar essas práticas, é possível reduzir erros, aumentar a confiabilidade e promover uma ciência mais transparente e colaborativa.

[^reprodutibilidade-3]: Será abordado na aula sobre [introdução ao controle de versão com Git e GitHub](relatorios.qmd).

[^reprodutibilidade-4]: Será abordado na aula sobre [produção de relatórios com Quarto](relatorios.qmd).

A seguir, vamos apresentar algumas dessas ferramentas e práticas!

## Projetos no RStudio

<img src="images/rproj-logo.png" class="img-rstudio" align="right" width="120px"/>

::: callout-note
O conteúdo sobre projetos no RStudio foi abordado no curso "[Introdução à análise de dados no R](https://ipeadata-lab.github.io/curso_r_intro_202409/01_1_rproj.html)".
:::

O RStudio oferece uma funcionalidade chamada **projetos**, que facilita a organização e a reprodutibilidade do trabalho em ciência de dados. Ao criar um projeto no RStudio, uma nova pasta é gerada no computador, e o RStudio automaticamente define essa pasta como o diretório de trabalho. Além disso, o RStudio também cria um arquivo com a extensão `.Rproj` dentro dessa pasta, que contém informações sobre o projeto.

Trabalhar com projetos no RStudio é altamente recomendado, pois ajuda a manter os arquivos organizados e facilita a reprodução do código. Sempre que iniciar uma nova análise de dados, crie um projeto correspondente. Isso garante que todos os arquivos relacionados ao projeto estejam em um único local e evita problemas comuns, como dependência de caminhos absolutos.

É recomendado que sempre trabalhemos em projetos no RStudio, pois isso facilita a organização dos arquivos e a reprodução do código. Portanto, ao começar a trabalhar em uma novo projeto de análise de dados, lembre-se de criar um `.Rproj` correspondente.

Para manter a organização, salve os arquivos relacionados ao projeto (como scripts, bases de dados e resultados) dentro da pasta principal do projeto. No entanto, é uma boa prática estruturar o projeto em subpastas para separar diferentes tipos de arquivos, como dados, scripts e relatórios.

Um exemplo de estrutura básica de projeto pode incluir as seguintes subpastas:

-   **`dados/`**: Para armazenar bases de dados.

-   **`scripts/`**: Para salvar scripts R utilizados na análise.

-   **`relatorios/`**: Para guardar relatórios gerados.

### Exercício

1.  No RStudio, crie um novo projeto para ser utilizado ao longo do curso. Lembre-se de criar o projeto em uma pasta que você possa acessar facilmente.

2.  Dentro do projeto, crie as seguintes pastas para organizar os arquivos:

    -   **`dados/`**
    -   **`dados_output/`**
    -   **`scripts/`**
    -   **`relatorios/`**

Você pode criar as pastas manualmente ou utilizar a função `dir.create()` para criar as pastas:

```{r}
#| eval: false
dir.create("dados")
dir.create("dados_output") 
dir.create("scripts")
dir.create("relatorios")
```

## `{renv}`: gerenciando dependências

<img src="images/renv-logo.svg" class="img-rstudio" align="right" width="120px"/>


O R e seus pacotes estão em constante evolução, com novas versões sendo lançadas regularmente para corrigir erros, adicionar funcionalidades e melhorar a eficiência. No entanto, essas atualizações podem introduzir mudanças que "quebram" análises anteriores, especialmente se as versões dos pacotes usados em um projeto não forem registradas. Para evitar esses problemas e garantir que as análises sejam reprodutíveis ao longo do tempo, é essencial utilizar ferramentas que ajudem a gerenciar as dependências do projeto. 

O pacote [`{renv}`](https://rstudio.github.io/renv/articles/renv.html)  é uma ferramenta que permite gerenciar as dependências de pacotes em projetos R, garantindo que cada projeto tenha seu próprio ambiente isolado. Ele registra quais foram os pacotes utilizados, quais é a versão de cada um deles, e a fonte de instalação (se foram instalados do CRAN, GitHub, R Universe, Bioconductor, etc). Isso possibilita que o ambiente seja reproduzido em qualquer máquina ou momento, mesmo se o R ou os pacotes forem atualizados.

O `{renv}` é especialmente útil em projetos colaborativos, em que diferentes pessoas podem estar trabalhando no mesmo projeto, ou em projetos que serão retomados após um longo período de tempo. Ele garante que o ambiente de pacotes seja consistente e reprodutível, independentemente de atualizações futuras.

Apesar de poderoso, o `{renv}` pode não ser necessário para projetos muito simples ou temporários.

### Arquivo `renv.lock`

O `{renv}` registra as dependências do projeto no arquivo `renv.lock`, que é um arquivo que contém informações sobre as versões dos pacotes instalados. Com esse arquivo, é possível recriar o ambiente de pacotes exatamente como ele estava quando o arquivo foi gerado. Isso é útil para garantir a reprodutibilidade do projeto e evitar problemas com pacotes desatualizados.

Atenção: o arquivo `renv.lock` **não** deve ser alterado manualmente. 

::: {.callout-note collapse="true"}
## Expanda para ver um exemplo de conteúdo do `renv.lock`

No exemplo abaixo, temos um exemplo do conteúdo do `renv.lock`. Observe que está registrado que estamos usando o R versão 4.4.1 e o pacote `readr` (deixamos apenas um pacote para servir de exemplo, mas o arquivo contém informações sobre todos os pacotes utilizados no projeto): 

````
{
  "R": {
    "Version": "4.4.1",
    "Repositories": [
      {
        "Name": "CRAN",
        "URL": "https://cloud.r-project.org"
      }
    ]
  },
  "Packages": {
    "readr": {
      "Package": "readr",
      "Version": "2.1.5",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "R6",
        "cli",
        "clipr",
        "cpp11",
        "crayon",
        "hms",
        "lifecycle",
        "methods",
        "rlang",
        "tibble",
        "tzdb",
        "utils",
        "vroom"
      ],
      "Hash": "9de96463d2117f6ac49980577939dfb3"
    }
  }
}

````
:::

### Principais funções do `{renv}`

Para começar a utilizar o `{renv}` em um projeto, podemos utilizar a função `renv::init()`. Isso criará uma pasta `renv/` e um arquivo `renv.lock`, que registrará as dependências do projeto. Além disso, o `{renv}` armazenará as bibliotecas de pacotes do projeto na pasta `renv/library` (chamamos isso de **isolamento**). 

```{r}
#| eval: false
renv::init()
```

Para verificar o status do ambiente e quais pacotes estão instalados, podemos usar a função `renv::status()`:

```{r}
#| eval: false
renv::status()
```

A função `renv::snapshot()` é utilizada para registrar/atualizar as dependências do projeto no arquivo `renv.lock`. Isso é útil quando novos pacotes são instalados ou atualizados, e queremos registrar essas mudanças.

```{r}
#| eval: false
renv::snapshot()
```


Para restaurar o ambiente de pacotes de um projeto a partir do arquivo `renv.lock`, podemos utilizar a função `renv::restore()`:

```{r}
#| eval: false
renv::restore()
```


::: {.callout-note collapse="true"}
Também é possível utilizar a função `renv::snapshot()` com um projeto que não foi iniciado com `{renv}` (iniciado com o `renv::init()`).

Neste caso, ele registrará o estado atual das dependências nos caminhos das bibliotecas atuais. Isso torna possível restaurar os pacotes atuais, fornecendo portabilidade e reprodutibilidade leves sem o isolamento de ambiente.
::: 




## Introdução ao `{targets}`

<img src="images/targets-logo.png" class="img-rstudio" align="right" width="120px"/>

O pacote [`{targets}`](https://books.ropensci.org/targets/) é uma ferramenta para gerenciamento de pipelines reprodutíveis e escaláveis em R. Ele foi projetado para ajudar a organizar e automatizar análises de dados complexas, garantindo que todos os passos da análise sejam executados na ordem correta e de forma eficiente.

O `{targets}` utiliza o conceito de pipelines: cada etapa da análise é definida como um "alvo" (ou *target*), e as dependências entre essas etapas são gerenciadas automaticamente. Isso significa que, quando algo é alterado em uma etapa inicial, o `{targets}` identifica quais etapas subsequentes precisam ser reexecutadas e atualiza apenas essas partes, economizando tempo e esforço.

[![Exemplo de gráfico de pipeline com targets, por Will Landau](images/targets-pipeline_graph.png){fig-align="center" width="100%"}](https://wlandau.github.io/targets-tutorial/#8)

O `{targets}` é especialmente útil em análises que incluem múltiplas etapas interdependentes, como pré-processamento, modelagem e visualização. Ele também é indicado para situações em que se trabalha com grandes volumes de dados ou análises que demandam muito tempo de execução. 

Embora seja uma ferramenta poderosa, o `{targets}` pode ser excessivo para análises simples que consistem em poucas etapas. Ele é mais indicado para fluxos de trabalho complexos.


### Materiais de referência sobre targets

-   [Documentação do pacote](https://docs.ropensci.org/targets/)

-   [Livro sobre `{targets}`](https://books.ropensci.org/targets/)

-   Apresentação ["Reproducible computation at scale in R"](https://wlandau.github.io/targets-tutorial/) por Will Landau.

## Materiais

Este material foi inicialmente desenvolvido com base na aula [Introdução ao conceito de reprodutibilidade](https://beatrizmilz.github.io/2025-curso-de-verao-ime-usp-relatorios/slides/03-reprodutibilidade.html) do curso [Relatórios reprodutíveis com R](https://beatrizmilz.github.io/2025-curso-de-verao-ime-usp-relatorios/), ministrado por Beatriz Milz no [programa de Verão do IME-USP](https://www.ime.usp.br/verao/).

## Referências citadas
