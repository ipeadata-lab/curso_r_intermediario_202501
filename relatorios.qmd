---
title: "Produção de relatórios com Quarto"
code-annotations: hover
---

## Introdução

No curso [Introdução à análise de dados no R](https://ipeadata-lab.github.io/curso_r_intro_202409/), utilizamos arquivos `.R` para escrever os códigos em R. Em scripts `.R`, todo o conteúdo é interpretado como código em R, exceto o que estava precedido de `#` (utilizado para comentários).

Por exemplo:

```{r}
#| eval: false
# Aula sobre ggplot2 -----

# Carregar o ggplot2
library(ggplot2)

# exemplo de código
mtcars |>
  ggplot() +
  aes(x = wt, y = mpg) +
  geom_point()

# ....
```

Essa forma de trabalhar é ótima para criar scripts de análise de dados, mas não é a melhor forma de criar relatórios que combinam texto, código e resultados.

## *Literate programming*

<img src="images/literate-programming-book.jpg" class="img-rstudio" align="right" width="200px"/>

O conceito de *literate programming*, ou programação letrada[^relatorios-1], foi criado por [Donald Knuth](https://www-cs-faculty.stanford.edu/~knuth/lp.html) na década de 80. Esse conceito propõe a escrita de códigos intercalados com texto explicativo, de forma que o fluxo de raciocínio fique claro para leitores e colaboradores. A ideia central é que o código seja parte da comunicação, tornando o relatório um documento legível tanto para computadores quanto para humanos.

[^relatorios-1]: <https://www.ime.usp.br/~pf/CWEB/lit-prog.html>

Com base nesse conceito, surgiram ferramentas que tornam possível criar relatórios reprodutíveis que combinam texto, código e resultados, como o R Markdown e, mais recentemente, o Quarto.

## R Markdown

<img src="images/hex-rmarkdown.png" class="img-rstudio" align="right" width="120px"/>

O [R Markdown](https://rmarkdown.rstudio.com/) é um pacote em R que possibilita criar arquivos com códigos em R, resultados dos códigos, e textos explicativos. Esses arquivos tem extensão `.Rmd`.

Lançado em 2015[^relatorios-2], ele rapidamente se tornou uma das ferramentas mais populares para a criação de relatórios dinâmicos e reprodutíveis na comunidade R.

[^relatorios-2]: Curiosidade: o criador do pacote R Markdown, Yihui Xie, fez uma [apresentação sobre a história do R Markdown](https://slides.yihui.org/2021-Brazilian-R-Day.html#1) no R-Day Brasil em 2021.

![Exemplo de um arquivo .Rmd](images/exemplo-rmarkdown.png)

O R Markdown possibilita exportar os arquivos em diversos formatos, como HTML, PDF, Word, apresentações, entre outros.

## Quarto

<img src="images/quarto-logo.png" class="img-rstudio" align="right" width="200px"/>

Como citado anteriormente, o R Markdown é uma ferramenta muito boa para escrita técnica e científica reprodutível, mas, por ser um pacote em R, **o seu uso acaba ficando limitado às pessoas que usam R**.

Em 2022, a [Posit (anteriormente chamada de RStudio)](https://posit.co/) (mesma empresa responsável pelo RMarkdown) lançou o [Quarto](https://quarto.org/), uma nova ferramenta que permite a criação de documentos dinâmicos e reprodutíveis.

O Quarto é um sistema de escrita técnica e científica, de código aberto. Ele é uma evolução do R Markdown, **mas não depende do R para funcionar**. Isso significa que você pode usar o Quarto para escrever documentos com códigos em Python, R, Julia, Observable, entre outras linguagens, e exportar para diversos formatos, como PDF, HTML, Word, entre outros. Por exemplo: Você pode usar o VSCode como IDE, escrever um documento com código em Python e gerar o documento final. Tudo isso sem precisar ter o R e/ou RStudio instalados.

[![Arte por Allison Horst.](images/quarto_schematic.png){out.width="50%" fig-align="center"}](https://allisonhorst.com/)

::: {.callout-note}
O Quarto foi lançado em 2022, e apresenta melhorias em relação ao R Markdown.

Nesta aula, vamos focar no Quarto, mas caso queira utilizar o RMarkdown, os principais conceitos são os mesmos.
:::

### Instalação do Quarto

Como dito anteriormente, o Quarto **não** é um pacote em R como o RMarkdown, e sim um software que podemos instalar em nosso computador.

**Quando instalamos as versões mais recentes do RStudio IDE, o Quarto já vem instalado**. Caso você não tenha o RStudio instalado, você pode instalar o Quarto de forma independente.

Para instalar ou atualizar o Quarto, acesse a [página de instalação](https://quarto.org/docs/get-started/), faça o download do instalador referente ao seu sistema operacional (Windows, Mac OS, Linux) e faça a instalação.

[![](images/quarto-get-started.png)](https://quarto.org/docs/get-started/)

### Criar um novo documento Quarto (`.qmd`)

Os arquivos Quarto tem extensão `.qmd`, e podem ser criados no RStudio clicando no botão "New File" e selecionando "Quarto Document".

![Criar um novo arquivo Quarto](images/quarto-criar-arquivo-1.png){width="30%"}

Em seguida, o RStudio apresentará uma janela chamada "*New Quarto Document*" com algumas opções para criar um novo arquivo. Essas opções são passíveis de alteração posteriormente, então não precisamos nos preocupar muito com elas agora. Em resumo:

-   **Title**: Título do documento
-   **Author**: Nome de quem está criando o documento
-   **Format**: Formato do documento (HTML, PDF, Word). Vamos manter em HTML.
-   **Engine**: Knitr ou Jupyter. Vamos manter em Knitr.
-   **Editor**: Caixa para selecionar o editor visual. Por enquanto, vamos deixar desmarcado.

Para criar o documento, clique em "Create":

![New Quarto Document](images/quarto-criar-arquivo-2.png){width="80%"}

O RStudio criará um arquivo `.qmd` com uma estrutura inicial:

![Arquivo Quarto criado](images/quarto-criar-arquivo-3.png){width="80%"}

### Renderizar o arquivo

Podemos clicar no botão **Render** para que o arquivo seja renderizado (ou seja, o código fonte será transformado em um arquivo final HTML/Word/PDF/etc). É necessário salvar o arquivo antes de renderizar.

Na imagem a seguir, temos um exemplo de um arquivo em sua versão `.qmd` e a versão renderizada em HTML. Observe que o botão render foi destacado em vermelho, e que o arquivo renderizado foi aberto no painel Viewer do RStudio.

![Exemplo: Arquivo .qmd e a versão renderizada em HTML](images/exemplo-renderizar.png){width="80%"}

Caso você clique em render e não aconteça nada, você pode:  

1) Verificar se o RStudio está configurado para mostrar a versão preliminar (*Preview*) do documento no painel Viewer, clicando na engrenagem ao lado do botão *Render* e selecionando a opção *"Preview in Viewer Pane"*:

![Opção *Preview in Viewer Pane*](images/opcao-preview-in-viewer-pane.png){width="40%"}

2) Verificar se o arquivo foi salvo na pasta do projeto.



Nos próximos tópicos, vamos explorar a estrutura de um arquivo Quarto e como adicionar conteúdos a ele.


### Estrutura de um arquivo Quarto

Os arquivos Quarto tem extensão `.qmd`, e são divididos em três partes:

-   **Metadados**: Informações sobre o documento, como título, autor, formato, data, editor, entre outros. Essa parte é delimitada por `---` no início e no final. É escrita em formato `yaml`, com a estrutura `chave: valor`. Nos metadados, a indentação (espaços entre o início da linha e o início do texto) é importante para o correto funcionamento do documento.

-   **Campos de código (*code chunks*)**: Trechos de código (em R ou outra linguagem) que podem ser executados e exibidos no documento.

-   **Textos com marcação em Markdown**: Textos explicativos, títulos, listas, tabelas, imagens, links, entre outros. A marcação é feita em Markdown, uma linguagem de marcação simples.

::: callout-note
## O que é Markdown?

Markdown é uma **linguagem de marcação simples** que permite escrever textos com formatação básica, como títulos, listas, links, imagens, entre outros. A ideia é que o texto seja legível mesmo sem a formatação, e que a marcação seja simples e intuitiva.
:::

O arquivo abaixo é um exemplo de um arquivo Quarto:

````         
--- #<1>
title: "Título do documento"
format: html
--- #<1>

# Título 1 # <2>

Este é um texto de exemplo. # <2>

```{{r}}
# este é um campo de código em R   # <3>
1 + 1  # <3>
``` 
````

1.  Metadados
2.  Texto com marcação em Markdown
3.  Campo de código

### Editor Source e Visual

Ao utilizar documentos Quarto, podemos escolher entre dois modos de edição: **Source** (código fonte) e **Visual**.

-   **Editor Source**: Modo de edição de código, onde podemos ver e editar o código fonte do documento. É o modo padrão.

-   **Editor Visual**: Modo de edição visual, onde podemos ver uma prévia do documento como um todo, com o texto formatado e uma barra de ferramentas. É importante perceber que quando alteramos o documento no editor visual, o código fonte é atualizado automaticamente. Saiba mais sobre o [Editor Visual](https://quarto.org/docs/visual-editor/index.html).

![Barra de ferramentas do editor visual](images/visual-barra-de-ferramentas.png)

A seguir, temos um exemplo de um documento Quarto no modo Source e Visual:

::: {layout-ncol="2"}
![Editor Source](images/exemplo-editor-source.png)

![Editor Visual](images/exemplo-editor-visual.png)
:::

Para alterar entre os modos de edição, escolha a opção desejada nos botões no canto superior direito do documento:

![Alterar entre modo Source e Visual](images/mudar-editor.png){width="80%"}

O editor Visual tem várias opções para facilitar a formação do texto com Markdown e inserir outros tipos de conteúdo (como por exemplo: notas de rodapé, citações, imagens, links, tabelas simples, expressões matemáticas com LaTeX, entre outros):

[![Opções do editor Visual. Fonte: documentação do Quarto.](images/funcionalidades-visual.png){width="80%"}](https://quarto.org/docs/visual-editor/index.html)

Caso queira que o RStudio sempre abra o documento no editor de preferência, você pode adicionar essa informação nos metadados do documento, utilizando `editor: ` seguido de `source` ou `visual`. Por exemplo:

::: {layout-ncol="2"}
````
---
editor: source
---
````


````
---
editor: visual
---
````
:::




### Adicionar conteúdos

Em breve

### Opções de campos de código (*chunk options*)

Em breve

### Tipos de formatos para exportar

O Quarto permite exportar os documentos em diversos formatos, como HTML, PDF, Word, entre outros. Para definir o formato de saída, podemos adicionar um campo `format` nos metadados do documento. Por exemplo:

- HTML:

``` r
---
format: html
---
```

- Word:

``` r
---
format: docx
---
```

- PDF (é necessário ter alguma instalação de LaTeX no computador, veja as [página de instalações](instalacao.qmd#instala%C3%A7%C3%A3o-do-tinytex)):

``` r
---
format: pdf
---
```

- Apresentação em HTML:

``` r
---
format: revealjs
---
```

Essas são as opções de formatos mais utilizadas. Para ver a lista completa, consulte a [documentação do Quarto](https://quarto.org/docs/output-formats/all-formats.html).

### Projetos em Quarto

Em breve

### Quarto CLI

Em breve

### Extensões

Em breve





<!-- ### Quarto CLI -->

<!-- -   O Quarto é um CLI: Command Line Interface - Interface de linha de comando. -->

<!-- -   Podemos usar o Quarto no terminal. -->

<!-- Rmarkdown - mais histórico  -->

<!-- Markdown básico (visual ,mostrar o de-para) -->

<!-- Introdução ao Quarto -->

<!-- Code blocks, opções de campos de código -->

<!-- alterar o tipo de output: Documentos (pdf,  html, docx, Apresentações) -->

<!-- adicionar conteúdos: tabela (knitr::kable()), gráficos, código em linha, expressões matemáticas em LaTeX (regressão linear simples como exemplo), callout blocks,   -->

<!-- em -->

<!-- Apresentações -->
