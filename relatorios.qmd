---
title: "Produção de relatórios com Quarto"
---

## Introdução

No curso [Introdução à análise de dados no R](https://ipeadata-lab.github.io/curso_r_intro_202409/), utilizamos arquivos `.R` para escrever os códigos em R. Em scripts `.R`, todo o conteúdo é interpretado como código em R, exceto o que estava precedido de `#` (utilizado para comentários).

Por exemplo:

```{r}
#| eval: false
# Aula sobre ggplot2 -----

# Carregar pacotes
library(ggplot2)
library(palmerpenguins)

# Código que gera o gráfico
penguins |>
  ggplot() +
  aes(x = flipper_length_mm, y = body_mass_g) +
  geom_point(aes(color = species, shape = species)) +
  scale_color_manual(values = c("darkorange", "darkorchid", "cyan4")) +
  theme_minimal()

# ....
```

Essa forma de trabalhar é ótima para criar scripts de análise de dados, mas não é a melhor forma de criar relatórios que combinam texto, código e resultados.

## *Literate programming*

<img src="images/literate-programming-book.jpg" class="img-rstudio" align="right" width="200px"/>

O conceito de *literate programming*, ou programação letrada[^relatorios-1], foi criado por [Donald Knuth](https://www-cs-faculty.stanford.edu/~knuth/lp.html) na década de 80. Esse conceito propõe a escrita de códigos intercalados com texto explicativo, de forma que o fluxo de raciocínio fique claro para leitores e colaboradores. A ideia central é que o código seja parte da comunicação, tornando o relatório um documento legível tanto para computadores quanto para humanos.

[^relatorios-1]: <https://www.ime.usp.br/~pf/CWEB/lit-prog.html>

Com base nesse conceito, surgiram ferramentas que tornam possível criar relatórios reprodutíveis que combinam texto, código e resultados, como o R Markdown e, mais recentemente, o Quarto.

## R Markdown

<img src="images/hex-rmarkdown.png" class="img-rstudio" align="right" width="120px"/>

O [R Markdown](https://rmarkdown.rstudio.com/) é um pacote em R que possibilita criar arquivos com códigos em R, resultados dos códigos, e textos explicativos. Esses arquivos tem extensão `.Rmd`.

Lançado em 2015[^relatorios-2], ele rapidamente se tornou uma das ferramentas mais populares para a criação de relatórios dinâmicos e reprodutíveis na comunidade R.

[^relatorios-2]: Curiosidade: o criador do pacote R Markdown, Yihui Xie, fez uma [apresentação sobre a história do R Markdown](https://slides.yihui.org/2021-Brazilian-R-Day.html#1) no R-Day Brasil em 2021.

![Exemplo de um arquivo .Rmd](images/exemplo-rmarkdown.png)

O R Markdown possibilita exportar os arquivos em diversos formatos, como HTML, PDF, Word, apresentações, entre outros.

## Quarto

<img src="images/quarto-logo.png" class="img-rstudio" align="right" width="200px"/>

Como citado anteriormente, o R Markdown é uma ferramenta muito boa para escrita técnica e científica reprodutível, mas, por ser um pacote em R, **o seu uso acaba ficando limitado às pessoas que usam R**.

Em 2022, a [Posit (anteriormente chamada de RStudio)](https://posit.co/) (mesma empresa responsável pelo RMarkdown) lançou o [Quarto](https://quarto.org/), uma nova ferramenta que permite a criação de documentos dinâmicos e reprodutíveis.

O Quarto é um sistema de escrita técnica e científica, de código aberto. Ele é uma evolução do R Markdown, **mas não depende do R para funcionar**. Isso significa que você pode usar o Quarto para escrever documentos com códigos em Python, R, Julia, Observable, entre outras linguagens, e exportar para diversos formatos, como PDF, HTML, Word, entre outros. Por exemplo: Você pode usar o VSCode como IDE, escrever um documento com código em Python e gerar o documento final. Tudo isso sem precisar ter o R e/ou RStudio instalados.

[![Arte por Allison Horst.](images/quarto_schematic.png){out.width="50%" fig-align="center"}](https://allisonhorst.com/)

::: {.callout-note}
O Quarto foi lançado em 2022, e apresenta melhorias em relação ao R Markdown.

Nesta aula, vamos focar no Quarto, mas caso queira utilizar o RMarkdown, os principais conceitos são os mesmos.
:::

### Instalação do Quarto

Como dito anteriormente, o Quarto **não** é um pacote em R como o RMarkdown, e sim um software que podemos instalar em nosso computador.

**Quando instalamos as versões mais recentes do RStudio IDE, o Quarto já vem instalado**. Caso você não tenha o RStudio instalado, você pode instalar o Quarto de forma independente.

Para instalar ou atualizar o Quarto, acesse a [página de instalação](https://quarto.org/docs/get-started/), faça o download do instalador referente ao seu sistema operacional (Windows, Mac OS, Linux) e faça a instalação.

[![](images/quarto-get-started.png)](https://quarto.org/docs/get-started/)

#### Exercício

1) Verifique se o Quarto está instalado no seu computador. Para isso, abra o RStudio e verifique se o botão "New File" apresenta a opção "Quarto Document".


### Criar um novo documento Quarto (`.qmd`)

Os arquivos Quarto tem extensão `.qmd`, e podem ser criados no RStudio clicando no botão "New File" e selecionando "Quarto Document".

![Criar um novo arquivo Quarto](images/quarto-criar-arquivo-1.png){width="30%"}

Em seguida, o RStudio apresentará uma janela chamada "*New Quarto Document*" com algumas opções para criar um novo arquivo. Essas opções são passíveis de alteração posteriormente, então não precisamos nos preocupar muito com elas agora. Em resumo:

-   **Title**: Título do documento
-   **Author**: Nome de quem está criando o documento
-   **Format**: Formato do documento (HTML, PDF, Word). Vamos manter em HTML.
-   **Engine**: Knitr ou Jupyter. Vamos manter em Knitr.
-   **Editor**: Caixa para selecionar o editor visual. Por enquanto, vamos deixar desmarcado.

Para criar o documento, clique em "Create":

![New Quarto Document](images/quarto-criar-arquivo-2.png){width="80%"}

O RStudio criará um arquivo `.qmd` com uma estrutura inicial:

![Arquivo Quarto criado](images/quarto-criar-arquivo-3.png){width="80%"}

#### Exercício

1) Crie um arquivo com Quarto básico, adicionando o título "Meu primeiro relatório", e no campo de autoria adicionando o seu nome. Mantenha selecionada a opção para exportar um arquivo HTML. Salve o arquivo como `"aula-2.qmd"` na pasta do projeto do curso, em `"relatorios/"`.



### Renderizar o arquivo

Podemos clicar no botão **Render** para que o arquivo seja renderizado (ou seja, o código fonte será transformado em um arquivo final HTML/Word/PDF/etc). É necessário salvar o arquivo antes de renderizar.

Na imagem a seguir, temos um exemplo de um arquivo em sua versão `.qmd` e a versão renderizada em HTML. Observe que o botão render foi destacado em vermelho, e que o arquivo renderizado foi aberto no painel Viewer do RStudio.

![Exemplo: Arquivo .qmd e a versão renderizada em HTML](images/exemplo-renderizar.png){width="80%"}

Caso você clique em render e não aconteça nada, você pode:  

1) Verificar se o RStudio está configurado para mostrar a versão preliminar (*Preview*) do documento no painel Viewer, clicando na engrenagem ao lado do botão *Render* e selecionando a opção *"Preview in Viewer Pane"*:

![Opção *Preview in Viewer Pane*](images/opcao-preview-in-viewer-pane.png){width="40%"}

2) Verificar se o arquivo foi salvo na pasta do projeto.



Nos próximos tópicos, vamos explorar a estrutura de um arquivo Quarto e como adicionar conteúdos a ele.


#### Exercício

1) Renderize o arquivo `"aula-2.qmd"` que você criou anteriormente. Verifique se o arquivo foi renderizado corretamente, se você consegue visualizar o conteúdo no painel Viewer do RStudio, e se o arquivo foi salvo na pasta do projeto.


### Estrutura de um arquivo Quarto

Os arquivos Quarto tem extensão `.qmd`, e são divididos em três partes:

-   **Metadados**: Informações sobre o documento, como título, autor, formato, data, editor, entre outros. Essa parte é delimitada por `---` no início e no final. É escrita em formato `yaml`, com a estrutura `chave: valor`. Nos metadados, a indentação (espaços entre o início da linha e o início do texto) é importante para o correto funcionamento do documento.

-   **Campos de código (*code chunks*)**: Trechos de código (em R ou outra linguagem) que podem ser executados e exibidos no documento. Os campos de código podem ser criados utilizando a marcação ` ```{r} ` no início e ` ``` ` no final, ou utilizando o botão de criar novo *chunk*: ![](images/botao-novo-chunk.png).

-   **Textos com marcação em Markdown**: Textos explicativos, títulos, listas, tabelas, imagens, links, entre outros. A marcação é feita em Markdown, uma linguagem de marcação simples.

::: callout-note
## O que é Markdown?

Markdown é uma **linguagem de marcação simples** que permite escrever textos com formatação básica, como títulos, listas, links, imagens, entre outros. A ideia é que o texto seja legível mesmo sem a formatação, e que a marcação seja simples e intuitiva.
:::

O arquivo abaixo é um exemplo de um arquivo Quarto:

````         
--- #<1>
title: "Título do documento"
format: html
--- #<1>

# Título 1 # <2>

Este é um texto de exemplo. # <2>

```{{r}}
# este é um campo de código em R   # <3>
1 + 1  # <3>
``` 
````

1.  Metadados
2.  Texto com marcação em Markdown
3.  Campo de código


#### Exercício

1) Vamos começar a adicionar um pouco de conteúdo no arquivo `"aula-2.qmd"` criado anteriormente. Adicione:

  - Um campo de código, onde o pacote tidyverse seja carregado.
  
  - Um campo de código, com o código para criar um gráfico simples com o pacote `ggplot2`. Caso você não tenha um código em mente, você pode utilizar o código abaixo:
  
```{r}
#| eval: false
library(palmerpenguins)
penguins |>
  ggplot() +
  aes(x = flipper_length_mm, y = body_mass_g) +
  geom_point(aes(color = species, shape = species)) +
  scale_color_manual(values = c("darkorange", "darkorchid", "cyan4")) +
  theme_minimal()
```

  - Um parágrafo simples de texto, descrevendo o que foi feito. 

  
  

2) Salve o arquivo e renderize-o.  Verifique se o conteúdo foi renderizado corretamente.

::: {.callout-warning}

## Atenção: Dicas importantes sobre os campos de código

-   Os campos de código são executados na ordem em que aparecem no documento. Se você tentar executar um campo de código que depende de um objeto que ainda não foi criado, um erro será gerado.

- O documento Quarto deve ser independente dos objetos que estão carregados no painel *Environment* do RStudio, e dos pacotes que você carregou na sua sessão do R. Todos os pacotes e objetos que você precisa devem ser carregados no próprio documento.

- Por padrão, o conteúdo do campo de código é executado toda vez que o documento é renderizado. Se você não quer que o código seja executado, você pode adicionar a opção `eval: false` no campo de código (falaremos mais sobre as opções de campos de código posteriormente).

- Cuidado com o que você adiciona no campo de código! Por exemplo: não adicione o comando `install.packages()` no campo de código, pois isso pode instalar pacotes toda vez que o documento for renderizado. Se você precisa instalar pacotes, faça isso no console do RStudio. Caso queira deixar isso registrado no campo de código, você pode: 1) adicionar como comentário (`# install.packages("nome-do-pacote")`), ou 2) adicionar a opção `eval: false` no campo de código.




:::


### Editor Source e Visual

Ao utilizar documentos Quarto, podemos escolher entre dois modos de edição: **Source** (código fonte) e **Visual**.

-   **Editor Source**: Modo de edição de código, onde podemos ver e editar o código fonte do documento. É o modo padrão.

-   **Editor Visual**: Modo de edição visual, onde podemos ver uma prévia do documento como um todo, com o texto formatado e uma barra de ferramentas. É importante perceber que quando alteramos o documento no editor visual, o código fonte é atualizado automaticamente. Saiba mais sobre o [Editor Visual](https://quarto.org/docs/visual-editor/index.html).

![Barra de ferramentas do editor visual](images/visual-barra-de-ferramentas.png)

A seguir, temos um exemplo de um documento Quarto no modo Source e Visual:

::: {layout-ncol="2"}
![Editor Source](images/exemplo-editor-source.png)

![Editor Visual](images/exemplo-editor-visual.png)
:::

Para alterar entre os modos de edição, escolha a opção desejada nos botões no canto superior direito do documento:

![Alterar entre modo Source e Visual](images/mudar-editor.png){width="80%"}

O editor Visual tem várias opções para facilitar a formação do texto com Markdown e inserir outros tipos de conteúdo (como por exemplo: notas de rodapé, citações, imagens, links, tabelas simples, expressões matemáticas com LaTeX, entre outros):

[![Opções do editor Visual. Fonte: documentação do Quarto.](images/funcionalidades-visual.png){width="80%"}](https://quarto.org/docs/visual-editor/index.html)

Caso queira que o RStudio sempre abra o documento no editor de preferência, você pode adicionar essa informação nos metadados do documento, utilizando `editor: ` seguido de `source` ou `visual`. Por exemplo:

::: {layout-ncol="2"}
````
---
editor: source
---
````


````
---
editor: visual
---
````
:::


#### Exercício

1. Explore as opções do editor Visual, adicionando um pouco de formatação ao texto do arquivo `"aula-2.qmd"`. Tente adicionar pelo menos um título, uma lista, e um link.

2. Altere entre os modos Source e Visual. Veja a diferença entre o código fonte e a visualização do documento.

3. Entre os modos Source e Visual, qual você prefere para escrever documentos? Por quê?



### Opções de campos de código (*chunk options*)

Os campos de código, ou *code chunks*, são trechos de código que podem ser executados em documentos Quarto. Eles oferecem diversas opções para personalizar a execução e a exibição do código e dos resultados. Essas opções permitem configurar como o código aparece no relatório, como ele é executado e como os resultados são apresentados.

As opções devem ser apresentadas na linha após o início do campo de código, precedido de `#|`, no formato `nome_opcao: valor`. Por exemplo:
````
```{{r}}
#| nome_opcao: valor

# código em R aqui
1 + 1
```
````


Existem muitas opções de campos de código, e estão listadas na [documentação do Quarto](https://quarto.org/docs/computations/execution-options.html). Neste momento, vamos explorar algumas das principais opções!

#### Exibir ou ocultar o código

A opção `echo:` define se o código será exibido (ou não) no relatório. Por padrão, o código é exibido. Para ocultar o código, podemos adicionar `echo: false` no campo de código. 

#### Executar ou não o código

A opção `eval:` define se o código será executado (ou não) no relatório. Por padrão, o código é executado. Para não executar o código, podemos adicionar `eval: false` no campo de código.

#### Mensagens (*message*) e avisos (*warning*)

Ao executar um campo de código, mensagens e avisos podem ser gerados. Podemos controlar se essas mensagens e avisos serão exibidos no relatório com as opções `message:` e `warning:`. Por padrão, ambos são exibidos. Para ocultar as mensagens, podemos adicionar `message: false` no campo de código. Para ocultar os avisos, podemos adicionar `warning: false`.

#### Nome do campo de código (*label*)

Podemos adicionar um nome ao campo de código, utilizando a opção `label: nome-do-campo`. Atencão:

  - É importante que cada campo de código nomeado tenha um nome único! Não podemos repetir os nomes.
  
  - Deixe o nome do campo de código sem caracteres especiais, sem espaços, e sem `_`. Caso queira separar palavras, utilize o `-`.


É interessante nomear os campos de código, pois:

- É necessário para fazer [referências cruzadas](https://quarto.org/docs/authoring/cross-reference-options.html) (neste caso, precisamos utilizar os prefixos, como `fig-` para figuras, e `tbl-` para tabelas). 

- Facilita a identificação dos campos de código, principalmente em documentos maiores (ao abrir o arquivo `.qmd`, existe um meno no canto inferior esquerdo do RStudio onde podemos navegar pelo documento utilizando os nomes dos campos de código e os títulos e subtítulos).

- Caso ocorram erros, é mais fácil identificar o campo de código que gerou o erro, pois a mensagem apresentada indicará o nome do campo de código.

- As imagens geradas a partir de campos de código nomeados são salvas com o nome do campo de código. Isso facilita a identificação das imagens geradas na pasta do projeto.

#### Alterando a configuração global dos campos de código

Podemos alterar a configuração global dos campos de código no documento, adicionando as opções no início do documento, nos metadados. Por exemplo:

``` r
---
execute: 
  message: false # <1>
  warning: false # <2>
  echo: false # <3>
---
```
1. A opção `message: false` oculta as mensagens.
2. A opção `warning: false` oculta os avisos.
3. A opção `echo: false` oculta o código.


Isso fará com que todos os campos de código do documento tenham essas opções por padrão. Caso você queira alterar as opções de um campo de código específico, você pode adicionar as opções no campo de código específico. 

### Adicionando conteúdos com código

::: {.callout-note}
Existem vários tipos de conteúdo que podem ser adicionados a um documento Quarto, como texto, código, gráficos, tabelas, imagens, links, entre outros. 

O melhor lugar para aprender sobre esses conteúdos é a [documentação do Quarto](https://quarto.org/docs/), que é muito completa e bem organizada.

:::


Vamos explorar alguns tipos de conteúdos que podem ser adicionados a um documento Quarto **que sejam resultados de códigos em R**.


Como citado anteriormente, podemos adicionar código em R em campos de código, ou *code chunks*. Dentro de um campo de código, podemos adicionar comentários, códigos em R, e os resultados dos códigos serão exibidos logo em seguida no documento.

Para adicionar um campo de código, utilizamos a marcação ` ```{r} ` no início e ` ``` ` no final. Por exemplo:

```{r}
#| echo: fenced
# Exemplo: somando 1 + 1
1 + 1
```

A partir de agora, vamos omitir a marcação de iniciar e finalizar os campos de código, porém saiba que é necessário adicionar essas marcações para que o código seja executado. Por exemplo, o código acima seria apresentado desta forma:
 
```{r}
# Exemplo: somando 1 + 1
1 + 1
```


#### Adicionando gráficos

Para adicionar um gráfico, podemos criar um campo de código e adicionar o código que gera o gráfico (igual ao utilizando em scripts `.R`).

Os gráficos gerados a partir de um campo de código são exibidos logo após o código. 

Por exemplo:

```{r}
#| warning: false
# Carregar os pacotes
library(tidyverse)
library(palmerpenguins)

# exemplo de código
penguins |>
  ggplot() +
  aes(x = flipper_length_mm, y = body_mass_g) +
  geom_point(aes(color = species, shape = species)) +
  scale_color_manual(values = c("darkorange", "darkorchid", "cyan4")) +
  labs(
    x = "Comprimento da nadadeira (mm)",
    y = "Massa corporal (g)",
    color = "Espécie",
    shape = "Espécie",
    title = "Relação entre comprimento da nadadeira e massa corporal",
    subtitle = "Pinguins das espécies Adelie, Chinstrap e Gentoo",
    caption = "Fonte: Pacote palmerpenguins."
  ) +
  theme_minimal()
```



#### Adicionando tabelas

Para adicionar tabelas (que sejam geradas com código), não basta apenas adicionar o código que gera a tabela. Veja o que acontece se tentarmos adicionar uma tabela com o código abaixo:

```{r}
pinguins_frequencia <- penguins |> 
  count(species, island, sort = TRUE)

pinguins_frequencia
```

Observe que o resultado que apareceu no relatório é igual ao que apareceria no console do R. 

Para que a tabela seja exibida de forma mais amigável, podemos utilizar alguma função de tabela para gerar tabelas. Existem diversas funções (de diferentes pacotes em R) que possibilitam a criação de tabelas. A função `knitr::kable()` é muito utilizada, e permite criar tabelas simples a partir de um data frame.

Por exemplo, podemos utilizar o `knitr::kable()` para exibir a tabela criada:

```{r}
pinguins_frequencia |> 
  knitr::kable()
```

Podemos explorar os argumentos da função para personalizar a tabela, como adicionar nomes de colunas, entre outros. Por exemplo:

```{r}
pinguins_frequencia |> 
  knitr::kable(col.names = c("Espécie", "Ilha", "Quantidade"))
```
::: {.callout-tip}
Além da função `knitr::kable()`, existem outras funções que podem ser utilizadas para criar tabelas. Abaixo listamos alguns pacotes que possuem funções para criar tabelas, e podem ser explorados posteriormente:

- `kableExtra`: este pacote apresenta funções para personalizar tabelas criadas com `knitr::kable()`, porém o seu funcionamento é focado em [tabelas em HTML](https://haozhu233.github.io/kableExtra/awesome_table_in_html.html) e [PDF (com LaTeX)](https://haozhu233.github.io/kableExtra/awesome_table_in_pdf.pdf). Se o seu objetivo é gerar documentos em word, não utilize o `kableExtra`.

- `flextable`: este pacote é focado em criar tabelas para documentos **em Word**, e permite maior personalização. Para aprender a utilizar o `flextable`, consulte a [documentação do pacote](https://davidgohel.github.io/flextable/) e o [guia de usuário (flextable book)](https://ardata-fr.github.io/flextable-book/).

- `reactable`: este pacote é focado em criar tabelas interativas **em HTML**, e permite adicionar filtros, ordenação, entre outros. Para aprender a utilizar o `reactable`, consulte a [documentação do pacote](https://glin.github.io/reactable/articles/examples.html).

-  `gt`: este pacote foi criado pela equipe da RStudio/Posit, e tenta utilizar uma filosofia similar ao `ggplot2` (a gramática dos gráficos), porém com tabelas (`gt` sendo gramática de tabelas). O `gt` tem funções para as [diferentes partes da tabela](https://gt.rstudio.com/reference/figures/gt_parts_of_a_table.svg): cabeçalho, corpo, rodapé, entre outros. Para aprender a utilizar o `gt`, consulte a [documentação do pacote](https://gt.rstudio.com/). Curiosidade: em 2023 a mesma equipe lançou a [biblioteca `gt` para Python](https://posit-dev.github.io/great-tables/articles/intro.html).

:::

##### Exercício

1) No arquivo `"aula-2.qmd"`, crie um campo de código com uma tabela de frequência de pinguins por espécie e sexo, utilizando a base de dados `penguins`. Salve essa tabela de frequência em um objeto chamado `pinguins_freq_especie_sexo`.

2) Utilizando o objeto criado, apresente essa tabela formatada com a função `knitr::kable()`.

3) Experimente adicionar outra tabela utilizando alguma função de tabela de outro pacote citado como extra, como `flextable::flextable()`, `reactable::reactable()`, ou `gt::gt()`. 



#### Adicionar código em linha (*inline code*)


Até agora, exploramos como adicionar conteúdos com código dentro de um campo de código. Mas e se quisermos adicionar um resultado de um código em um texto?

Não é interessante adicionar manualmente conteúdos que podem ser gerados com código, pois isso pode tornar o documento menos reprodutível. Principalmente se os dados podem ser atualizados com o tempo!

Para adicionar um resultado de um código em um texto, podemos utilizar o que chamamos de código em linha, ou *inline code*. Para isso, utilizamos a seguinte sintaxe:

![](images/sintaxe-inline-code.png)

Por exemplo, o texto abaixo apresenta conteúdos feitos com campos de código:

> A base de dados `penguins` apresenta pinguins de três espécies: `r unique(penguins$species)`. A base possui `r nrow(penguins)` observações e `r ncol(penguins)` (sendo que cada observação corresponde a um pinguim) variáveis: `r names(penguins)`. A coleta de dados foi feita em três ilhas: `r unique(penguins$island)`, entre os anos de `r min(penguins$year)` e `r max(penguins$year)`.





Você consegue identificar onde foram utilizados os códigos em linha?

::: {.callout-tip collapse="true"}
## Clique para ver a resposta!

Os conteúdos em destaque foram feitos com códigos em linha:

> A base de dados `penguins` apresenta pinguins de três espécies: **`r unique(penguins$species)`**. A base possui **`r nrow(penguins)`** observações e **`r ncol(penguins)`** (sendo que cada observação corresponde a um pinguim) variáveis: **`r names(penguins)`**. A coleta de dados foi feita em três ilhas: **`r unique(penguins$island)`**, entre os anos de **`r min(penguins$year)`** e **`r max(penguins$year)`**.
:::

::: {.callout-tip collapse="true"}
## Clique para ver o código!


![](images/inline-code-exemplo.png)

:::

Dicas para adicionar conteúdos com código em linha:

- Se você vai escrever algo no texto que pode ser gerado com código, experimente utilizar o código em linha.

- A base de dados que você está utilizando pode ser atualizada futuramente? Se sim, busque adicionar conteúdos com códigos em linha.

- Caso algum conteúdo que você quer adicionar com código de linha dependa de um código "grande" (mais de uma linha), é interessante criar um campo de código, salvar o resultado em um objeto, e utilizar o código em linha para chamar o objeto.

##### Exercícios


1. Ainda no arquivo `"aula-2.qmd"`: utilizando a base de dados `pnud_min` do pacote `abjData`, escreva uma breve descrição da base de dados, utilizando códigos em linha. Ideias de conteúdos: número de observações, número de variáveis, variáveis presentes na base, quais são os anos presentes na base, quais são os municípios com o menor e maior indicador de IDH municipal para o ano mais recente, entre outros.

Caso não conheça o pacote `abjData`, você pode carregar a base de dados com o código abaixo:

```{r}
# install.packages("abjData") # executar caso não tenha o abjData instalado
library(abjData)
pnud_min
```




### Tipos de formatos para exportar

O Quarto permite exportar os documentos em diversos formatos, como HTML, PDF, Word, entre outros. Para definir o formato de saída, podemos adicionar um campo `format` nos metadados do documento. Por exemplo:

- HTML:

``` r
---
format: html
---
```

- Word:

``` r
---
format: docx
---
```

- PDF (é necessário ter alguma instalação de LaTeX no computador, veja as [página de instalações](instalacao.qmd#instala%C3%A7%C3%A3o-do-tinytex)):

``` r
---
format: pdf
---
```

- Apresentação em HTML:

``` r
---
format: revealjs
---
```

Essas são as opções de formatos mais utilizadas. Para ver a lista completa, consulte a [documentação do Quarto](https://quarto.org/docs/output-formats/all-formats.html).

### Projetos em Quarto

Em breve

### Quarto CLI

Em breve

### Extensões

Em breve


### Dúvidas da aula

::: {.callout-note}

## Idioma do documento

1. Ao renderizar um documento em HTML, temos alguns elementos em inglês (como `author`, `date`, `table of contents`, entre outros). É possível esse conteúdo em português?

Podemos usar a seguinte configuração nos metadados:

``` r
---
lang: pt
---
```

Caso tenha dúvidas, consulte a [página de documentação](https://quarto.org/docs/authoring/language.html#lang-option).
:::

::: {.callout-note}

## Sumário

2. É possível adicionar um sumário no documento Quarto?

Podemos usar a seguinte configuração nos metadados:

``` r
---
format:
  html:
    toc: true # <1> 
---
```
1. TOC é a sigla para *T*able *O*f *C*ontents, ou seja, sumário. Ao utilizar `toc: true`, o sumário será adicionado ao documento.


Existem outras opções disponíveis para personalizar a forma como o sumário aparece. Essas opções estão listadas na [página de documentação](https://quarto.org/docs/output-formats/html-basics.html#table-of-contents).

:::

::: {.callout-note}

## Arquivo autocontido

3. Ao gerar um arquivo HTML, o Quarto exporta um arquivo `.html` e junto à ele, algumas pastas com arquivos `.css`, `.js`, entre outros. É possível exportar um arquivo HTML que seja autocontido, ou seja, que não dependa de pastas adicionais?

Podemos usar a seguinte configuração nos metadados:

``` r
---
format:
  html:
    embed-resources: true # <1>
---
```
1. `embed-resources: true` faz com que o arquivo HTML seja autocontido, ou seja, que não dependa de pastas adicionais.

**Atenção:** o arquivo autocontido costuma ser maior (ocupar mais espaço do computador) do que um arquivo "padrão" (que depende de arquivos em pastas adicionais).

Caso necessário, consulte a [página de documentação](https://quarto.org/docs/output-formats/html-publishing.html#standalone-html).
:::

### Links úteis na documentação do Quarto

- [Como instalar](https://quarto.org/docs/get-started/)

- [Exemplos básicos de markdown](https://quarto.org/docs/authoring/markdown-basics.html)

- [Editor Visual](https://quarto.org/docs/visual-editor/index.html)

- [Opções de campo de código](https://quarto.org/docs/reference/cells/cells-knitr.html)

- [Como configurar o campo de autores: nome, email, afiliação, ORCID, etc](https://quarto.org/docs/journals/authors.html)

- [Como configurar o sumário](https://quarto.org/docs/output-formats/html-basics.html#table-of-contents)

- [Configurações de metadados para gerar arquivos HTML](https://quarto.org/docs/reference/formats/html.html#metadata)

- [É possivel adicionar citações com o Quarto?](https://quarto.org/docs/visual-editor/technical.html#citations)

- [Sobre a referência cruzada](https://quarto.org/docs/authoring/cross-reference-options.html)

- [Formatos disponíveis para exportar documentos](https://quarto.org/docs/output-formats/all-formats.html)

- [Lista de extensões do Quarto](https://quarto.org/docs/extensions/)


<!-- ### Quarto CLI -->

<!-- -   O Quarto é um CLI: Command Line Interface - Interface de linha de comando. -->

<!-- -   Podemos usar o Quarto no terminal. -->

<!-- Rmarkdown - mais histórico  -->

<!-- Markdown básico (visual ,mostrar o de-para) -->

<!-- Introdução ao Quarto -->

<!-- Code blocks, opções de campos de código -->

<!-- alterar o tipo de output: Documentos (pdf,  html, docx, Apresentações) -->

<!-- adicionar conteúdos: tabela (knitr::kable()), gráficos, código em linha, expressões matemáticas em LaTeX (regressão linear simples como exemplo), callout blocks,   -->

<!-- em -->

<!-- Apresentações -->
